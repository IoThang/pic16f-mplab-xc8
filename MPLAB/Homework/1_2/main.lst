CCS PCM C Compiler, Version 5.015, 5967               03-Thg3-22 08:54

               Filename:   C:\D\BT VXL\1_2\main.lst

               ROM used:   111 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   011
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=1000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   010
000A:  MOVLW  52
000B:  MOVWF  77
000C:  DECFSZ 77,F
000D:  GOTO   00C
000E:  DECFSZ 00,F
000F:  GOTO   00A
0010:  RETURN
....................  
....................  
....................  
.................... void main() 
0011:  MOVF   03,W
0012:  ANDLW  1F
0013:  MOVWF  03
0014:  BSF    03.5
0015:  BSF    03.6
0016:  MOVF   09,W
0017:  ANDLW  C0
0018:  MOVWF  09
0019:  BCF    03.6
001A:  BCF    1F.4
001B:  BCF    1F.5
001C:  MOVLW  00
001D:  BSF    03.6
001E:  MOVWF  08
001F:  BCF    03.5
0020:  CLRF   07
0021:  CLRF   08
0022:  CLRF   09
0023:  BCF    03.7
.................... { 
....................    set_tris_d(0); 
0024:  MOVLW  00
0025:  BSF    03.5
0026:  BCF    03.6
0027:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................       output_bit(PIN_D0,1); 
0028:  BCF    03.5
0029:  BSF    08.0
002A:  BSF    03.5
002B:  BCF    08.0
....................       output_bit(PIN_D1,0); 
002C:  BCF    03.5
002D:  BCF    08.1
002E:  BSF    03.5
002F:  BCF    08.1
....................       output_bit(PIN_D2,0); 
0030:  BCF    03.5
0031:  BCF    08.2
0032:  BSF    03.5
0033:  BCF    08.2
....................       delay_ms(500); 
0034:  MOVLW  02
0035:  BCF    03.5
0036:  MOVWF  21
0037:  MOVLW  FA
0038:  MOVWF  22
0039:  CALL   004
003A:  DECFSZ 21,F
003B:  GOTO   037
....................        
....................       output_bit(PIN_D0,1); 
003C:  BSF    08.0
003D:  BSF    03.5
003E:  BCF    08.0
....................       output_bit(PIN_D1,1); 
003F:  BCF    03.5
0040:  BSF    08.1
0041:  BSF    03.5
0042:  BCF    08.1
....................       output_bit(PIN_D2,0); 
0043:  BCF    03.5
0044:  BCF    08.2
0045:  BSF    03.5
0046:  BCF    08.2
....................       delay_ms(500); 
0047:  MOVLW  02
0048:  BCF    03.5
0049:  MOVWF  21
004A:  MOVLW  FA
004B:  MOVWF  22
004C:  CALL   004
004D:  DECFSZ 21,F
004E:  GOTO   04A
....................        
....................       output_bit(PIN_D0,1); 
004F:  BSF    08.0
0050:  BSF    03.5
0051:  BCF    08.0
....................       output_bit(PIN_D1,1); 
0052:  BCF    03.5
0053:  BSF    08.1
0054:  BSF    03.5
0055:  BCF    08.1
....................       output_bit(PIN_D2,1); 
0056:  BCF    03.5
0057:  BSF    08.2
0058:  BSF    03.5
0059:  BCF    08.2
....................       delay_ms(500); 
005A:  MOVLW  02
005B:  BCF    03.5
005C:  MOVWF  21
005D:  MOVLW  FA
005E:  MOVWF  22
005F:  CALL   004
0060:  DECFSZ 21,F
0061:  GOTO   05D
....................        
....................       output_d(0); 
0062:  BSF    03.5
0063:  CLRF   08
0064:  BCF    03.5
0065:  CLRF   08
....................       delay_ms(500); 
0066:  MOVLW  02
0067:  MOVWF  21
0068:  MOVLW  FA
0069:  MOVWF  22
006A:  CALL   004
006B:  DECFSZ 21,F
006C:  GOTO   068
006D:  GOTO   029
....................  
....................    } 
....................  
.................... } 
006E:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
