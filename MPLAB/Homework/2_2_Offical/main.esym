C L "main" 0 8 1 "FUNCTION"
D G "__PCM__" 0 13 ""5.015""
D G "__DEVICE__" 0 13 "1787"
D G "__DATE__" 0 13 ""03-Thg3-22""
D G "__TIME__" 0 13 ""16:44:58"" "Standard Header file for the PIC16F1787 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 40 "int8" `54 
f B "set_tris_a" 2 40 "void(int8 value)" `53 
v L "value" 2 41 "int8" `56 
f B "set_tris_b" 2 41 "void(int8 value)" `55 
v L "value" 2 42 "int8" `58 
f B "set_tris_c" 2 42 "void(int8 value)" `57 
v L "value" 2 43 "int8" `60 
f B "set_tris_d" 2 43 "void(int8 value)" `59 
v L "value" 2 44 "int8" `62 
f B "set_tris_e" 2 44 "void(int8 value)" `61 
f B "get_tris_a" 2 45 "int8()" `63 
f B "get_tris_b" 2 46 "int8()" `64 
f B "get_tris_c" 2 47 "int8()" `65 
f B "get_tris_d" 2 48 "int8()" `66 
f B "get_tris_e" 2 49 "int8()" `67 
v L "value" 2 50 "int8" `69 
f B "output_a" 2 50 "void(int8 value)" `68 
v L "value" 2 51 "int8" `71 
f B "output_b" 2 51 "void(int8 value)" `70 
v L "value" 2 52 "int8" `73 
f B "output_c" 2 52 "void(int8 value)" `72 
v L "value" 2 53 "int8" `75 
f B "output_d" 2 53 "void(int8 value)" `74 
v L "value" 2 54 "int8" `77 
f B "output_e" 2 54 "void(int8 value)" `76 
f B "input_a" 2 55 "int8()" `78 
f B "input_b" 2 56 "int8()" `79 
f B "input_c" 2 57 "int8()" `80 
f B "input_d" 2 58 "int8()" `81 
f B "input_e" 2 59 "int8()" `82 
f B "input_change_a" 2 60 "int8()" `83 
f B "input_change_b" 2 61 "int8()" `84 
f B "input_change_c" 2 62 "int8()" `85 
f B "input_change_d" 2 63 "int8()" `86 
f B "input_change_e" 2 64 "int8()" `87 
v L "pin" 2 65 "int16" `89 
f B "input" 2 65 "int8(int16 pin)" `88 
v L "pin" 2 66 "int16" `91 
f B "input_state" 2 66 "int8(int16 pin)" `90 
v L "pin" 2 67 "int16" `93 
f B "output_low" 2 67 "void(int16 pin)" `92 
v L "pin" 2 68 "int16" `95 
f B "output_high" 2 68 "void(int16 pin)" `94 
v L "pin" 2 69 "int16" `97 
f B "output_toggle" 2 69 "void(int16 pin)" `96 
v L "pin" 2 70 "int16" `99 
v L "level" 2 70 "int8" `100 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `98 
v L "pin" 2 71 "int16" `102 
f B "output_float" 2 71 "void(int16 pin)" `101 
v L "pin" 2 72 "int16" `104 
f B "output_drive" 2 72 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "96"
d G "PIN_A1" 2 77 "97"
d G "PIN_A2" 2 78 "98"
d G "PIN_A3" 2 79 "99"
d G "PIN_A4" 2 80 "100"
d G "PIN_A5" 2 81 "101"
d G "PIN_A6" 2 82 "102"
d G "PIN_A7" 2 83 "103"
d G "PIN_B0" 2 85 "104"
d G "PIN_B1" 2 86 "105"
d G "PIN_B2" 2 87 "106"
d G "PIN_B3" 2 88 "107"
d G "PIN_B4" 2 89 "108"
d G "PIN_B5" 2 90 "109"
d G "PIN_B6" 2 91 "110"
d G "PIN_B7" 2 92 "111"
d G "PIN_C0" 2 94 "112"
d G "PIN_C1" 2 95 "113"
d G "PIN_C2" 2 96 "114"
d G "PIN_C3" 2 97 "115"
d G "PIN_C4" 2 98 "116"
d G "PIN_C5" 2 99 "117"
d G "PIN_C6" 2 100 "118"
d G "PIN_C7" 2 101 "119"
d G "PIN_D0" 2 103 "120"
d G "PIN_D1" 2 104 "121"
d G "PIN_D2" 2 105 "122"
d G "PIN_D3" 2 106 "123"
d G "PIN_D4" 2 107 "124"
d G "PIN_D5" 2 108 "125"
d G "PIN_D6" 2 109 "126"
d G "PIN_D7" 2 110 "127"
d G "PIN_E0" 2 112 "128"
d G "PIN_E1" 2 113 "129"
d G "PIN_E2" 2 114 "130"
d G "PIN_E3" 2 115 "131"
d G "FALSE" 2 118 "0"
d G "TRUE" 2 119 "1"
d G "BYTE" 2 121 "int8"
d G "BOOLEAN" 2 122 "int1"
d G "getc" 2 124 "getch"
d G "fgetc" 2 125 "getch"
d G "getchar" 2 126 "getch"
d G "putc" 2 127 "putchar"
d G "fputc" 2 128 "putchar"
d G "fgets" 2 129 "gets"
d G "fputs" 2 130 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 135 "int8()" `105 
f B "reset_cpu" 2 136 "void()" `106 
f B "sleep" 2 137 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 139 "0x3C"
d G "BROWNOUT_RESTART" 2 140 "0x3E"
d G "MCLR_FROM_SLEEP" 2 141 "0x27"
d G "WDT_TIMEOUT" 2 142 "0x1F"
d G "WDT_FROM_SLEEP" 2 143 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 144 "0x2F"
d G "MCLR_FROM_RUN" 2 145 "0x37"
d G "RESET_INSTRUCTION" 2 146 "0x3B"
d G "STACK_OVERFLOW" 2 147 "0xBF"
d G "STACK_UNDERFLOW" 2 148 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 155 "int8" `109 
f B "setup_timer_0" 2 155 "void(int8 mode)" `108 
v L "value" 2 156 "int8" `111 
f B "set_timer0" 2 156 "void(int8 value)" `110 
f B "get_timer0" 2 157 "int8()" `112 
v L "mode" 2 158 "int8" `114 
v L "prescaler" 2 158 "int8" `115 
f B "setup_counters" 2 158 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 159 "int8" `117 
f B "set_rtcc" 2 159 "void(int8 value)" `116 
f B "get_rtcc" 2 160 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 162 "0"
d G "T0_EXT_L_TO_H" 2 163 "32"
d G "T0_EXT_H_TO_L" 2 164 "48"
d G "T0_DIV_1" 2 166 "8"
d G "T0_DIV_2" 2 167 "0"
d G "T0_DIV_4" 2 168 "1"
d G "T0_DIV_8" 2 169 "2"
d G "T0_DIV_16" 2 170 "3"
d G "T0_DIV_32" 2 171 "4"
d G "T0_DIV_64" 2 172 "5"
d G "T0_DIV_128" 2 173 "6"
d G "T0_DIV_256" 2 174 "7"
d G "T0_8_BIT" 2 177 "0"
d G "RTCC_INTERNAL" 2 179 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 180 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 181 "48"
d G "RTCC_DIV_1" 2 182 "8"
d G "RTCC_DIV_2" 2 183 "0"
d G "RTCC_DIV_4" 2 184 "1"
d G "RTCC_DIV_8" 2 185 "2"
d G "RTCC_DIV_16" 2 186 "3"
d G "RTCC_DIV_32" 2 187 "4"
d G "RTCC_DIV_64" 2 188 "5"
d G "RTCC_DIV_128" 2 189 "6"
d G "RTCC_DIV_256" 2 190 "7"
d G "RTCC_8_BIT" 2 191 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
v L "mode" 2 201 "int16" `120 
f B "setup_wdt" 2 201 "void(int16 mode)" `119 
f B "restart_wdt" 2 202 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 204 "0x1000"
d G "WDT_OFF" 2 205 "0x2000"
d G "WDT_1MS" 2 207 "0x100"
d G "WDT_2MS" 2 208 "0x101"
d G "WDT_4MS" 2 209 "0x102"
d G "WDT_8MS" 2 210 "0x103"
d G "WDT_16MS" 2 211 "0x104"
d G "WDT_32MS" 2 212 "0x105"
d G "WDT_64MS" 2 213 "0x106"
d G "WDT_128MS" 2 214 "0x107"
d G "WDT_256MS" 2 215 "0x108"
d G "WDT_512MS" 2 216 "0x109"
d G "WDT_1S" 2 217 "0x10A"
d G "WDT_2S" 2 218 "0x10B"
d G "WDT_4S" 2 219 "0x10C"
d G "WDT_8S" 2 220 "0x10D"
d G "WDT_16S" 2 221 "0x10E"
d G "WDT_32S" 2 222 "0x10F"
d G "WDT_64S" 2 223 "0x110"
d G "WDT_128S" 2 224 "0x111"
d G "WDT_256S" 2 225 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 230 "int16" `123 
f B "setup_timer_1" 2 230 "void(int16 mode)" `122 
f B "get_timer1" 2 231 "int16()" `124 
v L "value" 2 232 "int16" `126 
f B "set_timer1" 2 232 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 235 "0"
d G "T1_INTERNAL" 2 236 "0x07"
d G "T1_EXTERNAL" 2 237 "0x87"
d G "T1_EXTERNAL_SYNC" 2 238 "0x83"
d G "T1_FOSC" 2 239 "0x47"
d G "T1_ENABLE_SOSC" 2 241 "0x08"
d G "T1_DIV_BY_1" 2 243 "0"
d G "T1_DIV_BY_2" 2 244 "0x10"
d G "T1_DIV_BY_4" 2 245 "0x20"
d G "T1_DIV_BY_8" 2 246 "0x30"
d G "T1_GATE" 2 248 "0x8000"
d G "T1_GATE_INVERTED" 2 249 "0xC000"
d G "T1_GATE_TOGGLE" 2 250 "0xA000"
d G "T1_GATE_SINGLE" 2 251 "0x9000"
d G "T1_GATE_TIMER2" 2 252 "0x8100"
d G "T1_GATE_COMP1" 2 253 "0x8200"
d G "T1_GATE_COMP2" 2 254 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 259 "int8" `128 
v L "period" 2 259 "int8" `129 
v L "postscale" 2 259 "int8" `130 
f B "setup_timer_2" 2 259 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 260 "int8()" `131 
v L "value" 2 261 "int8" `133 
f B "set_timer2" 2 261 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 263 "0"
d G "T2_DIV_BY_1" 2 264 "4"
d G "T2_DIV_BY_4" 2 265 "5"
d G "T2_DIV_BY_16" 2 266 "6"
d G "T2_DIV_BY_64" 2 267 "7"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 273 "int32" `135 
f B "setup_ccp1" 2 273 "void(int32 mode)" `134 
v L "mode" 2 274 "int32" `137 
v L "pwm" 2 274 "int8" `138 
f G "setup_ccp1" 2 274 "void(int32 mode,int8 pwm)" `136 
v L "value" 2 275 "int16" `140 
f B "set_pwm1_duty" 2 275 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 277 "0"
d G "CCP_CAPTURE_FE" 2 278 "4"
d G "CCP_CAPTURE_RE" 2 279 "5"
d G "CCP_CAPTURE_DIV_4" 2 280 "6"
d G "CCP_CAPTURE_DIV_16" 2 281 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 282 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 283 "9"
d G "CCP_COMPARE_INT" 2 284 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 285 "0xB"
d G "CCP_PWM" 2 286 "0xC"
d G "CCP_PWM_PLUS_1" 2 287 "0x1c"
d G "CCP_PWM_PLUS_2" 2 288 "0x2c"
d G "CCP_PWM_PLUS_3" 2 289 "0x3c"
d G "CCP1_C2" 2 293 "0x000"
d G "CCP1_B0" 2 294 "0x100"
d G "CCP2_C1" 2 295 "0x000"
d G "CCP2_B3" 2 296 "0x100"
d G "CCP3_E0" 2 297 "0x000"
d G "CCP3_B5" 2 298 "0x100"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 302 "int32" `145 
f B "setup_ccp2" 2 302 "void(int32 mode)" `144 
v L "mode" 2 303 "int32" `147 
v L "pwm" 2 303 "int8" `148 
f G "setup_ccp2" 2 303 "void(int32 mode,int8 pwm)" `146 
v L "value" 2 304 "int16" `150 
f B "set_pwm2_duty" 2 304 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
v L "mode" 2 310 "int32" `155 
f B "setup_ccp3" 2 310 "void(int32 mode)" `154 
v L "mode" 2 311 "int32" `157 
v L "pwm" 2 311 "int8" `158 
f G "setup_ccp3" 2 311 "void(int32 mode,int8 pwm)" `156 
v L "value" 2 312 "int16" `160 
f B "set_pwm3_duty" 2 312 "void(int16 value)" `159 
c L "set_pwm3_duty" 2 3 3 "FUNCTION"
v L "mode" 2 319 "int32" `165 
f B "setup_spi" 2 319 "void(int32 mode)" `164 
v L "value" 2 320 "int8" `167 
f B "spi_write" 2 320 "void(int8 value)" `166 
f B "spi_read" 2 321 "int8()" `168 
v L "value" 2 322 "int8" `170 
f G "spi_read" 2 322 "int8(int8 value)" `169 
f B "spi_data_in" 2 323 "int8()" `171  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 325 "0x00"
d G "SPI_MASTER" 2 326 "0x20"
d G "SPI_SLAVE" 2 327 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 328 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 329 "0x00"
d G "SPI_CLK_DIV_4" 2 330 "0x00"
d G "SPI_CLK_DIV_16" 2 331 "0x01"
d G "SPI_CLK_DIV_64" 2 332 "0x02"
d G "SPI_CLK_T2" 2 333 "0x03"
d G "SPI_SS_DISABLED" 2 334 "0x01"
d G "SPI_DI_C4" 2 336 "0x000000"
d G "SPI_DI_B6" 2 337 "0x010000"
d G "SPI_SCK_C3" 2 338 "0x000000"
d G "SPI_SCK_B7" 2 339 "0x020000"
d G "SPI_DO_C5" 2 340 "0x000000"
d G "SPI_DO_B5" 2 341 "0x040000"
d G "SPI_XMIT_L_TO_H" 2 343 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 344 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 346 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 347 "0x8000"
d G "SPI_L_TO_H" 2 350 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 351 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 355 "int32" `173 
f B "setup_uart" 2 355 "void(int32 baud)" `172 
v L "baud" 2 356 "int32" `175 
v L "stream" 2 356 "int8" `176 
f G "setup_uart" 2 356 "void(int32 baud,int8 stream)" `174 
v L "baud" 2 357 "int32" `178 
v L "stream" 2 357 "int8" `179 
v L "clock" 2 357 "int32" `180 
f G "setup_uart" 2 357 "void(int32 baud,int8 stream,int32 clock)" `177 
v L "baud" 2 358 "int32" `182 
f B "set_uart_speed" 2 358 "void(int32 baud)" `181 
v L "baud" 2 359 "int32" `184 
v L "stream" 2 359 "int8" `185 
f G "set_uart_speed" 2 359 "void(int32 baud,int8 stream)" `183 
v L "baud" 2 360 "int32" `187 
v L "stream" 2 360 "int8" `188 
v L "clock" 2 360 "int32" `189 
f G "set_uart_speed" 2 360 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 364 "2"
d G "UART_DATA" 2 365 "4"
d G "UART_AUTODETECT" 2 366 "8"
d G "UART_AUTODETECT_NOWAIT" 2 367 "9"
d G "UART_WAKEUP_ON_RDA" 2 368 "10"
d G "UART_SEND_BREAK" 2 369 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 373 "int16" `191 
f B "setup_comparator_1" 2 373 "void(int16 mode)" `190 
v L "mode" 2 374 "int16" `193 
f B "setup_comparator_2" 2 374 "void(int16 mode)" `192 
v L "mode" 2 375 "int16" `195 
f B "setup_comparator_3" 2 375 "void(int16 mode)" `194 
v L "mode" 2 376 "int16" `197 
f B "setup_comparator_4" 2 376 "void(int16 mode)" `196  "Constants used in setup_comparator_x() are:"
d G "NC_NC" 2 379 "0x003F"
d G "CP1_A0_A2" 2 383 "0x8000"
d G "CP1_A1_A2" 2 384 "0x8001"
d G "CP1_B3_A2" 2 385 "0x8002"
d G "CP1_B1_A2" 2 386 "0x8003"
d G "CP1_VSS_A2" 2 387 "0x8007"
d G "CP1_A0_A3" 2 388 "0x8008"
d G "CP1_A1_A3" 2 389 "0x8009"
d G "CP1_B3_A3" 2 390 "0x800A"
d G "CP1_B1_A3" 2 391 "0x800B"
d G "CP1_VSS_A3" 2 392 "0x800F"
d G "CP1_A0_DAC" 2 393 "0x8028"
d G "CP1_A1_DAC" 2 394 "0x8029"
d G "CP1_B3_DAC" 2 395 "0x802A"
d G "CP1_B1_DAC" 2 396 "0x802B"
d G "CP1_VSS_DAC" 2 397 "0x802F"
d G "CP1_A0_FVR" 2 398 "0x8030"
d G "CP1_A1_FVR" 2 399 "0x8031"
d G "CP1_B3_FVR" 2 400 "0x8032"
d G "CP1_B1_FVR" 2 401 "0x8033"
d G "CP1_VSS_FVR" 2 402 "0x8037"
d G "CP1_A0_VSS" 2 403 "0x8038"
d G "CP1_A1_VSS" 2 404 "0x8039"
d G "CP1_B3_VSS" 2 405 "0x803A"
d G "CP1_B1_VSS" 2 406 "0x803B"
d G "CP1_VSS_VSS" 2 407 "0x803F"
d G "CP1_INT_L2H" 2 409 "0x0080"
d G "CP1_INT_H2L" 2 410 "0x0040"
d G "CP1_OUT_ON_A4" 2 411 "0x2000"
d G "CP1_INVERT" 2 412 "0x1000"
d G "CP1_FAST" 2 413 "0x0400"
d G "CP1_HYST" 2 414 "0x0200"
d G "CP1_SYNC" 2 415 "0x0100"
d G "CP2_A0_A2" 2 419 "0x8000"
d G "CP2_A1_A2" 2 420 "0x8001"
d G "CP2_B3_A2" 2 421 "0x8002"
d G "CP2_B1_A2" 2 422 "0x8003"
d G "CP2_VSS_A2" 2 423 "0x8007"
d G "CP2_A0_B0" 2 424 "0x8008"
d G "CP2_A1_B0" 2 425 "0x8009"
d G "CP2_B3_B0" 2 426 "0x800A"
d G "CP2_B1_B0" 2 427 "0x800B"
d G "CP2_VSS_B0" 2 428 "0x800F"
d G "CP2_A0_DAC" 2 429 "0x8028"
d G "CP2_A1_DAC" 2 430 "0x8029"
d G "CP2_B3_DAC" 2 431 "0x802A"
d G "CP2_B1_DAC" 2 432 "0x802B"
d G "CP2_VSS_DAC" 2 433 "0x802F"
d G "CP2_A0_FVR" 2 434 "0x8030"
d G "CP2_A1_FVR" 2 435 "0x8031"
d G "CP2_B3_FVR" 2 436 "0x8032"
d G "CP2_B1_FVR" 2 437 "0x8033"
d G "CP2_VSS_FVR" 2 438 "0x8037"
d G "CP2_A0_VSS" 2 439 "0x8038"
d G "CP2_A1_VSS" 2 440 "0x8039"
d G "CP2_B3_VSS" 2 441 "0x803A"
d G "CP2_B1_VSS" 2 442 "0x803B"
d G "CP2_VSS_VSS" 2 443 "0x803F"
d G "CP2_INT_L2H" 2 445 "0x00080"
d G "CP2_INT_H2L" 2 446 "0x00040"
d G "CP2_OUT_ON_A5" 2 447 "0x02000"
d G "CP2_OUT_ON_A6" 2 448 "0x12000"
d G "CP2_INVERT" 2 449 "0x01000"
d G "CP2_FAST" 2 450 "0x00400"
d G "CP2_HYST" 2 451 "0x00200"
d G "CP2_SYNC" 2 452 "0x00100"
d G "CP3_A0_A2" 2 456 "0x8000"
d G "CP3_A1_A2" 2 457 "0x8001"
d G "CP3_B3_A2" 2 458 "0x8002"
d G "CP3_B1_A2" 2 459 "0x8003"
d G "CP3_VSS_A2" 2 460 "0x8007"
d G "CP3_A0_B4" 2 461 "0x8008"
d G "CP3_A1_B4" 2 462 "0x8009"
d G "CP3_B3_B4" 2 463 "0x800A"
d G "CP3_B1_B4" 2 464 "0x800B"
d G "CP3_VSS_B4" 2 465 "0x800F"
d G "CP3_A0_DAC" 2 466 "0x8028"
d G "CP3_A1_DAC" 2 467 "0x8029"
d G "CP3_B3_DAC" 2 468 "0x802A"
d G "CP3_B1_DAC" 2 469 "0x802B"
d G "CP3_VSS_DAC" 2 470 "0x802F"
d G "CP3_A0_FVR" 2 471 "0x8030"
d G "CP3_A1_FVR" 2 472 "0x8031"
d G "CP3_B3_FVR" 2 473 "0x8032"
d G "CP3_B1_FVR" 2 474 "0x8033"
d G "CP3_VSS_FVR" 2 475 "0x8037"
d G "CP3_A0_VSS" 2 476 "0x8038"
d G "CP3_A1_VSS" 2 477 "0x8039"
d G "CP3_B3_VSS" 2 478 "0x803A"
d G "CP3_B1_VSS" 2 479 "0x803B"
d G "CP3_VSS_VSS" 2 480 "0x803F"
d G "CP3_INT_L2H" 2 482 "0x0080"
d G "CP3_INT_H2L" 2 483 "0x0040"
d G "CP3_OUT_ON_D6" 2 484 "0x2000"
d G "CP3_INVERT" 2 485 "0x1000"
d G "CP3_FAST" 2 486 "0x0400"
d G "CP3_HYST" 2 487 "0x0200"
d G "CP3_SYNC" 2 488 "0x0100"
d G "CP4_A0_A2" 2 492 "0x8000"
d G "CP4_A1_A2" 2 493 "0x8001"
d G "CP4_B5_A2" 2 494 "0x8002"
d G "CP4_B1_A2" 2 495 "0x8003"
d G "CP4_VSS_A2" 2 496 "0x8007"
d G "CP4_A0_B6" 2 497 "0x8008"
d G "CP4_A1_B6" 2 498 "0x8009"
d G "CP4_B5_B6" 2 499 "0x800A"
d G "CP4_B1_B6" 2 500 "0x800B"
d G "CP4_VSS_B6" 2 501 "0x800F"
d G "CP4_A0_DAC" 2 502 "0x8028"
d G "CP4_A1_DAC" 2 503 "0x8029"
d G "CP4_B5_DAC" 2 504 "0x802A"
d G "CP4_B1_DAC" 2 505 "0x802B"
d G "CP4_VSS_DAC" 2 506 "0x802F"
d G "CP4_A0_FVR" 2 507 "0x8030"
d G "CP4_A1_FVR" 2 508 "0x8031"
d G "CP4_B5_FVR" 2 509 "0x8032"
d G "CP4_B1_FVR" 2 510 "0x8033"
d G "CP4_VSS_FVR" 2 511 "0x8037"
d G "CP4_A0_VSS" 2 512 "0x8038"
d G "CP4_A1_VSS" 2 513 "0x8039"
d G "CP4_B5_VSS" 2 514 "0x803A"
d G "CP4_B1_VSS" 2 515 "0x803B"
d G "CP4_VSS_VSS" 2 516 "0x803F"
d G "CP4_INT_L2H" 2 518 "0x0080"
d G "CP4_INT_H2L" 2 519 "0x0040"
d G "CP4_OUT_ON_D7" 2 520 "0x2000"
d G "CP4_INVERT" 2 521 "0x1000"
d G "CP4_FAST" 2 522 "0x0400"
d G "CP4_HYST" 2 523 "0x0200"
d G "CP4_SYNC" 2 524 "0x0100"
c L "setup_comparator_4" 2 3 2 "FUNCTION"
v L "mode" 2 533 "int8" `203 
f B "setup_vref" 2 533 "void(int8 mode)" `202  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 535 "0"
d G "VREF_ON" 2 536 "0x80"
d G "VREF_ADC_OFF" 2 538 "0"
d G "VREF_ADC_1v024" 2 539 "0x01"
d G "VREF_ADC_2v048" 2 540 "0x02"
d G "VREF_ADC_4v096" 2 541 "0x03"
d G "VREF_COMP_DAC_OFF" 2 543 "0"
d G "VREF_COMP_DAC_1v024" 2 544 "0x04"
d G "VREF_COMP_DAC_2v048" 2 545 "0x08"
d G "VREF_COMP_DAC_4v096" 2 546 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 548 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 549 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 550 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 551 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 556 "int8" `205 
f B "setup_dac" 2 556 "void(int8 mode)" `204 
v L "value" 2 557 "int8" `207 
f B "dac_write" 2 557 "void(int8 value)" `206  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 559 "0"
d G "DAC_VSS_VDD" 2 560 "0x80"
d G "DAC_VREF_VDD" 2 561 "0x81"
d G "DAC_VSS_VREF" 2 562 "0x84"
d G "DAC_VREF_VREF" 2 563 "0x85"
d G "DAC_VSS_FVR" 2 564 "0x88"
d G "DAC_VREF_FVR" 2 565 "0x89"
d G "DAC_OUTPUT1" 2 567 "0x20" "DAC voltage level outputted on DACOUT1 pin"
d G "DAC_OUTPUT2" 2 568 "0x10" "DAC voltage level outputted on DACOUT2 pin"
c L "dac_write" 2 3 3 "FUNCTION"
v L "mode" 2 573 "int8" `209 
f B "setup_opamp1" 2 573 "void(int8 mode)" `208 
v L "mode" 2 574 "int8" `211 
f B "setup_opamp2" 2 574 "void(int8 mode)" `210 
v L "mode" 2 575 "int8" `213 
f B "setup_opamp3" 2 575 "void(int8 mode)" `212  "Constants used in SETUP_OPAMPx() are:"
d G "OPAMP_ENABLED" 2 577 "0x80"
d G "OPAMP_DISABLED" 2 578 "0x00"
d G "OPAMP_HIGH_GBWP_MODE" 2 579 "0x40"
d G "OPAMP_LOW_GBWP_MODE" 2 580 "0x00"
d G "OPAMP_I_TO_OUTPUT" 2 581 "0x10" "Inverting input connects to OPAxOUT"
d G "OPAMP_NI_TO_DAC" 2 582 "0x02" "Non-inverting input connects to DAC output"
d G "OPAMP_NI_TO_FVR" 2 583 "0x03" "Non-inverting input connects to FVR Buffer 2 output"
c L "setup_opamp3" 2 3 2 "FUNCTION"
v L "mode" 2 588 "int8" `215 
f B "setup_oscillator" 2 588 "void(int8 mode)" `214  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 591 "0"
d G "OSC_31250" 2 592 " (2*8)"
d G "OSC_62KHZ" 2 593 " (4*8)"
d G "OSC_125KHZ" 2 594 " (5*8)"
d G "OSC_250KHZ" 2 595 " (6*8)"
d G "OSC_500KHZ" 2 596 " (7*8)"
d G "OSC_1MHZ" 2 597 " (11*8)"
d G "OSC_2MHZ" 2 598 " (12*8)"
d G "OSC_4MHZ" 2 599 " (13*8)"
d G "OSC_8MHZ" 2 600 " (14*8)"
d G "OSC_16MHZ" 2 601 " (15*8)"
d G "OSC_TIMER1" 2 603 "1"
d G "OSC_INTRC" 2 604 "2"
d G "OSC_NORMAL" 2 605 "0"
d G "OSC_PLL_ON" 2 607 "0x80"
d G "OSC_PLL_OFF" 2 608 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 615 "int16" `217 
f B "setup_adc" 2 615 "void(int16 mode)" `216 
f B "read_adc" 2 616 "int8()" `218 
v L "mode" 2 617 "int8" `220 
f G "read_adc" 2 617 "int8(int8 mode)" `219 
f G "read_adc" 2 618 "int16()" `221 
v L "mode" 2 619 "int8" `223 
f G "read_adc" 2 619 "int16(int8 mode)" `222 
f B "adc_done" 2 620 "int8()" `224  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 622 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 623 "0x100"
d G "ADC_CLOCK_DIV_4" 2 624 "0x40"
d G "ADC_CLOCK_DIV_8" 2 625 "0x10"
d G "ADC_CLOCK_DIV_32" 2 626 "0x20"
d G "ADC_CLOCK_DIV_16" 2 627 "0x50"
d G "ADC_CLOCK_DIV_64" 2 628 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 629 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 632 "int32" `226 
f B "setup_adc_ports" 2 632 "void(int32 pins)" `225 
v L "pins" 2 633 "int32" `228 
v L "referenece" 2 633 "int32" `229 
f G "setup_adc_ports" 2 633 "void(int32 pins,int32 referenece)" `227 
v L "channel" 2 634 "int8" `231 
f B "set_adc_channel" 2 634 "void(int8 channel)" `230  "Constants used is SETUP_ADC_PORTS() are:"
d G "sAN0" 2 638 "0x01000000" "| A0"
d G "sAN1" 2 639 "0x02000000" "| A1"
d G "sAN2" 2 640 "0x04000000" "| A2"
d G "sAN3" 2 641 "0x08000000" "| A3"
d G "sAN4" 2 642 "0x20000000" "| A5"
d G "sAN5" 2 643 "0x00010000" "| E0"
d G "sAN6" 2 644 "0x00020000" "| E1"
d G "sAN7" 2 645 "0x00040000" "| E2"
d G "sAN8" 2 646 "0x00000400" "| B2"
d G "sAN9" 2 647 "0x00000800" "| B3"
d G "sAN10" 2 648 "0x00000200" "| B1"
d G "sAN11" 2 649 "0x00001000" "| B4"
d G "sAN12" 2 650 "0x00000100" "| B0"
d G "sAN13" 2 651 "0x00002000" "| B5"
d G "sAN21" 2 652 "0x00000002" "| D1"
d G "NO_ANALOG" 2 653 "0" "None"
d G "ALL_ANALOG" 2 654 "0x2F073F02" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0 B5 D1"
d G "VSS_VDD" 2 657 "0x00000000" "| Range 0 to Vdd"
d G "VSS_VREF" 2 658 "0x00000001" "| Range 0 to Vref+"
d G "VSS_FVR" 2 659 "0x00000003" "| Range 0 to FVR"
d G "VREF_VDD" 2 660 "0x00000004" "| Range Vref- to Vdd"
d G "VREF_VREF" 2 661 "0x00000005" "| Range Vref- to Vref+"
d G "VREF_FVR" 2 662 "0x00000007" "| Range Vref- to FVR"
d G "TEMPERATURE_INDICATOR" 2 666 "0x1D"
d G "DAC_CHANNEL" 2 667 "0x1E"
d G "FVR_CHANNEL" 2 668 "0x1F"
d G "ADC_NEG_REFERENCE" 2 671 "0xFF" "Analog Negative Channel connected to ADC Negative Reference"
d G "ADC_START_AND_READ" 2 674 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 675 "1"
d G "ADC_READ_ONLY" 2 676 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 682 "sint8" `233 
f B "abs" 2 682 "sint8(sint8 x)" `232 
v L "x" 2 683 "sint16" `235 
f G "abs" 2 683 "sint16(sint16 x)" `234 
v L "x" 2 684 "sint32" `237 
f G "abs" 2 684 "sint32(sint32 x)" `236 
v L "x" 2 685 "float" `239 
f G "abs" 2 685 "float(float x)" `238 
v L "??65535" 2 686 "int8" `241 
v L "??65535" 2 686 "int8" `242 
f B "_mul" 2 686 "int16(int8 ,int8 )" `240 
v L "??65535" 2 687 "sint8" `241 
v L "??65535" 2 687 "sint8" `245 
f G "_mul" 2 687 "sint16(sint8 ,sint8 )" `243 
v L "??65535" 2 688 "int16" `241 
v L "??65535" 2 688 "int16" `248 
f G "_mul" 2 688 "int32(int16 ,int16 )" `246 
v L "??65535" 2 689 "sint16" `241 
v L "??65535" 2 689 "sint16" `251 
f G "_mul" 2 689 "sint32(sint16 ,sint16 )" `249  "Memory Manipulation Prototypes:"
v L "bank" 2 692 "int8" `253 
v L "offset" 2 692 "int8" `254 
f B "read_bank" 2 692 "int8(int8 bank,int8 offset)" `252 
v L "bank" 2 693 "int8" `256 
v L "offset" 2 693 "int8" `257 
v L "value" 2 693 "int8" `258 
f B "write_bank" 2 693 "void(int8 bank,int8 offset,int8 value)" `255 
v L "dest" 2 694 "*int8" `260 
v L "src" 2 694 "*int8" `261 
f B "strcpy" 2 694 "void(*int8 dest,*int8 src)" `259 
v L "dest" 2 695 "*int8" `263 
v L "src" 2 695 "*int8" `264 
f B "strcopy" 2 695 "void(*int8 dest,*int8 src)" `262 
v L "destination" 2 696 "*int8" `266 
v L "value" 2 696 "int8" `267 
v L "num" 2 696 "int16" `268 
f B "memset" 2 696 "void(*int8 destination,int8 value,int16 num)" `265 
v L "destination" 2 697 "*int8" `270 
v L "source" 2 697 "*int8" `271 
v L "num" 2 697 "int16" `272 
f B "memcpy" 2 697 "void(*int8 destination,*int8 source,int16 num)" `269  "String Prototypes:"
v L "cvalue" 2 700 "int8" `274 
f B "toupper" 2 700 "int8(int8 cvalue)" `273 
v L "cvalue" 2 701 "int8" `276 
f B "tolower" 2 701 "int8(int8 cvalue)" `275 
v L "string" 2 702 "*int8" `278 
v L "cstring" 2 702 "*int8" `279 
f B "sprintf" 2 702 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `277  "Data Manipulators Prototypes:"
v L "address" 2 705 "*int8" `282 
v L "bytes" 2 705 "int8" `283 
v L "value" 2 705 "int8" `284 
f B "shift_left" 2 705 "int8(*int8 address,int8 bytes,int8 value)" `281 
v L "address" 2 706 "*int8" `286 
v L "bytes" 2 706 "int8" `287 
v L "value" 2 706 "int8" `288 
f B "shift_right" 2 706 "int8(*int8 address,int8 bytes,int8 value)" `285 
v L "address" 2 707 "*int8" `290 
v L "bytes" 2 707 "int8" `291 
f B "rotate_left" 2 707 "void(*int8 address,int8 bytes)" `289 
v L "address" 2 708 "*int8" `293 
v L "bytes" 2 708 "int8" `294 
f B "rotate_right" 2 708 "void(*int8 address,int8 bytes)" `292 
v L "value" 2 709 "int8" `296 
f B "swap" 2 709 "void(int8 value)" `295 
v L "var" 2 710 "int16" `298 
v L "offset" 2 710 "int8" `299 
f B "make8" 2 710 "int8(int16 var,int8 offset)" `297 
v L "var" 2 711 "int32" `298 
v L "offset" 2 711 "int8" `302 
f G "make8" 2 711 "int8(int32 var,int8 offset)" `300 
v L "varhigh" 2 712 "int8" `304 
v L "varlow" 2 712 "int8" `305 
f B "make16" 2 712 "int16(int8 varhigh,int8 varlow)" `303 
v L "var1" 2 713 "int16" `307 
f B "make32" 2 713 "int32(int16 var1)" `306 
v L "var1" 2 714 "int16" `309 
v L "var2" 2 714 "int16" `310 
f G "make32" 2 714 "int32(int16 var1,int16 var2)" `308 
v L "var1" 2 715 "int16" `309 
v L "var2" 2 715 "int8" `313 
f G "make32" 2 715 "int32(int16 var1,int8 var2)" `311 
v L "var1" 2 716 "int16" `315 
v L "var2" 2 716 "int8" `316 
v L "var3" 2 716 "int8" `317 
f G "make32" 2 716 "int32(int16 var1,int8 var2,int8 var3)" `314 
v L "var1" 2 717 "int8" `319 
f G "make32" 2 717 "int32(int8 var1)" `318 
v L "var1" 2 718 "int8" `309 
v L "var2" 2 718 "int8" `322 
f G "make32" 2 718 "int32(int8 var1,int8 var2)" `320 
v L "var1" 2 719 "int8" `315 
v L "var2" 2 719 "int8" `316 
v L "var3" 2 719 "int8" `326 
f G "make32" 2 719 "int32(int8 var1,int8 var2,int8 var3)" `323 
v L "var1" 2 720 "int8" `328 
v L "var2" 2 720 "int8" `329 
v L "var3" 2 720 "int8" `330 
v L "var4" 2 720 "int8" `331 
f G "make32" 2 720 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `327 
v L "var1" 2 721 "int8" `309 
v L "var2" 2 721 "int16" `334 
f G "make32" 2 721 "int32(int8 var1,int16 var2)" `332 
v L "var1" 2 722 "int8" `315 
v L "var2" 2 722 "int16" `316 
v L "var3" 2 722 "int8" `338 
f G "make32" 2 722 "int32(int8 var1,int16 var2,int8 var3)" `335 
v L "var1" 2 723 "int8" `315 
v L "var2" 2 723 "int8" `316 
v L "var3" 2 723 "int16" `342 
f G "make32" 2 723 "int32(int8 var1,int8 var2,int16 var3)" `339 
v L "var" 2 724 "int8" `344 
v L "bit" 2 724 "int8" `345 
f B "bit_set" 2 724 "void(int8 var,int8 bit)" `343 
v L "var" 2 725 "int16" `344 
v L "bit" 2 725 "int8" `348 
f G "bit_set" 2 725 "void(int16 var,int8 bit)" `346 
v L "var" 2 726 "int32" `344 
v L "bit" 2 726 "int8" `351 
f G "bit_set" 2 726 "void(int32 var,int8 bit)" `349 
v L "var" 2 727 "int8" `353 
v L "bit" 2 727 "int8" `354 
f B "bit_clear" 2 727 "void(int8 var,int8 bit)" `352 
v L "var" 2 728 "int16" `353 
v L "bit" 2 728 "int8" `357 
f G "bit_clear" 2 728 "void(int16 var,int8 bit)" `355 
v L "var" 2 729 "int32" `353 
v L "bit" 2 729 "int8" `360 
f G "bit_clear" 2 729 "void(int32 var,int8 bit)" `358 
v L "var" 2 730 "int8" `362 
v L "bit" 2 730 "int8" `363 
f B "bit_test" 2 730 "int8(int8 var,int8 bit)" `361 
v L "var" 2 731 "int16" `362 
v L "bit" 2 731 "int8" `366 
f G "bit_test" 2 731 "int8(int16 var,int8 bit)" `364 
v L "var" 2 732 "int32" `362 
v L "bit" 2 732 "int8" `369 
f G "bit_test" 2 732 "int8(int32 var,int8 bit)" `367  "#use delay() Prototypes:"
v L "count" 2 735 "int8" `371 
f B "delay_cycles" 2 735 "void(int8 count)" `370 
v L "time" 2 736 "int16" `373 
f B "delay_ms" 2 736 "void(int16 time)" `372 
v L "time" 2 737 "int16" `375 
f B "delay_us" 2 737 "void(int16 time)" `374  "#use rs232() Prototypes:"
v L "cdata" 2 740 "int8" `377 
f B "putchar" 2 740 "void(int8 cdata)" `376 
v L "cdata" 2 741 "int8" `379 
v L "stream" 2 741 "int8" `380 
f G "putchar" 2 741 "void(int8 cdata,int8 stream)" `378 
v L "string" 2 742 "*int8" `382 
f B "puts" 2 742 "void(*int8 string)" `381 
v L "string" 2 743 "*int8" `384 
v L "stream" 2 743 "int8" `385 
f G "puts" 2 743 "void(*int8 string,int8 stream)" `383 
f B "getch" 2 744 "int8()" `386 
v L "stream" 2 745 "int8" `388 
f G "getch" 2 745 "int8(int8 stream)" `387 
v L "string" 2 746 "*int8" `390 
f B "gets" 2 746 "void(*int8 string)" `389 
v L "string" 2 747 "*int8" `392 
v L "stream" 2 747 "int8" `393 
f G "gets" 2 747 "void(*int8 string,int8 stream)" `391 
f B "kbhit" 2 748 "int8()" `394 
v L "stream" 2 749 "int8" `396 
f G "kbhit" 2 749 "int8(int8 stream)" `395 
v L "string" 2 750 "*int8" `398 
f B "printf" 2 750 "void(*int8 string,*int8 _VA_LIST)" `397 
v L "stream" 2 751 "int8" `401 
v L "string" 2 751 "*int8" `402 
f B "fprintf" 2 751 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `400 
f B "putc_send" 2 752 "void()" `404 
v L "stream" 2 753 "int8" `406 
f B "fputc_send" 2 753 "void(int8 stream)" `405 
f B "rcv_buffer_full" 2 754 "int8()" `407 
v L "stream" 2 755 "int8" `409 
f G "rcv_buffer_full" 2 755 "int8(int8 stream)" `408 
f B "rcv_buffer_bytes" 2 756 "int16()" `410 
v L "stream" 2 757 "int8" `412 
f G "rcv_buffer_bytes" 2 757 "int16(int8 stream)" `411 
f B "tx_buffer_full" 2 758 "int8()" `413 
v L "stream" 2 759 "int8" `415 
f G "tx_buffer_full" 2 759 "int8(int8 stream)" `414 
f B "tx_buffer_bytes" 2 760 "int16()" `416 
v L "stream" 2 761 "int8" `418 
f G "tx_buffer_bytes" 2 761 "int16(int8 stream)" `417  "#use i2c() Prototypes:"
f B "i2c_read" 2 764 "int8()" `419 
v L "stream" 2 765 "int8" `421 
f G "i2c_read" 2 765 "int8(int8 stream)" `420 
v L "stream" 2 766 "int8" `423 
v L "ack" 2 766 "int8" `424 
f G "i2c_read" 2 766 "int8(int8 stream,int8 ack)" `422 
v L "data" 2 767 "int8" `426 
f B "i2c_write" 2 767 "int8(int8 data)" `425 
v L "stream" 2 768 "int8" `428 
v L "data" 2 768 "int8" `429 
f G "i2c_write" 2 768 "int8(int8 stream,int8 data)" `427 
f B "i2c_start" 2 769 "void()" `430 
v L "stream" 2 770 "int8" `432 
f G "i2c_start" 2 770 "void(int8 stream)" `431 
v L "stream" 2 771 "int8" `434 
v L "restart" 2 771 "int8" `435 
f G "i2c_start" 2 771 "void(int8 stream,int8 restart)" `433 
f B "i2c_stop" 2 772 "void()" `436 
v L "stream" 2 773 "int8" `438 
f G "i2c_stop" 2 773 "void(int8 stream)" `437 
f B "i2c_isr_state" 2 774 "int8()" `439 
v L "addr" 2 775 "int8" `441 
f B "i2c_slaveaddr" 2 775 "void(int8 addr)" `440 
v L "stream" 2 776 "int8" `443 
v L "addr" 2 776 "int8" `444 
f G "i2c_slaveaddr" 2 776 "void(int8 stream,int8 addr)" `442 
f B "i2c_poll" 2 777 "int8()" `445 
v L "stream" 2 778 "int8" `447 
f G "i2c_poll" 2 778 "int8(int8 stream)" `446 
v L "baud" 2 779 "int32" `449 
f B "i2c_init" 2 779 "void(int32 baud)" `448 
v L "stream" 2 780 "int8" `451 
v L "baud" 2 780 "int32" `452 
f G "i2c_init" 2 780 "void(int8 stream,int32 baud)" `450  "#use spi() Prototypes:"
f B "spi_xfer" 2 783 "int8()" `453 
f G "spi_xfer" 2 784 "int16()" `454 
f G "spi_xfer" 2 785 "int32()" `455 
v L "data" 2 786 "int8" `457 
f G "spi_xfer" 2 786 "int8(int8 data)" `456 
v L "data" 2 787 "int16" `459 
f G "spi_xfer" 2 787 "int16(int16 data)" `458 
v L "data" 2 788 "int32" `461 
f G "spi_xfer" 2 788 "int32(int32 data)" `460 
v L "stream" 2 789 "int8" `463 
v L "data" 2 789 "int8" `464 
f G "spi_xfer" 2 789 "int8(int8 stream,int8 data)" `462 
v L "stream" 2 790 "int8" `463 
v L "data" 2 790 "int16" `467 
f G "spi_xfer" 2 790 "int16(int8 stream,int16 data)" `465 
v L "stream" 2 791 "int8" `463 
v L "data" 2 791 "int32" `470 
f G "spi_xfer" 2 791 "int32(int8 stream,int32 data)" `468 
v L "stream" 2 792 "int8" `472 
v L "data" 2 792 "int8" `473 
v L "bits" 2 792 "int8" `474 
f G "spi_xfer" 2 792 "int8(int8 stream,int8 data,int8 bits)" `471 
v L "stream" 2 793 "int8" `472 
v L "data" 2 793 "int16" `473 
v L "bits" 2 793 "int8" `478 
f G "spi_xfer" 2 793 "int16(int8 stream,int16 data,int8 bits)" `475 
v L "stream" 2 794 "int8" `472 
v L "data" 2 794 "int32" `473 
v L "bits" 2 794 "int8" `482 
f G "spi_xfer" 2 794 "int32(int8 stream,int32 data,int8 bits)" `479 
v L "baud" 2 795 "int32" `484 
f B "spi_init" 2 795 "void(int32 baud)" `483 
v L "stream" 2 796 "int8" `486 
v L "baud" 2 796 "int32" `487 
f G "spi_init" 2 796 "void(int8 stream,int32 baud)" `485 
v L "baud" 2 797 "int32" `489 
f B "spi_speed" 2 797 "void(int32 baud)" `488 
v L "stream" 2 798 "int8" `491 
v L "baud" 2 798 "int32" `492 
f G "spi_speed" 2 798 "void(int8 stream,int32 baud)" `490 
v L "stream" 2 799 "int8" `494 
v L "baud" 2 799 "int32" `495 
v L "clock" 2 799 "int32" `496 
f G "spi_speed" 2 799 "void(int8 stream,int32 baud,int32 clock)" `493 
v L "data" 2 800 "int8" `498 
f B "spi_prewrite" 2 800 "void(int8 data)" `497 
v L "data" 2 801 "int16" `500 
f G "spi_prewrite" 2 801 "void(int16 data)" `499 
v L "data" 2 802 "int32" `502 
f G "spi_prewrite" 2 802 "void(int32 data)" `501 
v L "??65535" 2 803 "int8" `504 
v L "data" 2 803 "int8" `505 
f G "spi_prewrite" 2 803 "void(int8 ,int8 data)" `503 
v L "??65535" 2 804 "int8" `504 
v L "data" 2 804 "int16" `508 
f G "spi_prewrite" 2 804 "void(int8 ,int16 data)" `506 
v L "??65535" 2 805 "int8" `504 
v L "data" 2 805 "int32" `511 
f G "spi_prewrite" 2 805 "void(int8 ,int32 data)" `509 
f B "spi_xfer_in" 2 806 "int8()" `512 
f G "spi_xfer_in" 2 807 "int16()" `513 
f G "spi_xfer_in" 2 808 "int32()" `514 
v L "bits" 2 809 "int8" `516 
f G "spi_xfer_in" 2 809 "int8(int8 bits)" `515 
v L "bits" 2 810 "int8" `518 
f G "spi_xfer_in" 2 810 "int16(int8 bits)" `517 
v L "bits" 2 811 "int8" `520 
f G "spi_xfer_in" 2 811 "int32(int8 bits)" `519 
v L "stream" 2 812 "int8" `522 
v L "bits" 2 812 "int8" `523 
f G "spi_xfer_in" 2 812 "int8(int8 stream,int8 bits)" `521 
v L "stream" 2 813 "int8" `522 
v L "bits" 2 813 "int8" `526 
f G "spi_xfer_in" 2 813 "int16(int8 stream,int8 bits)" `524 
v L "stream" 2 814 "int8" `522 
v L "bits" 2 814 "int8" `529 
f G "spi_xfer_in" 2 814 "int32(int8 stream,int8 bits)" `527  "#use rtos() Prototypes:"
f B "rtos_run" 2 817 "void()" `530 
f B "rtos_yield" 2 818 "void()" `531 
v L "task" 2 819 "int8" `533 
f B "rtos_enable" 2 819 "void(int8 task)" `532 
v L "task" 2 820 "int8" `535 
f B "rtos_disable" 2 820 "void(int8 task)" `534 
f B "rtos_terminate" 2 821 "void()" `536 
v L "flag" 2 822 "int8" `538 
f B "rtos_await" 2 822 "void(int8 flag)" `537 
v L "sem" 2 823 "int8" `540 
f B "rtos_wait" 2 823 "void(int8 sem)" `539 
v L "sem" 2 824 "int8" `542 
f B "rtos_signal" 2 824 "void(int8 sem)" `541 
v L "task" 2 825 "int8" `544 
v L "msg" 2 825 "int8" `545 
f B "rtos_msg_send" 2 825 "void(int8 task,int8 msg)" `543 
f B "rtos_msg_read" 2 826 "int8()" `546 
f B "rtos_msg_poll" 2 827 "int8()" `547 
v L "task" 2 828 "int8" `549 
f B "rtos_overrun" 2 828 "int8(int8 task)" `548 
v L "task" 2 829 "int8" `551 
v L "stat" 2 829 "*int8" `552 
f B "rtos_stats" 2 829 "void(int8 task,*int8 stat)" `550  "#use timer() Prototypes:"
f B "get_ticks" 2 832 "int8()" `553 
f G "get_ticks" 2 833 "int16()" `554 
f G "get_ticks" 2 834 "int32()" `555 
v L "stream" 2 835 "int8" `557 
f G "get_ticks" 2 835 "int8(int8 stream)" `556 
v L "stream" 2 836 "int8" `559 
f G "get_ticks" 2 836 "int16(int8 stream)" `558 
v L "stream" 2 837 "int8" `561 
f G "get_ticks" 2 837 "int32(int8 stream)" `560 
v L "value" 2 838 "int8" `563 
f B "set_ticks" 2 838 "void(int8 value)" `562 
v L "value" 2 839 "int16" `565 
f G "set_ticks" 2 839 "void(int16 value)" `564 
v L "value" 2 840 "int32" `567 
f G "set_ticks" 2 840 "void(int32 value)" `566 
v L "stream" 2 841 "int8" `569 
v L "value" 2 841 "int8" `570 
f G "set_ticks" 2 841 "void(int8 stream,int8 value)" `568 
v L "stream" 2 842 "int8" `569 
v L "value" 2 842 "int16" `573 
f G "set_ticks" 2 842 "void(int8 stream,int16 value)" `571 
v L "stream" 2 843 "int8" `569 
v L "value" 2 843 "int32" `576 
f G "set_ticks" 2 843 "void(int8 stream,int32 value)" `574  "#use pwm() Prototypes:"
f B "pwm_on" 2 846 "void()" `577 
v L "stream" 2 847 "int8" `579 
f G "pwm_on" 2 847 "void(int8 stream)" `578 
f B "pwm_off" 2 848 "void()" `580 
v L "stream" 2 849 "int8" `582 
f G "pwm_off" 2 849 "void(int8 stream)" `581 
v L "duty" 2 850 "int16" `584 
f B "pwm_set_duty" 2 850 "void(int16 duty)" `583 
v L "stream" 2 851 "int8" `586 
v L "duty" 2 851 "int16" `587 
f G "pwm_set_duty" 2 851 "void(int8 stream,int16 duty)" `585 
v L "percent" 2 852 "int16" `589 
f B "pwm_set_duty_percent" 2 852 "void(int16 percent)" `588 
v L "stream" 2 853 "int8" `591 
v L "percent" 2 853 "int16" `592 
f G "pwm_set_duty_percent" 2 853 "void(int8 stream,int16 percent)" `590 
v L "frequency" 2 854 "int32" `594 
f B "pwm_set_frequency" 2 854 "void(int32 frequency)" `593 
v L "stream" 2 855 "int8" `596 
v L "frequency" 2 855 "int32" `597 
f G "pwm_set_frequency" 2 855 "void(int8 stream,int32 frequency)" `595  "#use capture() Prototypes:"
f B "get_capture_time" 2 858 "int16()" `598 
v L "stream" 2 859 "int8" `600 
f G "get_capture_time" 2 859 "int16(int8 stream)" `599 
f B "get_capture_event" 2 860 "int8()" `601 
v L "stream" 2 861 "int8" `603 
f G "get_capture_event" 2 861 "int8(int8 stream)" `602  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 874 "int16" `605 
f B "goto_address" 2 874 "void(int16 address)" `604 
v L "label" 2 875 "int16" `607 
f B "label_address" 2 875 "int16(int16 label)" `606  "Program Memory Prototypes:"
v L "address" 2 878 "int16" `609 
v L "dataptr" 2 878 "*int8" `610 
v L "count" 2 878 "int16" `611 
f B "read_program_memory" 2 878 "void(int16 address,*int8 dataptr,int16 count)" `608 
v L "address" 2 879 "int16" `613 
f B "read_program_eeprom" 2 879 "int16(int16 address)" `612 
v L "address" 2 880 "int16" `615 
f B "erase_program_eeprom" 2 880 "void(int16 address)" `614 
v L "address" 2 881 "int16" `617 
v L "dataptr" 2 881 "*int8" `618 
v L "count" 2 881 "int16" `619 
f B "write_program_memory" 2 881 "void(int16 address,*int8 dataptr,int16 count)" `616 
v L "address" 2 882 "int16" `621 
v L "data" 2 882 "int16" `622 
f B "write_program_eeprom" 2 882 "void(int16 address,int16 data)" `620  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 887 "int16" `623 
v L "address" 2 892 "__EEADDRESS__" `625 
f B "read_eeprom" 2 892 "int8(__EEADDRESS__ address)" `624 
v L "address" 2 893 "__EEADDRESS__" `627 
v L "value" 2 893 "int8" `628 
f B "write_eeprom" 2 893 "void(__EEADDRESS__ address,int8 value)" `626  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 900 "int32" `630 
f B "enable_interrupts" 2 900 "void(int32 interrupt)" `629 
v L "interrupt" 2 901 "int32" `632 
f B "disable_interrupts" 2 901 "void(int32 interrupt)" `631 
v L "interrupt" 2 902 "int32" `634 
f B "clear_interrupt" 2 902 "void(int32 interrupt)" `633 
v L "interrupt" 2 903 "int32" `636 
f B "interrupt_active" 2 903 "int8(int32 interrupt)" `635 
v L "interrupt" 2 904 "int32" `638 
f B "interrupt_enabled" 2 904 "int8(int32 interrupt)" `637 
v L "source" 2 905 "int8" `640 
v L "edge" 2 905 "int8" `641 
f B "ext_int_edge" 2 905 "void(int8 source,int8 edge)" `639 
v L "address" 2 906 "int16" `643 
f B "jump_to_irs" 2 906 "void(int16 address)" `642  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 908 "0x40"
d G "H_TO_L" 2 909 "0"
d G "GLOBAL" 2 911 "0x0BC0"
d G "PERIPH" 2 912 "0x0B40"
d G "INT_IOC_A0" 2 913 "0x30010B08"
d G "INT_IOC_A0_L2H" 2 914 "0x10010B08"
d G "INT_IOC_A0_H2L" 2 915 "0x20010B08"
d G "INT_IOC_A1" 2 916 "0x30020B08"
d G "INT_IOC_A1_L2H" 2 917 "0x10020B08"
d G "INT_IOC_A1_H2L" 2 918 "0x20020B08"
d G "INT_IOC_A2" 2 919 "0x30040B08"
d G "INT_IOC_A2_L2H" 2 920 "0x10040B08"
d G "INT_IOC_A2_H2L" 2 921 "0x20040B08"
d G "INT_IOC_A3" 2 922 "0x30080B08"
d G "INT_IOC_A3_L2H" 2 923 "0x10080B08"
d G "INT_IOC_A3_H2L" 2 924 "0x20080B08"
d G "INT_IOC_A4" 2 925 "0x30100B08"
d G "INT_IOC_A4_L2H" 2 926 "0x10100B08"
d G "INT_IOC_A4_H2L" 2 927 "0x20100B08"
d G "INT_IOC_A5" 2 928 "0x30200B08"
d G "INT_IOC_A5_L2H" 2 929 "0x10200B08"
d G "INT_IOC_A5_H2L" 2 930 "0x20200B08"
d G "INT_IOC_A6" 2 931 "0x30400B08"
d G "INT_IOC_A6_L2H" 2 932 "0x10400B08"
d G "INT_IOC_A6_H2L" 2 933 "0x20400B08"
d G "INT_IOC_A7" 2 934 "0x30800B08"
d G "INT_IOC_A7_L2H" 2 935 "0x10800B08"
d G "INT_IOC_A7_H2L" 2 936 "0x20800B08"
d G "INT_IOC_B0" 2 937 "0x31010B08"
d G "INT_IOC_B0_L2H" 2 938 "0x11010B08"
d G "INT_IOC_B0_H2L" 2 939 "0x21010B08"
d G "INT_IOC_B1" 2 940 "0x31020B08"
d G "INT_IOC_B1_L2H" 2 941 "0x11020B08"
d G "INT_IOC_B1_H2L" 2 942 "0x21020B08"
d G "INT_IOC_B2" 2 943 "0x31040B08"
d G "INT_IOC_B2_L2H" 2 944 "0x11040B08"
d G "INT_IOC_B2_H2L" 2 945 "0x21040B08"
d G "INT_IOC_B3" 2 946 "0x31080B08"
d G "INT_IOC_B3_L2H" 2 947 "0x11080B08"
d G "INT_IOC_B3_H2L" 2 948 "0x21080B08"
d G "INT_IOC_B4" 2 949 "0x31100B08"
d G "INT_IOC_B4_L2H" 2 950 "0x11100B08"
d G "INT_IOC_B4_H2L" 2 951 "0x21100B08"
d G "INT_IOC_B5" 2 952 "0x31200B08"
d G "INT_IOC_B5_L2H" 2 953 "0x11200B08"
d G "INT_IOC_B5_H2L" 2 954 "0x21200B08"
d G "INT_IOC_B6" 2 955 "0x31400B08"
d G "INT_IOC_B6_L2H" 2 956 "0x11400B08"
d G "INT_IOC_B6_H2L" 2 957 "0x21400B08"
d G "INT_IOC_B7" 2 958 "0x31800B08"
d G "INT_IOC_B7_L2H" 2 959 "0x11800B08"
d G "INT_IOC_B7_H2L" 2 960 "0x21800B08"
d G "INT_IOC_C0" 2 961 "0x32010B08"
d G "INT_IOC_C0_L2H" 2 962 "0x12010B08"
d G "INT_IOC_C0_H2L" 2 963 "0x22010B08"
d G "INT_IOC_C1" 2 964 "0x32020B08"
d G "INT_IOC_C1_L2H" 2 965 "0x12020B08"
d G "INT_IOC_C1_H2L" 2 966 "0x22020B08"
d G "INT_IOC_C2" 2 967 "0x32040B08"
d G "INT_IOC_C2_L2H" 2 968 "0x12040B08"
d G "INT_IOC_C2_H2L" 2 969 "0x22040B08"
d G "INT_IOC_C3" 2 970 "0x32080B08"
d G "INT_IOC_C3_L2H" 2 971 "0x12080B08"
d G "INT_IOC_C3_H2L" 2 972 "0x22080B08"
d G "INT_IOC_C4" 2 973 "0x32100B08"
d G "INT_IOC_C4_L2H" 2 974 "0x12100B08"
d G "INT_IOC_C4_H2L" 2 975 "0x22100B08"
d G "INT_IOC_C5" 2 976 "0x32200B08"
d G "INT_IOC_C5_L2H" 2 977 "0x12200B08"
d G "INT_IOC_C5_H2L" 2 978 "0x22200B08"
d G "INT_IOC_C6" 2 979 "0x32400B08"
d G "INT_IOC_C6_L2H" 2 980 "0x12400B08"
d G "INT_IOC_C6_H2L" 2 981 "0x22400B08"
d G "INT_IOC_C7" 2 982 "0x32800B08"
d G "INT_IOC_C7_L2H" 2 983 "0x12800B08"
d G "INT_IOC_C7_H2L" 2 984 "0x22800B08"
d G "INT_IOC_E3" 2 985 "0x34080B08"
d G "INT_IOC_E3_L2H" 2 986 "0x14080B08"
d G "INT_IOC_E3_H2L" 2 987 "0x24080B08"
d G "INT_EXT_L2H" 2 988 "0x50000B10"
d G "INT_EXT_H2L" 2 989 "0x60000B10"
d G "INT_EXT" 2 990 "0x300B10"
d G "INT_TIMER0" 2 991 "0x300B20"
d G "INT_TIMER1" 2 992 "0x309101"
d G "INT_TIMER2" 2 993 "0x309102"
d G "INT_CCP1" 2 994 "0x309104"
d G "INT_SSP" 2 995 "0x309108"
d G "INT_TBE" 2 996 "0x309110"
d G "INT_RDA" 2 997 "0x309120"
d G "INT_AD" 2 998 "0x309140"
d G "INT_TIMER1_GATE" 2 999 "0x309180"
d G "INT_BUSCOL" 2 1000 "0x309208"
d G "INT_EEPROM" 2 1001 "0x309210"
d G "INT_COMP" 2 1002 "0x309220"
d G "INT_COMP2" 2 1003 "0x309240"
d G "INT_OSC_FAIL" 2 1004 "0x309280"
d G "INT_CCP2" 2 1005 "0x309201"
d G "INT_IOC" 2 1006 "0x3FFF0B08"
d G "INT_COMP3" 2 1007 "0x309202"
d G "INT_PSMC1S" 2 1008 "0x309401"
d G "INT_PSMC2S" 2 1009 "0x309402"
d G "INT_PSMC1T" 2 1010 "0x309410"
d G "INT_PSMC2T" 2 1011 "0x309420"
d G "INT_COMP4" 2 1012 "0x309204"
d G "INT_PSMC3S" 2 1013 "0x309404"
d G "INT_PSMC3T" 2 1014 "0x309440"
V G "so" 0 3 "[10]" `648 
C L "jump_to_irs" 0 4 1 "FUNCTION"
F G "main" 0 7 "void()" `651  "setup_oscillator(OSC_5000000,OSC_PLL_ON);"
V L "i" 0 16 "int32" `654 
V L "j" 0 19 "int32" `655 
C L "main" 0 4 6 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_d" 1 0
F B "set_input_level_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_opamp1" 1 0
F B "setup_opamp2" 1 0
F B "setup_opamp3" 1 0
F B "setup_comparator_1" 1 0
F B "setup_comparator_2" 1 0
F B "setup_comparator_3" 1 0
F B "setup_comparator_4" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
