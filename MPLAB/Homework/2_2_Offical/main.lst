CCS PCM C Compiler, Version 5.015, 5967               03-Thg3-22 16:44

               Filename:   C:\D\BT VXL\2_2_Offical\main.lst

               ROM used:   141 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (1%) at main() level
                           25 (2%) worst case
               Stack used: 1 locations
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   01D
0002:  NOP
.................... #include <main.h> 
.................... #include <16F1787.h> 
.................... //////////// Standard Header file for the PIC16F1787 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1787 
0003:  BRW
0004:  RETLW  40
0005:  RETLW  79
0006:  RETLW  24
0007:  RETLW  30
0008:  RETLW  19
0009:  RETLW  12
000A:  RETLW  02
000B:  RETLW  78
000C:  RETLW  00
000D:  RETLW  10
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #fuses INTRC_IO 
.................... #use delay(internal=1000000) 
000E:  MOVLW  20
000F:  MOVWF  05
0010:  MOVLW  09
0011:  MOVWF  04
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   01B
0015:  MOVLW  52
0016:  MOVWF  77
0017:  DECFSZ 77,F
0018:  GOTO   017
0019:  DECFSZ 00,F
001A:  GOTO   015
001B:  MOVLP  00
001C:  GOTO   079 (RETURN)
....................  
....................  
.................... #use standard_io(a) 
.................... const UNSIGNED char so[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10}; 
.................... //const UNSIGNED char A6[10] =  
....................  
.................... void main() 
001D:  MOVLW  5A
001E:  MOVLB  01
001F:  MOVWF  19
0020:  MOVLB  03
0021:  CLRF   0C
0022:  CLRF   0D
0023:  CLRF   0F
0024:  CLRF   10
0025:  MOVLB  02
0026:  CLRF   12
0027:  CLRF   11
.................... { 
.................... //setup_oscillator(OSC_5000000,OSC_PLL_ON); 
....................    set_tris_a(0); 
0028:  MOVLW  00
0029:  TRIS   5
....................    set_tris_b(0); 
002A:  TRIS   6
....................    set_tris_c(0); 
002B:  TRIS   7
....................    set_tris_d(0); 
002C:  MOVLB  01
002D:  MOVWF  0F
....................    output_drive(PIN_A6); 
002E:  BCF    0C.6
....................    while(TRUE) 
....................    { 
....................      for(int32 i = 0; i < 10; i++) 
002F:  MOVLB  00
0030:  CLRF   24
0031:  CLRF   23
0032:  CLRF   22
0033:  CLRF   21
0034:  MOVF   24,F
0035:  BTFSS  03.2
0036:  GOTO   08B
0037:  MOVF   23,F
0038:  BTFSS  03.2
0039:  GOTO   08B
003A:  MOVF   22,F
003B:  BTFSS  03.2
003C:  GOTO   08B
003D:  MOVF   21,W
003E:  SUBLW  09
003F:  BTFSS  03.0
0040:  GOTO   08B
....................      { 
....................          output_a(so[i]); 
0041:  MOVF   21,W
0042:  MOVWF  77
0043:  MOVF   22,W
0044:  MOVWF  78
0045:  MOVF   23,W
0046:  MOVWF  79
0047:  MOVF   24,W
0048:  MOVWF  7A
0049:  MOVF   21,W
004A:  CALL   003
004B:  MOVWF  29
004C:  MOVLB  01
004D:  CLRF   0C
004E:  MOVLB  00
004F:  MOVF   29,W
0050:  MOVLB  02
0051:  MOVWF  0C
....................          for(int32 j = 0; j < 10; j++) 
0052:  MOVLB  00
0053:  CLRF   28
0054:  CLRF   27
0055:  CLRF   26
0056:  CLRF   25
0057:  MOVF   28,F
0058:  BTFSS  03.2
0059:  GOTO   082
005A:  MOVF   27,F
005B:  BTFSS  03.2
005C:  GOTO   082
005D:  MOVF   26,F
005E:  BTFSS  03.2
005F:  GOTO   082
0060:  MOVF   25,W
0061:  SUBLW  09
0062:  BTFSS  03.0
0063:  GOTO   082
....................          { 
....................             output_b(so[j]); 
0064:  MOVF   25,W
0065:  MOVWF  77
0066:  MOVF   26,W
0067:  MOVWF  78
0068:  MOVF   27,W
0069:  MOVWF  79
006A:  MOVF   28,W
006B:  MOVWF  7A
006C:  MOVF   25,W
006D:  CALL   003
006E:  MOVWF  29
006F:  MOVLB  01
0070:  CLRF   0D
0071:  MOVLB  00
0072:  MOVF   29,W
0073:  MOVLB  02
0074:  MOVWF  0D
....................             delay_ms(100); 
0075:  MOVLW  64
0076:  MOVLB  00
0077:  MOVWF  29
0078:  GOTO   00E
0079:  MOVLW  01
007A:  ADDWF  25,F
007B:  BTFSC  03.0
007C:  INCF   26,F
007D:  BTFSC  03.2
007E:  INCF   27,F
007F:  BTFSC  03.2
0080:  INCF   28,F
0081:  GOTO   057
....................             /*for(int32 k = 0; k < 6; k++) 
....................             { 
....................                output_c(so[k]); 
....................                for(int32 f = 0; f < 10; f++) 
....................                { 
....................                   output_d(so[f]); 
....................                   delay_ms(100); 
....................                } 
....................             }*/ 
....................          } 
0082:  MOVLW  01
0083:  ADDWF  21,F
0084:  BTFSC  03.0
0085:  INCF   22,F
0086:  BTFSC  03.2
0087:  INCF   23,F
0088:  BTFSC  03.2
0089:  INCF   24,F
008A:  GOTO   034
....................      } 
008B:  GOTO   030
....................    } 
....................  
.................... } 
008C:  SLEEP

Configuration Fuses:
   Word  1: 39C4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
