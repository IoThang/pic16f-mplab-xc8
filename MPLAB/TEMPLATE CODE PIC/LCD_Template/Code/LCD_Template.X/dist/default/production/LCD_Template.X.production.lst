

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Nov 03 09:42:48 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  0009                     _PORTEbits	set	9
   292  0008                     _PORTDbits	set	8
   293  0008                     _PORTD	set	8
   294  0088                     _TRISD	set	136
   295  0089                     _TRISE	set	137
   296  0189                     _ANSELH	set	393
   297  0188                     _ANSEL	set	392
   298                           
   299                           	psect	strings
   300  0003                     __pstrings:
   301  0003                     stringtab:
   302  0003                     __stringtab:
   303  0003                     stringcode:	
   304                           ;	String table - string pointers are 1 byte each
   305                           
   306  0003                     stringdir:
   307  0003  3000               	movlw	high stringdir
   308  0004  008A               	movwf	10
   309  0005  0804               	movf	4,w
   310  0006  0A84               	incf	4,f
   311  0007  0782               	addwf	2,f
   312  0008                     __stringbase:
   313  0008  3400               	retlw	0
   314  0009                     __end_of__stringtab:
   315  0009                     STR_1:
   316  0009  3454               	retlw	84	;'T'
   317  000A  3452               	retlw	82	;'R'
   318  000B  3455               	retlw	85	;'U'
   319  000C  344F               	retlw	79	;'O'
   320  000D  344E               	retlw	78	;'N'
   321  000E  3447               	retlw	71	;'G'
   322  000F  3420               	retlw	32	;' '
   323  0010  3444               	retlw	68	;'D'
   324  0011  3455               	retlw	85	;'U'
   325  0012  3443               	retlw	67	;'C'
   326  0013  3420               	retlw	32	;' '
   327  0014  3454               	retlw	84	;'T'
   328  0015  3448               	retlw	72	;'H'
   329  0016  3441               	retlw	65	;'A'
   330  0017  344E               	retlw	78	;'N'
   331  0018  3447               	retlw	71	;'G'
   332  0019  3400               	retlw	0
   333                           
   334                           	psect	cinit
   335  07F1                     start_initialization:	
   336                           ; #config settings
   337                           
   338  07F1                     __initialization:
   339                           
   340                           ; Clear objects allocated to COMMON
   341  07F1  01FC               	clrf	__pbssCOMMON& (0+127)
   342  07F2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   343                           
   344                           ; Clear objects allocated to BANK0
   345  07F3  1383               	bcf	3,7	;select IRP bank0
   346  07F4  3020               	movlw	low __pbssBANK0
   347  07F5  0084               	movwf	4
   348  07F6  3038               	movlw	low (__pbssBANK0+24)
   349  07F7  120A  118A  269A  120A  118A  	fcall	clear_ram0
   350  07FC                     end_of_initialization:	
   351                           ;End of C runtime variable initialization code
   352                           
   353  07FC                     __end_of__initialization:
   354  07FC  0183               	clrf	3
   355  07FD  120A  118A  2EAF   	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssCOMMON
   358  007C                     __pbssCOMMON:
   359  007C                     _cnt:
   360  007C                     	ds	2
   361                           
   362                           	psect	bssBANK0
   363  0020                     __pbssBANK0:
   364  0020                     _buffer:
   365  0020                     	ds	20
   366  0034                     _b3:
   367  0034                     	ds	2
   368  0036                     _b2:
   369  0036                     	ds	2
   370                           
   371                           	psect	clrtext
   372  069A                     clear_ram0:	
   373                           ;	Called with FSR containing the base address, and
   374                           ;	W with the last address+1
   375                           
   376  069A  0064               	clrwdt	;clear the watchdog before getting into this loop
   377  069B                     clrloop0:
   378  069B  0180               	clrf	0	;clear RAM location pointed to by FSR
   379  069C  0A84               	incf	4,f	;increment pointer
   380  069D  0604               	xorwf	4,w	;XOR with final address
   381  069E  1903               	btfsc	3,2	;have we reached the end yet?
   382  069F  3400               	retlw	0	;all done for this memory range, return
   383  06A0  0604               	xorwf	4,w	;XOR again to restore value
   384  06A1  2E9B               	goto	clrloop0	;do the next byte
   385                           
   386                           	psect	cstackCOMMON
   387  0070                     __pcstackCOMMON:
   388  0070                     ?_LCD_Initialize:
   389  0070                     ?_LCDPutStr:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_LCDPutCmd:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_config:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_main:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_LCDWriteNibble:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_LCDPutChar:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     LCDWriteNibble@rs:	
   408                           ; 1 bytes @ 0x0
   409                           
   410                           
   411                           ; 1 bytes @ 0x0
   412  0070                     	ds	1
   413  0071                     ??_LCDWriteNibble:
   414                           
   415                           ; 1 bytes @ 0x1
   416  0071                     	ds	1
   417  0072                     LCDWriteNibble@ch:
   418                           
   419                           ; 1 bytes @ 0x2
   420  0072                     	ds	1
   421  0073                     ??_LCDPutCmd:
   422  0073                     ??_LCDPutChar:	
   423                           ; 1 bytes @ 0x3
   424                           
   425                           
   426                           ; 1 bytes @ 0x3
   427  0073                     	ds	2
   428  0075                     LCDPutChar@ch:
   429  0075                     LCDPutCmd@ch:	
   430                           ; 1 bytes @ 0x5
   431                           
   432                           
   433                           ; 1 bytes @ 0x5
   434  0075                     	ds	1
   435  0076                     ??_LCD_Initialize:
   436  0076                     ?_LCDGoto:	
   437                           ; 1 bytes @ 0x6
   438                           
   439  0076                     ??_LCDPutStr:	
   440                           ; 1 bytes @ 0x6
   441                           
   442  0076                     LCDGoto@ln:	
   443                           ; 1 bytes @ 0x6
   444                           
   445                           
   446                           ; 1 bytes @ 0x6
   447  0076                     	ds	1
   448  0077                     ??_LCDGoto:
   449  0077                     LCDPutStr@str:	
   450                           ; 1 bytes @ 0x7
   451                           
   452                           
   453                           ; 1 bytes @ 0x7
   454  0077                     	ds	1
   455  0078                     ??_config:
   456  0078                     LCDPutStr@i:	
   457                           ; 1 bytes @ 0x8
   458                           
   459                           
   460                           ; 1 bytes @ 0x8
   461  0078                     	ds	1
   462  0079                     _LCDGoto$129:
   463                           
   464                           ; 2 bytes @ 0x9
   465  0079                     	ds	2
   466  007B                     LCDGoto@pos:
   467                           
   468                           ; 1 bytes @ 0xB
   469  007B                     	ds	1
   470  007C                     ??_main:
   471                           
   472                           	psect	maintext
   473  06AF                     __pmaintext:	
   474                           ; 1 bytes @ 0xC
   475 ;;
   476 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   477 ;;
   478 ;; *************** function _main *****************
   479 ;; Defined at:
   480 ;;		line 51 in file "newmain.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;		None
   483 ;; Auto vars:     Size  Location     Type
   484 ;;		None
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : B00/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   494 ;;      Params:         0       0       0       0       0
   495 ;;      Locals:         0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0
   497 ;;      Totals:         0       0       0       0       0
   498 ;;Total ram usage:        0 bytes
   499 ;; Hardware stack levels required when called: 4
   500 ;; This function calls:
   501 ;;		_LCDGoto
   502 ;;		_LCDPutStr
   503 ;;		_config
   504 ;; This function is called by:
   505 ;;		Startup code after reset
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509  06AF                     _main:	
   510                           ;psect for function _main
   511                           
   512  06AF                     l863:	
   513                           ;incstack = 0
   514                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   515                           
   516                           
   517                           ;newmain.c: 52:     config();
   518  06AF  120A  118A  26A2  120A  118A  	fcall	_config
   519  06B4                     l28:	
   520                           ;newmain.c: 53:     while(1)
   521                           
   522                           
   523                           ;newmain.c: 54:     {;newmain.c: 55:         LCDGoto(0,0);
   524  06B4  01F6               	clrf	LCDGoto@ln
   525  06B5  3000               	movlw	0
   526  06B6  120A  118A  270F  120A  118A  	fcall	_LCDGoto
   527  06BB                     l865:
   528                           
   529                           ;newmain.c: 57:         LCDPutStr("TRUONG DUC THANG");
   530  06BB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   531  06BC  120A  118A  26C5  120A  118A  	fcall	_LCDPutStr
   532  06C1  2EB4               	goto	l28
   533  06C2  120A  118A  2800   	ljmp	start
   534  06C5                     __end_of_main:
   535                           
   536                           	psect	text1
   537  06A2                     __ptext1:	
   538 ;; *************** function _config *****************
   539 ;; Defined at:
   540 ;;		line 37 in file "newmain.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;		None
   543 ;; Auto vars:     Size  Location     Type
   544 ;;		None
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, status,2, status,0, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   554 ;;      Params:         0       0       0       0       0
   555 ;;      Locals:         0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0
   557 ;;      Totals:         0       0       0       0       0
   558 ;;Total ram usage:        0 bytes
   559 ;; Hardware stack levels used: 1
   560 ;; Hardware stack levels required when called: 3
   561 ;; This function calls:
   562 ;;		_LCD_Initialize
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568  06A2                     _config:	
   569                           ;psect for function _config
   570                           
   571  06A2                     l837:	
   572                           ;incstack = 0
   573                           ; Regs used in _config: [wreg+status,2+status,0+pclath+cstack]
   574                           
   575                           
   576                           ;newmain.c: 39:     ANSEL = ANSELH = 0;
   577  06A2  1683               	bsf	3,5	;RP0=1, select bank3
   578  06A3  1703               	bsf	3,6	;RP1=1, select bank3
   579  06A4  0189               	clrf	9	;volatile
   580  06A5  0188               	clrf	8	;volatile
   581                           
   582                           ;newmain.c: 40:     TRISE = 0;
   583  06A6  1683               	bsf	3,5	;RP0=1, select bank1
   584  06A7  1303               	bcf	3,6	;RP1=0, select bank1
   585  06A8  0189               	clrf	9	;volatile
   586  06A9                     l839:
   587                           
   588                           ;newmain.c: 48:     LCD_Initialize();
   589  06A9  120A  118A  276C  120A  118A  	fcall	_LCD_Initialize
   590  06AE                     l23:
   591  06AE  0008               	return
   592  06AF                     __end_of_config:
   593                           
   594                           	psect	text2
   595  076C                     __ptext2:	
   596 ;; *************** function _LCD_Initialize *****************
   597 ;; Defined at:
   598 ;;		line 46 in file "lcd.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;		None
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, pclath, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   612 ;;      Params:         0       0       0       0       0
   613 ;;      Locals:         0       0       0       0       0
   614 ;;      Temps:          2       0       0       0       0
   615 ;;      Totals:         2       0       0       0       0
   616 ;;Total ram usage:        2 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; Hardware stack levels required when called: 2
   619 ;; This function calls:
   620 ;;		_LCDPutCmd
   621 ;; This function is called by:
   622 ;;		_config
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626  076C                     _LCD_Initialize:	
   627                           ;psect for function _LCD_Initialize
   628                           
   629  076C                     l815:	
   630                           ;incstack = 0
   631                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
   632                           
   633                           
   634                           ;lcd.c: 49:     PORTD = 0x00;
   635  076C  1283               	bcf	3,5	;RP0=0, select bank0
   636  076D  1303               	bcf	3,6	;RP1=0, select bank0
   637  076E  0188               	clrf	8	;volatile
   638                           
   639                           ;lcd.c: 53:     TRISD = 0x00;
   640  076F  1683               	bsf	3,5	;RP0=1, select bank1
   641  0770  1303               	bcf	3,6	;RP1=0, select bank1
   642  0771  0188               	clrf	8	;volatile
   643                           
   644                           ;lcd.c: 54:     ANSEL = 0x00;
   645  0772  1683               	bsf	3,5	;RP0=1, select bank3
   646  0773  1703               	bsf	3,6	;RP1=1, select bank3
   647  0774  0188               	clrf	8	;volatile
   648                           
   649                           ;lcd.c: 55:     ANSELH = 0x00;
   650  0775  0189               	clrf	9	;volatile
   651  0776                     l817:
   652                           
   653                           ;lcd.c: 61:     _delay((unsigned long)((15)*(16000000/4000.0)));
   654  0776  304E               	movlw	78
   655  0777  00F7               	movwf	??_LCD_Initialize+1
   656  0778  30EB               	movlw	235
   657  0779  00F6               	movwf	??_LCD_Initialize
   658  077A                     u297:
   659  077A  0BF6               	decfsz	??_LCD_Initialize,f
   660  077B  2F7A               	goto	u297
   661  077C  0BF7               	decfsz	??_LCD_Initialize+1,f
   662  077D  2F7A               	goto	u297
   663  077E                     l819:
   664                           
   665                           ;lcd.c: 64:     LCDPutCmd(0x32);
   666  077E  3032               	movlw	50
   667  077F  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   668  0784                     l821:
   669                           
   670                           ;lcd.c: 67:     LCDPutCmd(0x28);
   671  0784  3028               	movlw	40
   672  0785  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   673  078A                     l823:
   674                           
   675                           ;lcd.c: 70:     LCDPutCmd(0x0C);
   676  078A  300C               	movlw	12
   677  078B  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   678  0790                     l825:
   679                           
   680                           ;lcd.c: 72:     LCDPutCmd(0x01);
   681  0790  3001               	movlw	1
   682  0791  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   683  0796                     l827:
   684                           
   685                           ;lcd.c: 75:     LCDPutCmd(0x06);
   686  0796  3006               	movlw	6
   687  0797  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   688  079C                     l50:
   689  079C  0008               	return
   690  079D                     __end_of_LCD_Initialize:
   691                           
   692                           	psect	text3
   693  06C5                     __ptext3:	
   694 ;; *************** function _LCDPutStr *****************
   695 ;; Defined at:
   696 ;;		line 165 in file "lcd.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  str             1    wreg     PTR const unsigned char 
   699 ;;		 -> STR_1(17), 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  str             1    7[COMMON] PTR const unsigned char 
   702 ;;		 -> STR_1(17), 
   703 ;;  i               1    8[COMMON] unsigned char 
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   713 ;;      Params:         0       0       0       0       0
   714 ;;      Locals:         2       0       0       0       0
   715 ;;      Temps:          1       0       0       0       0
   716 ;;      Totals:         3       0       0       0       0
   717 ;;Total ram usage:        3 bytes
   718 ;; Hardware stack levels used: 1
   719 ;; Hardware stack levels required when called: 2
   720 ;; This function calls:
   721 ;;		_LCDPutChar
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727  06C5                     _LCDPutStr:	
   728                           ;psect for function _LCDPutStr
   729                           
   730                           
   731                           ;incstack = 0
   732                           ; Regs used in _LCDPutStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   733                           ;LCDPutStr@str stored from wreg
   734  06C5  00F7               	movwf	LCDPutStr@str
   735  06C6                     l855:
   736                           
   737                           ;lcd.c: 165: void LCDPutStr(const char *str);lcd.c: 166: {;lcd.c: 167:     uint8_t i=0;
   738  06C6  01F8               	clrf	LCDPutStr@i
   739                           
   740                           ;lcd.c: 170:     while (str[i])
   741  06C7  2ED9               	goto	l861
   742  06C8                     l857:
   743                           
   744                           ;lcd.c: 171:     {;lcd.c: 173:         LCDPutChar(str[i++]);
   745  06C8  0878               	movf	LCDPutStr@i,w
   746  06C9  0777               	addwf	LCDPutStr@str,w
   747  06CA  0084               	movwf	4
   748  06CB  120A  118A  2003  120A  118A  	fcall	stringdir
   749  06D0  120A  118A  26E7  120A  118A  	fcall	_LCDPutChar
   750  06D5                     l859:
   751  06D5  3001               	movlw	1
   752  06D6  00F6               	movwf	??_LCDPutStr
   753  06D7  0876               	movf	??_LCDPutStr,w
   754  06D8  07F8               	addwf	LCDPutStr@i,f
   755  06D9                     l861:
   756                           
   757                           ;lcd.c: 170:     while (str[i])
   758  06D9  0878               	movf	LCDPutStr@i,w
   759  06DA  0777               	addwf	LCDPutStr@str,w
   760  06DB  0084               	movwf	4
   761  06DC  120A  118A  2003  120A  118A  	fcall	stringdir
   762  06E1  3A00               	xorlw	0
   763  06E2  1D03               	skipz
   764  06E3  2EE5               	goto	u281
   765  06E4  2EE6               	goto	u280
   766  06E5                     u281:
   767  06E5  2EC8               	goto	l857
   768  06E6                     u280:
   769  06E6                     l73:
   770  06E6  0008               	return
   771  06E7                     __end_of_LCDPutStr:
   772                           
   773                           	psect	text4
   774  06E7                     __ptext4:	
   775 ;; *************** function _LCDPutChar *****************
   776 ;; Defined at:
   777 ;;		line 133 in file "lcd.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  ch              1    wreg     unsigned char 
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  ch              1    5[COMMON] unsigned char 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg, status,2, status,0, pclath, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   791 ;;      Params:         0       0       0       0       0
   792 ;;      Locals:         1       0       0       0       0
   793 ;;      Temps:          2       0       0       0       0
   794 ;;      Totals:         3       0       0       0       0
   795 ;;Total ram usage:        3 bytes
   796 ;; Hardware stack levels used: 1
   797 ;; Hardware stack levels required when called: 1
   798 ;; This function calls:
   799 ;;		_LCDWriteNibble
   800 ;; This function is called by:
   801 ;;		_LCDPutStr
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805  06E7                     _LCDPutChar:	
   806                           ;psect for function _LCDPutChar
   807                           
   808                           
   809                           ;incstack = 0
   810                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
   811                           ;LCDPutChar@ch stored from wreg
   812  06E7  00F5               	movwf	LCDPutChar@ch
   813  06E8                     l829:
   814                           
   815                           ;lcd.c: 133: void LCDPutChar(uint8_t ch);lcd.c: 134: {;lcd.c: 135:     _delay((unsigned 
      +                          long)((5)*(16000000/4000.0)));
   816  06E8  301A               	movlw	26
   817  06E9  00F4               	movwf	??_LCDPutChar+1
   818  06EA  30F8               	movlw	248
   819  06EB  00F3               	movwf	??_LCDPutChar
   820  06EC                     u307:
   821  06EC  0BF3               	decfsz	??_LCDPutChar,f
   822  06ED  2EEC               	goto	u307
   823  06EE  0BF4               	decfsz	??_LCDPutChar+1,f
   824  06EF  2EEC               	goto	u307
   825  06F0  0000               	nop
   826  06F1                     l831:
   827                           
   828                           ;lcd.c: 138:     LCDWriteNibble(ch,1);
   829  06F1  01F0               	clrf	LCDWriteNibble@rs
   830  06F2  0AF0               	incf	LCDWriteNibble@rs,f
   831  06F3  0875               	movf	LCDPutChar@ch,w
   832  06F4  120A  118A  279D  120A  118A  	fcall	_LCDWriteNibble
   833  06F9                     l833:
   834                           
   835                           ;lcd.c: 141:     ch = (ch << 4);
   836  06F9  0875               	movf	LCDPutChar@ch,w
   837  06FA  00F3               	movwf	??_LCDPutChar
   838  06FB  3003               	movlw	3
   839  06FC                     u245:
   840  06FC  1003               	clrc
   841  06FD  0DF3               	rlf	??_LCDPutChar,f
   842  06FE  3EFF               	addlw	-1
   843  06FF  1D03               	skipz
   844  0700  2EFC               	goto	u245
   845  0701  1003               	clrc
   846  0702  0D73               	rlf	??_LCDPutChar,w
   847  0703  00F4               	movwf	??_LCDPutChar+1
   848  0704  0874               	movf	??_LCDPutChar+1,w
   849  0705  00F5               	movwf	LCDPutChar@ch
   850  0706                     l835:
   851                           
   852                           ;lcd.c: 144:     LCDWriteNibble(ch,1);
   853  0706  01F0               	clrf	LCDWriteNibble@rs
   854  0707  0AF0               	incf	LCDWriteNibble@rs,f
   855  0708  0875               	movf	LCDPutChar@ch,w
   856  0709  120A  118A  279D  120A  118A  	fcall	_LCDWriteNibble
   857  070E                     l64:
   858  070E  0008               	return
   859  070F                     __end_of_LCDPutChar:
   860                           
   861                           	psect	text5
   862  070F                     __ptext5:	
   863 ;; *************** function _LCDGoto *****************
   864 ;; Defined at:
   865 ;;		line 178 in file "lcd.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  pos             1    wreg     unsigned char 
   868 ;;  ln              1    6[COMMON] unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  pos             1   11[COMMON] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, pclath, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         1       0       0       0       0
   881 ;;      Locals:         3       0       0       0       0
   882 ;;      Temps:          2       0       0       0       0
   883 ;;      Totals:         6       0       0       0       0
   884 ;;Total ram usage:        6 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; Hardware stack levels required when called: 2
   887 ;; This function calls:
   888 ;;		_LCDPutCmd
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894  070F                     _LCDGoto:	
   895                           ;psect for function _LCDGoto
   896                           
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _LCDGoto: [wreg+status,2+status,0+pclath+cstack]
   900                           ;LCDGoto@pos stored from wreg
   901  070F  00FB               	movwf	LCDGoto@pos
   902  0710                     l841:
   903                           
   904                           ;lcd.c: 178: void LCDGoto(uint8_t pos,uint8_t ln);lcd.c: 179: {;lcd.c: 181:     if ((ln 
      +                          > (2 -1)) || (pos > (16 -1)))
   905  0710  3002               	movlw	2
   906  0711  0276               	subwf	LCDGoto@ln,w
   907  0712  1803               	skipnc
   908  0713  2F15               	goto	u251
   909  0714  2F16               	goto	u250
   910  0715                     u251:
   911  0715  2F3C               	goto	l79
   912  0716                     u250:
   913  0716                     l843:
   914  0716  3010               	movlw	16
   915  0717  027B               	subwf	LCDGoto@pos,w
   916  0718  1C03               	skipc
   917  0719  2F1B               	goto	u261
   918  071A  2F1C               	goto	u260
   919  071B                     u261:
   920  071B  2F1D               	goto	l845
   921  071C                     u260:
   922  071C  2F3C               	goto	l79
   923  071D                     l845:
   924                           
   925                           ;lcd.c: 188:     LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
   926  071D  0376               	decf	LCDGoto@ln,w
   927  071E  1903               	btfsc	3,2
   928  071F  2F21               	goto	u271
   929  0720  2F22               	goto	u270
   930  0721                     u271:
   931  0721  2F28               	goto	l849
   932  0722                     u270:
   933  0722                     l847:
   934  0722  3080               	movlw	128
   935  0723  047B               	iorwf	LCDGoto@pos,w
   936  0724  00F9               	movwf	_LCDGoto$129
   937  0725  3000               	movlw	0
   938  0726  00FA               	movwf	_LCDGoto$129+1
   939  0727  2F2D               	goto	l851
   940  0728                     l849:
   941  0728  30C0               	movlw	192
   942  0729  047B               	iorwf	LCDGoto@pos,w
   943  072A  00F9               	movwf	_LCDGoto$129
   944  072B  3000               	movlw	0
   945  072C  00FA               	movwf	_LCDGoto$129+1
   946  072D                     l851:
   947  072D  0879               	movf	_LCDGoto$129,w
   948  072E  120A  118A  273D  120A  118A  	fcall	_LCDPutCmd
   949  0733                     l853:
   950                           
   951                           ;lcd.c: 191:     _delay((unsigned long)((5)*(16000000/4000.0)));
   952  0733  301A               	movlw	26
   953  0734  00F8               	movwf	??_LCDGoto+1
   954  0735  30F8               	movlw	248
   955  0736  00F7               	movwf	??_LCDGoto
   956  0737                     u317:
   957  0737  0BF7               	decfsz	??_LCDGoto,f
   958  0738  2F37               	goto	u317
   959  0739  0BF8               	decfsz	??_LCDGoto+1,f
   960  073A  2F37               	goto	u317
   961  073B  0000               	nop
   962  073C                     l79:
   963  073C  0008               	return
   964  073D                     __end_of_LCDGoto:
   965                           
   966                           	psect	text6
   967  073D                     __ptext6:	
   968 ;; *************** function _LCDPutCmd *****************
   969 ;; Defined at:
   970 ;;		line 148 in file "lcd.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  ch              1    wreg     unsigned char 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;  ch              1    5[COMMON] unsigned char 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0, pclath, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   984 ;;      Params:         0       0       0       0       0
   985 ;;      Locals:         1       0       0       0       0
   986 ;;      Temps:          2       0       0       0       0
   987 ;;      Totals:         3       0       0       0       0
   988 ;;Total ram usage:        3 bytes
   989 ;; Hardware stack levels used: 1
   990 ;; Hardware stack levels required when called: 1
   991 ;; This function calls:
   992 ;;		_LCDWriteNibble
   993 ;; This function is called by:
   994 ;;		_LCD_Initialize
   995 ;;		_LCDGoto
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999  073D                     _LCDPutCmd:	
  1000                           ;psect for function _LCDPutCmd
  1001                           
  1002                           
  1003                           ;incstack = 0
  1004                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
  1005                           ;LCDPutCmd@ch stored from wreg
  1006  073D  00F5               	movwf	LCDPutCmd@ch
  1007  073E                     l805:
  1008                           
  1009                           ;lcd.c: 148: void LCDPutCmd(uint8_t ch);lcd.c: 149: {;lcd.c: 150:     _delay((unsigned l
      +                          ong)((5)*(16000000/4000.0)));
  1010  073E  301A               	movlw	26
  1011  073F  00F4               	movwf	??_LCDPutCmd+1
  1012  0740  30F8               	movlw	248
  1013  0741  00F3               	movwf	??_LCDPutCmd
  1014  0742                     u327:
  1015  0742  0BF3               	decfsz	??_LCDPutCmd,f
  1016  0743  2F42               	goto	u327
  1017  0744  0BF4               	decfsz	??_LCDPutCmd+1,f
  1018  0745  2F42               	goto	u327
  1019  0746  0000               	nop
  1020  0747                     l807:
  1021                           
  1022                           ;lcd.c: 153:     LCDWriteNibble(ch,0);
  1023  0747  01F0               	clrf	LCDWriteNibble@rs
  1024  0748  0875               	movf	LCDPutCmd@ch,w
  1025  0749  120A  118A  279D  120A  118A  	fcall	_LCDWriteNibble
  1026  074E                     l809:
  1027                           
  1028                           ;lcd.c: 156:     ch = (ch << 4);
  1029  074E  0875               	movf	LCDPutCmd@ch,w
  1030  074F  00F3               	movwf	??_LCDPutCmd
  1031  0750  3003               	movlw	3
  1032  0751                     u235:
  1033  0751  1003               	clrc
  1034  0752  0DF3               	rlf	??_LCDPutCmd,f
  1035  0753  3EFF               	addlw	-1
  1036  0754  1D03               	skipz
  1037  0755  2F51               	goto	u235
  1038  0756  1003               	clrc
  1039  0757  0D73               	rlf	??_LCDPutCmd,w
  1040  0758  00F4               	movwf	??_LCDPutCmd+1
  1041  0759  0874               	movf	??_LCDPutCmd+1,w
  1042  075A  00F5               	movwf	LCDPutCmd@ch
  1043  075B                     l811:
  1044                           
  1045                           ;lcd.c: 158:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1046  075B  3006               	movlw	6
  1047  075C  00F4               	movwf	??_LCDPutCmd+1
  1048  075D  3030               	movlw	48
  1049  075E  00F3               	movwf	??_LCDPutCmd
  1050  075F                     u337:
  1051  075F  0BF3               	decfsz	??_LCDPutCmd,f
  1052  0760  2F5F               	goto	u337
  1053  0761  0BF4               	decfsz	??_LCDPutCmd+1,f
  1054  0762  2F5F               	goto	u337
  1055  0763  0000               	nop
  1056  0764                     l813:
  1057                           
  1058                           ;lcd.c: 161:     LCDWriteNibble(ch,0);
  1059  0764  01F0               	clrf	LCDWriteNibble@rs
  1060  0765  0875               	movf	LCDPutCmd@ch,w
  1061  0766  120A  118A  279D  120A  118A  	fcall	_LCDWriteNibble
  1062  076B                     l67:
  1063  076B  0008               	return
  1064  076C                     __end_of_LCDPutCmd:
  1065                           
  1066                           	psect	text7
  1067  079D                     __ptext7:	
  1068 ;; *************** function _LCDWriteNibble *****************
  1069 ;; Defined at:
  1070 ;;		line 80 in file "lcd.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;  ch              1    wreg     unsigned char 
  1073 ;;  rs              1    0[COMMON] unsigned char 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  ch              1    2[COMMON] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1085 ;;      Params:         1       0       0       0       0
  1086 ;;      Locals:         1       0       0       0       0
  1087 ;;      Temps:          1       0       0       0       0
  1088 ;;      Totals:         3       0       0       0       0
  1089 ;;Total ram usage:        3 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_LCDPutChar
  1095 ;;		_LCDPutCmd
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099  079D                     _LCDWriteNibble:	
  1100                           ;psect for function _LCDWriteNibble
  1101                           
  1102                           
  1103                           ;incstack = 0
  1104                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0]
  1105                           ;LCDWriteNibble@ch stored from wreg
  1106  079D  00F2               	movwf	LCDWriteNibble@ch
  1107  079E                     l771:
  1108                           
  1109                           ;lcd.c: 80: void LCDWriteNibble(uint8_t ch,uint8_t rs);lcd.c: 81: {;lcd.c: 83:     ch = 
      +                          (ch & 0xF0);
  1110  079E  0872               	movf	LCDWriteNibble@ch,w
  1111  079F  39F0               	andlw	240
  1112  07A0  00F1               	movwf	??_LCDWriteNibble
  1113  07A1  0871               	movf	??_LCDWriteNibble,w
  1114  07A2  00F2               	movwf	LCDWriteNibble@ch
  1115                           
  1116                           ;lcd.c: 86:     PORTD = (PORTD & 0x0F);
  1117  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  1118  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  1119  07A5  0808               	movf	8,w	;volatile
  1120  07A6  390F               	andlw	15
  1121  07A7  0088               	movwf	8	;volatile
  1122  07A8                     l773:
  1123                           
  1124                           ;lcd.c: 87:     PORTDbits.RD4 = 0;
  1125  07A8  1208               	bcf	8,4	;volatile
  1126  07A9                     l775:
  1127                           
  1128                           ;lcd.c: 88:     PORTDbits.RD5 = 0;
  1129  07A9  1288               	bcf	8,5	;volatile
  1130  07AA                     l777:
  1131                           
  1132                           ;lcd.c: 89:     PORTDbits.RD6 = 0;
  1133  07AA  1308               	bcf	8,6	;volatile
  1134  07AB                     l779:
  1135                           
  1136                           ;lcd.c: 90:     PORTDbits.RD7 = 0;
  1137  07AB  1388               	bcf	8,7	;volatile
  1138  07AC                     l781:
  1139                           
  1140                           ;lcd.c: 94:     if(((ch & 0x80)>>7)==1){
  1141  07AC  0872               	movf	LCDWriteNibble@ch,w
  1142  07AD  00F1               	movwf	??_LCDWriteNibble
  1143  07AE  3007               	movlw	7
  1144  07AF                     u155:
  1145  07AF  1003               	clrc
  1146  07B0  0CF1               	rrf	??_LCDWriteNibble,f
  1147  07B1  3EFF               	addlw	-1
  1148  07B2  1D03               	skipz
  1149  07B3  2FAF               	goto	u155
  1150  07B4  1C71               	btfss	??_LCDWriteNibble,0
  1151  07B5  2FB7               	goto	u161
  1152  07B6  2FB8               	goto	u160
  1153  07B7                     u161:
  1154  07B7  2FBA               	goto	l53
  1155  07B8                     u160:
  1156  07B8                     l783:
  1157                           
  1158                           ;lcd.c: 95:         PORTDbits.RD7 = 1;
  1159  07B8  1788               	bsf	8,7	;volatile
  1160                           
  1161                           ;lcd.c: 96:     } else{
  1162  07B9  2FBB               	goto	l785
  1163  07BA                     l53:
  1164                           
  1165                           ;lcd.c: 97:         PORTDbits.RD7 = 0;
  1166  07BA  1388               	bcf	8,7	;volatile
  1167  07BB                     l785:
  1168                           
  1169                           ;lcd.c: 100:     if(((ch & 0x40)>>6)==1){
  1170  07BB  0872               	movf	LCDWriteNibble@ch,w
  1171  07BC  00F1               	movwf	??_LCDWriteNibble
  1172  07BD  3006               	movlw	6
  1173  07BE                     u175:
  1174  07BE  1003               	clrc
  1175  07BF  0CF1               	rrf	??_LCDWriteNibble,f
  1176  07C0  3EFF               	addlw	-1
  1177  07C1  1D03               	skipz
  1178  07C2  2FBE               	goto	u175
  1179  07C3  1C71               	btfss	??_LCDWriteNibble,0
  1180  07C4  2FC6               	goto	u181
  1181  07C5  2FC7               	goto	u180
  1182  07C6                     u181:
  1183  07C6  2FC9               	goto	l55
  1184  07C7                     u180:
  1185  07C7                     l787:
  1186                           
  1187                           ;lcd.c: 101:         PORTDbits.RD6 = 1;
  1188  07C7  1708               	bsf	8,6	;volatile
  1189                           
  1190                           ;lcd.c: 102:     } else{
  1191  07C8  2FCA               	goto	l789
  1192  07C9                     l55:
  1193                           
  1194                           ;lcd.c: 103:         PORTDbits.RD6 = 0;
  1195  07C9  1308               	bcf	8,6	;volatile
  1196  07CA                     l789:
  1197                           
  1198                           ;lcd.c: 106:     if(((ch & 0x20)>>5)==1){
  1199  07CA  0872               	movf	LCDWriteNibble@ch,w
  1200  07CB  00F1               	movwf	??_LCDWriteNibble
  1201  07CC  3005               	movlw	5
  1202  07CD                     u195:
  1203  07CD  1003               	clrc
  1204  07CE  0CF1               	rrf	??_LCDWriteNibble,f
  1205  07CF  3EFF               	addlw	-1
  1206  07D0  1D03               	skipz
  1207  07D1  2FCD               	goto	u195
  1208  07D2  1C71               	btfss	??_LCDWriteNibble,0
  1209  07D3  2FD5               	goto	u201
  1210  07D4  2FD6               	goto	u200
  1211  07D5                     u201:
  1212  07D5  2FD8               	goto	l57
  1213  07D6                     u200:
  1214  07D6                     l791:
  1215                           
  1216                           ;lcd.c: 107:         PORTDbits.RD5 = 1;
  1217  07D6  1688               	bsf	8,5	;volatile
  1218                           
  1219                           ;lcd.c: 108:     } else{
  1220  07D7  2FD9               	goto	l793
  1221  07D8                     l57:
  1222                           
  1223                           ;lcd.c: 109:         PORTDbits.RD5 = 0;
  1224  07D8  1288               	bcf	8,5	;volatile
  1225  07D9                     l793:
  1226                           
  1227                           ;lcd.c: 112:     if(((ch & 0x10)>>4)==1){
  1228  07D9  0872               	movf	LCDWriteNibble@ch,w
  1229  07DA  00F1               	movwf	??_LCDWriteNibble
  1230  07DB  3004               	movlw	4
  1231  07DC                     u215:
  1232  07DC  1003               	clrc
  1233  07DD  0CF1               	rrf	??_LCDWriteNibble,f
  1234  07DE  3EFF               	addlw	-1
  1235  07DF  1D03               	skipz
  1236  07E0  2FDC               	goto	u215
  1237  07E1  1C71               	btfss	??_LCDWriteNibble,0
  1238  07E2  2FE4               	goto	u221
  1239  07E3  2FE5               	goto	u220
  1240  07E4                     u221:
  1241  07E4  2FE7               	goto	l59
  1242  07E5                     u220:
  1243  07E5                     l795:
  1244                           
  1245                           ;lcd.c: 113:         PORTDbits.RD4 = 1;
  1246  07E5  1608               	bsf	8,4	;volatile
  1247                           
  1248                           ;lcd.c: 114:     } else{
  1249  07E6  2FE8               	goto	l797
  1250  07E7                     l59:
  1251                           
  1252                           ;lcd.c: 115:         PORTDbits.RD4 = 0;
  1253  07E7  1208               	bcf	8,4	;volatile
  1254  07E8                     l797:
  1255                           
  1256                           ;lcd.c: 121:     PORTEbits.RE0 = rs;
  1257  07E8  0C70               	rrf	LCDWriteNibble@rs,w
  1258  07E9  1C03               	skipc
  1259  07EA  1009               	bcf	9,0	;volatile
  1260  07EB  1803               	skipnc
  1261  07EC  1409               	bsf	9,0	;volatile
  1262  07ED                     l799:
  1263                           
  1264                           ;lcd.c: 124:     PORTEbits.RE1 = 0;
  1265  07ED  1089               	bcf	9,1	;volatile
  1266  07EE                     l801:
  1267                           
  1268                           ;lcd.c: 127:     PORTEbits.RE2 = 1;
  1269  07EE  1509               	bsf	9,2	;volatile
  1270  07EF                     l803:
  1271                           
  1272                           ;lcd.c: 130:     PORTEbits.RE2 = 0;
  1273  07EF  1109               	bcf	9,2	;volatile
  1274  07F0                     l61:
  1275  07F0  0008               	return
  1276  07F1                     __end_of_LCDWriteNibble:
  1277  007E                     btemp	set	126	;btemp
  1278  007E                     wtemp0	set	126
  1279                           
  1280                           	psect	idloc
  1281                           
  1282                           ;Config register IDLOC0 @ 0x2000
  1283                           ;	unspecified, using default values
  1284  2000                     	org	8192
  1285  2000  3FFF               	dw	16383
  1286                           
  1287                           ;Config register IDLOC1 @ 0x2001
  1288                           ;	unspecified, using default values
  1289  2001                     	org	8193
  1290  2001  3FFF               	dw	16383
  1291                           
  1292                           ;Config register IDLOC2 @ 0x2002
  1293                           ;	unspecified, using default values
  1294  2002                     	org	8194
  1295  2002  3FFF               	dw	16383
  1296                           
  1297                           ;Config register IDLOC3 @ 0x2003
  1298                           ;	unspecified, using default values
  1299  2003                     	org	8195
  1300  2003  3FFF               	dw	16383
  1301                           
  1302                           	psect	config
  1303                           
  1304                           ;Config register CONFIG1 @ 0x2007
  1305                           ;	Oscillator Selection bits
  1306                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1307                           ;	Watchdog Timer Enable bit
  1308                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1309                           ;	Power-up Timer Enable bit
  1310                           ;	PWRTE = OFF, PWRT disabled
  1311                           ;	RE3/MCLR pin function select bit
  1312                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1313                           ;	Code Protection bit
  1314                           ;	CP = OFF, Program memory code protection is disabled
  1315                           ;	Data Code Protection bit
  1316                           ;	CPD = OFF, Data memory code protection is disabled
  1317                           ;	Brown Out Reset Selection bits
  1318                           ;	BOREN = OFF, BOR disabled
  1319                           ;	Internal External Switchover bit
  1320                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1321                           ;	Fail-Safe Clock Monitor Enabled bit
  1322                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1323                           ;	Low Voltage Programming Enable bit
  1324                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1325                           ;	In-Circuit Debugger Mode bit
  1326                           ;	DEBUG = 0x1, unprogrammed default
  1327  2007                     	org	8199
  1328  2007  20D2               	dw	8402
  1329                           
  1330                           ;Config register CONFIG2 @ 0x2008
  1331                           ;	Brown-out Reset Selection bit
  1332                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1333                           ;	Flash Program Memory Self Write Enable bits
  1334                           ;	WRT = OFF, Write protection off
  1335  2008                     	org	8200
  1336  2008  3FFF               	dw	16383

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      0      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDPutStr@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_LCDGoto
    _config->_LCD_Initialize
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1845
                            _LCDGoto
                          _LCDPutStr
                             _config
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0     504
                     _LCD_Initialize
 ---------------------------------------------------------------------------------
 (2) _LCD_Initialize                                       2     2      0     504
                                              6 COMMON     2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     3      0     627
                                              6 COMMON     3     3      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           3     3      0     504
                                              3 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     714
                                              6 COMMON     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (3) _LCDPutCmd                                            3     3      0     504
                                              3 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (4) _LCDWriteNibble                                       3     2      1     437
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _config
     _LCD_Initialize
       _LCDPutCmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      26       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      18       5       30.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      26      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Nov 03 09:42:48 2022

         _LCD_Initialize 076C                        pc 0002                       l23 06AE  
                     l50 079C              ?_LCDPutChar 0070                       l28 06B4  
                     l61 07F0                       l53 07BA                       l55 07C9  
                     l64 070E                       l57 07D8                       l73 06E6  
                     l59 07E7                       l67 076B                       l79 073C  
                     _b2 0036                       _b3 0034                       fsr 0004  
                    l801 07EE                      l803 07EF                      l811 075B  
                    l813 0764                      l805 073E                      l821 0784  
                    l807 0747                      l831 06F1                      l823 078A  
                    l815 076C                      l809 074E                      l841 0710  
                    l833 06F9                      l825 0790                      l817 0776  
                    l771 079E                      l851 072D                      l843 0716  
                    l835 0706                      l827 0796                      l819 077E  
                    l781 07AC                      l773 07A8                      l853 0733  
                    l845 071D                      l829 06E8                      l861 06D9  
                    l837 06A2                      l791 07D6                      l783 07B8  
                    l775 07A9                      l847 0722                      l855 06C6  
                    l839 06A9                      l863 06AF                      l793 07D9  
                    l785 07BB                      l777 07AA                      l849 0728  
                    l857 06C8                      l865 06BB                      l795 07E5  
                    l787 07C7                      l779 07AB                      l859 06D5  
                    l797 07E8                      l789 07CA                      l799 07ED  
                    u200 07D6                      u201 07D5                      u220 07E5  
                    u221 07E4                      u215 07DC                      u160 07B8  
                    u161 07B7                      u250 0716                      u155 07AF  
                    u235 0751                      u251 0715                      u307 06EC  
                    u180 07C7                      u260 071C                      u181 07C6  
                    u317 0737                      u261 071B                      u245 06FC  
                    u270 0722                      u175 07BE                      u327 0742  
                    u271 0721                      u280 06E6                      u337 075F  
                    u281 06E5                      u195 07CD                      u297 077A  
                    _cnt 007C                      fsr0 0004                      indf 0000  
        __end_of_LCDGoto 073D                     STR_1 0009                     _main 06AF  
                   btemp 007E                     start 0000   __end_of_LCD_Initialize 079D  
            LCDPutCmd@ch 0075                    ?_main 0070                    _ANSEL 0188  
                  _PORTD 0008                    _TRISD 0088                    _TRISE 0089  
                  pclath 000A                    status 0003                    wtemp0 007E  
        ?_LCD_Initialize 0070          __initialization 07F1             __end_of_main 06C5  
                 ??_main 007C                ??_LCDGoto 0077        __end_of_LCDPutCmd 076C  
           LCDPutChar@ch 0075        __end_of_LCDPutStr 06E7                   _ANSELH 0189  
           LCDPutStr@str 0077           _LCDWriteNibble 079D                   _config 06A2  
                 _buffer 0020   __end_of_LCDWriteNibble 07F1  __end_of__initialization 07FC  
              LCDGoto@ln 0076           __pcstackCOMMON 0070             ??_LCDPutChar 0073  
             __pbssBANK0 0020          ?_LCDWriteNibble 0070       __end_of_LCDPutChar 070F  
             __pmaintext 06AF                  ?_config 0070                  _LCDGoto 070F  
             __stringtab 0003         ??_LCD_Initialize 0076                  __ptext1 06A2  
                __ptext2 076C                  __ptext3 06C5                  __ptext4 06E7  
                __ptext5 070F                  __ptext6 073D                  __ptext7 079D  
              _LCDPutCmd 073D                  clrloop0 069B                _LCDPutStr 06C5  
   end_of_initialization 07FC                _PORTDbits 0008                _PORTEbits 0009  
             ?_LCDPutCmd 0070               ?_LCDPutStr 0070               LCDGoto@pos 007B  
             LCDPutStr@i 0078           __end_of_config 06AF      start_initialization 07F1  
       ??_LCDWriteNibble 0071                 ??_config 0078                 ?_LCDGoto 0076  
            __pbssCOMMON 007C                ___latbits 0002              ??_LCDPutCmd 0073  
            ??_LCDPutStr 0076         LCDWriteNibble@ch 0072         LCDWriteNibble@rs 0070  
              __pstrings 0003                clear_ram0 069A              _LCDGoto$129 0079  
            __stringbase 0008       __end_of__stringtab 0009               _LCDPutChar 06E7  
              stringcode 0003                 stringdir 0003                 stringtab 0003  
