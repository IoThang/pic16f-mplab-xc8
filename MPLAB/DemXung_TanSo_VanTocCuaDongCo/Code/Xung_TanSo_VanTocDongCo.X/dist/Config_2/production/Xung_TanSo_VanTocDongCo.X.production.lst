

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Nov 06 06:32:35 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
     8                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	psect	text1_split_1,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 2.40
    55                           ; Generated 17/11/2021 GMT
    56                           ; 
    57                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution. Publication is not required when
    71                           ;        this file is used in an embedded application.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  0105                     	;# 
   153  0107                     	;# 
   154  0108                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0185                     	;# 
   162  0187                     	;# 
   163  0188                     	;# 
   164  0189                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0008                     	;# 
   254  0009                     	;# 
   255  000A                     	;# 
   256  000B                     	;# 
   257  000C                     	;# 
   258  000D                     	;# 
   259  000E                     	;# 
   260  000E                     	;# 
   261  000F                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0013                     	;# 
   266  0014                     	;# 
   267  0015                     	;# 
   268  0015                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001B                     	;# 
   276  001C                     	;# 
   277  001D                     	;# 
   278  001E                     	;# 
   279  001F                     	;# 
   280  0081                     	;# 
   281  0085                     	;# 
   282  0086                     	;# 
   283  0087                     	;# 
   284  0088                     	;# 
   285  0089                     	;# 
   286  008C                     	;# 
   287  008D                     	;# 
   288  008E                     	;# 
   289  008F                     	;# 
   290  0090                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0093                     	;# 
   294  0093                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  009F                     	;# 
   308  0105                     	;# 
   309  0107                     	;# 
   310  0108                     	;# 
   311  0109                     	;# 
   312  010C                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  010F                     	;# 
   317  0185                     	;# 
   318  0187                     	;# 
   319  0188                     	;# 
   320  0189                     	;# 
   321  018C                     	;# 
   322  018D                     	;# 
   323                           
   324                           	psect	strings
   325  1000                     __pstrings:
   326  1000                     stringtab:
   327  1000                     __stringtab:
   328  1000                     stringcode:	
   329                           ;	String table - string pointers are 1 byte each
   330                           
   331  1000                     stringdir:
   332  1000  3010               	movlw	high stringdir
   333  1001  008A               	movwf	10
   334  1002  0804               	movf	4,w
   335  1003  0A84               	incf	4,f
   336  1004  0782               	addwf	2,f
   337  1005                     __stringbase:
   338  1005  3400               	retlw	0
   339  1006                     __end_of__stringtab:
   340  1006                     __powers_:
   341  1006  3400               	retlw	0
   342  1007  3400               	retlw	0
   343  1008  3480               	retlw	128
   344  1009  343F               	retlw	63
   345  100A  3400               	retlw	0
   346  100B  3400               	retlw	0
   347  100C  3420               	retlw	32
   348  100D  3441               	retlw	65
   349  100E  3400               	retlw	0
   350  100F  3400               	retlw	0
   351  1010  34C8               	retlw	200
   352  1011  3442               	retlw	66
   353  1012  3400               	retlw	0
   354  1013  3400               	retlw	0
   355  1014  347A               	retlw	122
   356  1015  3444               	retlw	68
   357  1016  3400               	retlw	0
   358  1017  3440               	retlw	64
   359  1018  341C               	retlw	28
   360  1019  3446               	retlw	70
   361  101A  3400               	retlw	0
   362  101B  3450               	retlw	80
   363  101C  34C3               	retlw	195
   364  101D  3447               	retlw	71
   365  101E  3400               	retlw	0
   366  101F  3424               	retlw	36
   367  1020  3474               	retlw	116
   368  1021  3449               	retlw	73
   369  1022  3480               	retlw	128
   370  1023  3496               	retlw	150
   371  1024  3418               	retlw	24
   372  1025  344B               	retlw	75
   373  1026  3420               	retlw	32
   374  1027  34BC               	retlw	188
   375  1028  34BE               	retlw	190
   376  1029  344C               	retlw	76
   377  102A  3428               	retlw	40
   378  102B  346B               	retlw	107
   379  102C  346E               	retlw	110
   380  102D  344E               	retlw	78
   381  102E  34F9               	retlw	249
   382  102F  3402               	retlw	2
   383  1030  3415               	retlw	21
   384  1031  3450               	retlw	80
   385  1032  34EC               	retlw	236
   386  1033  3478               	retlw	120
   387  1034  34AD               	retlw	173
   388  1035  3460               	retlw	96
   389  1036  34CA               	retlw	202
   390  1037  34F2               	retlw	242
   391  1038  3449               	retlw	73
   392  1039  3471               	retlw	113
   393  103A                     __end_of__powers_:
   394  103A                     __npowers_:
   395  103A  3400               	retlw	0
   396  103B  3400               	retlw	0
   397  103C  3480               	retlw	128
   398  103D  343F               	retlw	63
   399  103E  34CD               	retlw	205
   400  103F  34CC               	retlw	204
   401  1040  34CC               	retlw	204
   402  1041  343D               	retlw	61
   403  1042  340A               	retlw	10
   404  1043  34D7               	retlw	215
   405  1044  3423               	retlw	35
   406  1045  343C               	retlw	60
   407  1046  346F               	retlw	111
   408  1047  3412               	retlw	18
   409  1048  3483               	retlw	131
   410  1049  343A               	retlw	58
   411  104A  3417               	retlw	23
   412  104B  34B7               	retlw	183
   413  104C  34D1               	retlw	209
   414  104D  3438               	retlw	56
   415  104E  34AC               	retlw	172
   416  104F  34C5               	retlw	197
   417  1050  3427               	retlw	39
   418  1051  3437               	retlw	55
   419  1052  34BD               	retlw	189
   420  1053  3437               	retlw	55
   421  1054  3486               	retlw	134
   422  1055  3435               	retlw	53
   423  1056  3495               	retlw	149
   424  1057  34BF               	retlw	191
   425  1058  34D6               	retlw	214
   426  1059  3433               	retlw	51
   427  105A  3477               	retlw	119
   428  105B  34CC               	retlw	204
   429  105C  342B               	retlw	43
   430  105D  3432               	retlw	50
   431  105E  345F               	retlw	95
   432  105F  3470               	retlw	112
   433  1060  3489               	retlw	137
   434  1061  3430               	retlw	48
   435  1062  34FF               	retlw	255
   436  1063  34E6               	retlw	230
   437  1064  34DB               	retlw	219
   438  1065  342E               	retlw	46
   439  1066  3408               	retlw	8
   440  1067  34E5               	retlw	229
   441  1068  343C               	retlw	60
   442  1069  341E               	retlw	30
   443  106A  3460               	retlw	96
   444  106B  3442               	retlw	66
   445  106C  34A2               	retlw	162
   446  106D  340D               	retlw	13
   447  106E                     __end_of__npowers_:
   448  106E                     _dpowers:
   449  106E  3401               	retlw	1
   450  106F  3400               	retlw	0
   451  1070  3400               	retlw	0
   452  1071  3400               	retlw	0
   453  1072  340A               	retlw	10
   454  1073  3400               	retlw	0
   455  1074  3400               	retlw	0
   456  1075  3400               	retlw	0
   457  1076  3464               	retlw	100
   458  1077  3400               	retlw	0
   459  1078  3400               	retlw	0
   460  1079  3400               	retlw	0
   461  107A  34E8               	retlw	232
   462  107B  3403               	retlw	3
   463  107C  3400               	retlw	0
   464  107D  3400               	retlw	0
   465  107E  3410               	retlw	16
   466  107F  3427               	retlw	39
   467  1080  3400               	retlw	0
   468  1081  3400               	retlw	0
   469  1082  34A0               	retlw	160
   470  1083  3486               	retlw	134
   471  1084  3401               	retlw	1
   472  1085  3400               	retlw	0
   473  1086  3440               	retlw	64
   474  1087  3442               	retlw	66
   475  1088  340F               	retlw	15
   476  1089  3400               	retlw	0
   477  108A  3480               	retlw	128
   478  108B  3496               	retlw	150
   479  108C  3498               	retlw	152
   480  108D  3400               	retlw	0
   481  108E  3400               	retlw	0
   482  108F  34E1               	retlw	225
   483  1090  34F5               	retlw	245
   484  1091  3405               	retlw	5
   485  1092  3400               	retlw	0
   486  1093  34CA               	retlw	202
   487  1094  349A               	retlw	154
   488  1095  343B               	retlw	59
   489  1096                     __end_of_dpowers:
   490  000E                     _TMR1	set	14
   491  0008                     _PORTDbits	set	8
   492  0008                     _PORTD	set	8
   493  005F                     _GIE	set	95
   494  005E                     _PEIE	set	94
   495  0059                     _INTF	set	89
   496  005C                     _INTE	set	92
   497  0060                     _TMR1IF	set	96
   498  0080                     _TMR1ON	set	128
   499  0081                     _TMR1CS	set	129
   500  0084                     _T1CKPS0	set	132
   501  0085                     _T1CKPS1	set	133
   502  0088                     _TRISD	set	136
   503  0087                     _TRISC	set	135
   504  040E                     _INTEDG	set	1038
   505  0460                     _TMR1IE	set	1120
   506  0189                     _ANSELH	set	393
   507  0188                     _ANSEL	set	392
   508  1096                     STR_1:
   509  1096  3420               	retlw	32	;' '
   510  1097  3425               	retlw	37	;'%'
   511  1098  3430               	retlw	48	;'0'
   512  1099  342E               	retlw	46	;'.'
   513  109A  3433               	retlw	51	;'3'
   514  109B  3466               	retlw	102	;'f'
   515  109C  3420               	retlw	32	;' '
   516  109D  3420               	retlw	32	;' '
   517  109E  3420               	retlw	32	;' '
   518  109F  3425               	retlw	37	;'%'
   519  10A0  3475               	retlw	117	;'u'
   520  10A1  3420               	retlw	32	;' '
   521  10A2  3400               	retlw	0
   522                           
   523                           	psect	cinit
   524  0013                     start_initialization:	
   525                           ; #config settings
   526                           
   527  0013                     __initialization:
   528                           
   529                           ; Clear objects allocated to BANK0
   530  0013  1283               	bcf	3,5	;RP0=0, select bank0
   531  0014  1303               	bcf	3,6	;RP1=0, select bank0
   532  0015  01C5               	clrf	__pbssBANK0& (0+127)
   533  0016  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   534  0017  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   535  0018  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   536  0019  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   537  001A  01CA               	clrf	(__pbssBANK0+5)& (0+127)
   538                           
   539                           ; Clear objects allocated to BANK3
   540  001B  1683               	bsf	3,5	;RP0=1, select bank3
   541  001C  1703               	bsf	3,6	;RP1=1, select bank3
   542  001D  01C3               	clrf	__pbssBANK3& (0+127)
   543  001E  01C4               	clrf	(__pbssBANK3+1)& (0+127)
   544  001F  01C5               	clrf	(__pbssBANK3+2)& (0+127)
   545  0020  01C6               	clrf	(__pbssBANK3+3)& (0+127)
   546  0021  01C7               	clrf	(__pbssBANK3+4)& (0+127)
   547  0022  01C8               	clrf	(__pbssBANK3+5)& (0+127)
   548  0023  01C9               	clrf	(__pbssBANK3+6)& (0+127)
   549  0024  01CA               	clrf	(__pbssBANK3+7)& (0+127)
   550  0025  01CB               	clrf	(__pbssBANK3+8)& (0+127)
   551  0026  01CC               	clrf	(__pbssBANK3+9)& (0+127)
   552  0027  01CD               	clrf	(__pbssBANK3+10)& (0+127)
   553  0028  01CE               	clrf	(__pbssBANK3+11)& (0+127)
   554  0029  01CF               	clrf	(__pbssBANK3+12)& (0+127)
   555  002A  01D0               	clrf	(__pbssBANK3+13)& (0+127)
   556  002B                     end_of_initialization:	
   557                           ;End of C runtime variable initialization code
   558                           
   559  002B                     __end_of__initialization:
   560  002B  0183               	clrf	3
   561  002C  160A  158A  2AB4   	ljmp	_main	;jump to C main() function
   562                           
   563                           	psect	bssBANK0
   564  0045                     __pbssBANK0:
   565  0045                     _PrePulse:
   566  0045                     	ds	2
   567  0047                     _Pulse:
   568  0047                     	ds	2
   569  0049                     _DeltaPulse:
   570  0049                     	ds	2
   571                           
   572                           	psect	bssBANK3
   573  01C3                     __pbssBANK3:
   574  01C3                     _Velocity:
   575  01C3                     	ds	4
   576  01C7                     _buffer:
   577  01C7                     	ds	10
   578                           
   579                           	psect	cstackBANK3
   580  0190                     __pcstackBANK3:
   581  0190                     ___fladd@signs:
   582                           
   583                           ; 1 bytes @ 0x0
   584  0190                     	ds	1
   585  0191                     ___fladd@aexp:
   586                           
   587                           ; 1 bytes @ 0x1
   588  0191                     	ds	1
   589  0192                     ___fladd@bexp:
   590                           
   591                           ; 1 bytes @ 0x2
   592  0192                     	ds	1
   593  0193                     ___fladd@grs:
   594                           
   595                           ; 1 bytes @ 0x3
   596  0193                     	ds	1
   597  0194                     ?___flsub:
   598  0194                     ___flsub@a:	
   599                           ; 4 bytes @ 0x4
   600                           
   601                           
   602                           ; 4 bytes @ 0x4
   603  0194                     	ds	4
   604  0198                     ___flsub@b:
   605                           
   606                           ; 4 bytes @ 0x8
   607  0198                     	ds	4
   608  019C                     ?_sprintf:
   609  019C                     sprintf@f:	
   610                           ; 2 bytes @ 0xC
   611                           
   612                           
   613                           ; 1 bytes @ 0xC
   614  019C                     	ds	7
   615  01A3                     ??_sprintf:
   616                           
   617                           ; 1 bytes @ 0x13
   618  01A3                     	ds	5
   619  01A8                     _sprintf$834:
   620                           
   621                           ; 4 bytes @ 0x18
   622  01A8                     	ds	4
   623  01AC                     sprintf@ap:
   624                           
   625                           ; 1 bytes @ 0x1C
   626  01AC                     	ds	1
   627  01AD                     sprintf@val:
   628                           
   629                           ; 4 bytes @ 0x1D
   630  01AD                     	ds	4
   631  01B1                     sprintf@tmpval:
   632                           
   633                           ; 4 bytes @ 0x21
   634  01B1                     	ds	4
   635  01B5                     sprintf@eexp:
   636                           
   637                           ; 2 bytes @ 0x25
   638  01B5                     	ds	2
   639  01B7                     sprintf@flag:
   640                           
   641                           ; 2 bytes @ 0x27
   642  01B7                     	ds	2
   643  01B9                     sprintf@width:
   644                           
   645                           ; 2 bytes @ 0x29
   646  01B9                     	ds	2
   647  01BB                     sprintf@fval:
   648                           
   649                           ; 4 bytes @ 0x2B
   650  01BB                     	ds	4
   651  01BF                     sprintf@prec:
   652                           
   653                           ; 2 bytes @ 0x2F
   654  01BF                     	ds	2
   655  01C1                     sprintf@sp:
   656                           
   657                           ; 1 bytes @ 0x31
   658  01C1                     	ds	1
   659  01C2                     sprintf@c:
   660                           
   661                           ; 1 bytes @ 0x32
   662  01C2                     	ds	1
   663                           
   664                           	psect	cstackBANK1
   665  00A0                     __pcstackBANK1:
   666  00A0                     ?___fleq:
   667  00A0                     ?___flge:	
   668                           ; 1 bit 
   669                           
   670  00A0                     ?_LCDWriteNibble:	
   671                           ; 1 bit 
   672                           
   673  00A0                     ?___lbmod:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  00A0                     ?__Umul8_16:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  00A0                     ?___wmul:	
   680                           ; 2 bytes @ 0x0
   681                           
   682  00A0                     ?___awmod:	
   683                           ; 2 bytes @ 0x0
   684                           
   685  00A0                     ?__tdiv_to_l_:	
   686                           ; 2 bytes @ 0x0
   687                           
   688  00A0                     ?__div_to_l_:	
   689                           ; 4 bytes @ 0x0
   690                           
   691  00A0                     ?___lldiv:	
   692                           ; 4 bytes @ 0x0
   693                           
   694  00A0                     ?___flneg:	
   695                           ; 4 bytes @ 0x0
   696                           
   697  00A0                     ?___xxtofl:	
   698                           ; 4 bytes @ 0x0
   699                           
   700  00A0                     LCDWriteNibble@rs:	
   701                           ; 4 bytes @ 0x0
   702                           
   703  00A0                     ___lbmod@divisor:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  00A0                     __Umul8_16@multiplicand:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  00A0                     _isdigit$652:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  00A0                     ___wmul@multiplier:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  00A0                     ___awmod@divisor:	
   716                           ; 2 bytes @ 0x0
   717                           
   718  00A0                     ___lldiv@divisor:	
   719                           ; 2 bytes @ 0x0
   720                           
   721  00A0                     __div_to_l_@f1:	
   722                           ; 4 bytes @ 0x0
   723                           
   724  00A0                     ___fleq@ff1:	
   725                           ; 4 bytes @ 0x0
   726                           
   727  00A0                     ___flge@ff1:	
   728                           ; 4 bytes @ 0x0
   729                           
   730  00A0                     ___flneg@f1:	
   731                           ; 4 bytes @ 0x0
   732                           
   733  00A0                     __tdiv_to_l_@f1:	
   734                           ; 4 bytes @ 0x0
   735                           
   736  00A0                     ___xxtofl@val:	
   737                           ; 4 bytes @ 0x0
   738                           
   739                           
   740                           ; 4 bytes @ 0x0
   741  00A0                     	ds	1
   742  00A1                     ??_LCDWriteNibble:
   743  00A1                     ??___lbmod:	
   744                           ; 1 bytes @ 0x1
   745                           
   746  00A1                     isdigit@c:	
   747                           ; 1 bytes @ 0x1
   748                           
   749                           
   750                           ; 1 bytes @ 0x1
   751  00A1                     	ds	1
   752  00A2                     ??__Umul8_16:
   753  00A2                     LCDWriteNibble@ch:	
   754                           ; 1 bytes @ 0x2
   755                           
   756  00A2                     ___wmul@multiplicand:	
   757                           ; 1 bytes @ 0x2
   758                           
   759  00A2                     ___awmod@dividend:	
   760                           ; 2 bytes @ 0x2
   761                           
   762                           
   763                           ; 2 bytes @ 0x2
   764  00A2                     	ds	1
   765  00A3                     ??_LCDPutCmd:
   766  00A3                     ??_LCDPutChar:	
   767                           ; 1 bytes @ 0x3
   768                           
   769                           
   770                           ; 1 bytes @ 0x3
   771  00A3                     	ds	1
   772  00A4                     ??___awmod:
   773  00A4                     ??___xxtofl:	
   774                           ; 1 bytes @ 0x4
   775                           
   776  00A4                     ___lbmod@dividend:	
   777                           ; 1 bytes @ 0x4
   778                           
   779  00A4                     ___wmul@product:	
   780                           ; 1 bytes @ 0x4
   781                           
   782  00A4                     __Umul8_16@product:	
   783                           ; 2 bytes @ 0x4
   784                           
   785  00A4                     ___lldiv@dividend:	
   786                           ; 2 bytes @ 0x4
   787                           
   788  00A4                     __div_to_l_@f2:	
   789                           ; 4 bytes @ 0x4
   790                           
   791  00A4                     ___fleq@ff2:	
   792                           ; 4 bytes @ 0x4
   793                           
   794  00A4                     ___flge@ff2:	
   795                           ; 4 bytes @ 0x4
   796                           
   797  00A4                     __tdiv_to_l_@f2:	
   798                           ; 4 bytes @ 0x4
   799                           
   800                           
   801                           ; 4 bytes @ 0x4
   802  00A4                     	ds	1
   803  00A5                     LCDPutChar@ch:
   804  00A5                     LCDPutCmd@ch:	
   805                           ; 1 bytes @ 0x5
   806                           
   807  00A5                     ___awmod@counter:	
   808                           ; 1 bytes @ 0x5
   809                           
   810  00A5                     ___lbmod@counter:	
   811                           ; 1 bytes @ 0x5
   812                           
   813                           
   814                           ; 1 bytes @ 0x5
   815  00A5                     	ds	1
   816  00A6                     ??_LCD_Initialize:
   817  00A6                     ?_LCDGoto:	
   818                           ; 1 bytes @ 0x6
   819                           
   820  00A6                     ??_LCDPutStr:	
   821                           ; 1 bytes @ 0x6
   822                           
   823  00A6                     LCDGoto@ln:	
   824                           ; 1 bytes @ 0x6
   825                           
   826  00A6                     ___awmod@sign:	
   827                           ; 1 bytes @ 0x6
   828                           
   829  00A6                     ___lbmod@rem:	
   830                           ; 1 bytes @ 0x6
   831                           
   832  00A6                     __Umul8_16@word_mpld:	
   833                           ; 1 bytes @ 0x6
   834                           
   835                           
   836                           ; 2 bytes @ 0x6
   837  00A6                     	ds	1
   838  00A7                     ??_LCDGoto:
   839  00A7                     ?___lbdiv:	
   840                           ; 1 bytes @ 0x7
   841                           
   842  00A7                     ?___awdiv:	
   843                           ; 1 bytes @ 0x7
   844                           
   845  00A7                     LCDPutStr@str:	
   846                           ; 2 bytes @ 0x7
   847                           
   848  00A7                     ___lbdiv@divisor:	
   849                           ; 1 bytes @ 0x7
   850                           
   851  00A7                     ___awdiv@divisor:	
   852                           ; 1 bytes @ 0x7
   853                           
   854                           
   855                           ; 2 bytes @ 0x7
   856  00A7                     	ds	1
   857  00A8                     ??__tdiv_to_l_:
   858  00A8                     ??__div_to_l_:	
   859                           ; 1 bytes @ 0x8
   860                           
   861  00A8                     ??___lldiv:	
   862                           ; 1 bytes @ 0x8
   863                           
   864  00A8                     ??___fleq:	
   865                           ; 1 bytes @ 0x8
   866                           
   867  00A8                     ??___flge:	
   868                           ; 1 bytes @ 0x8
   869                           
   870  00A8                     ??___lbdiv:	
   871                           ; 1 bytes @ 0x8
   872                           
   873  00A8                     LCDPutStr@i:	
   874                           ; 1 bytes @ 0x8
   875                           
   876  00A8                     __Umul8_16@multiplier:	
   877                           ; 1 bytes @ 0x8
   878                           
   879  00A8                     ___xxtofl@sign:	
   880                           ; 1 bytes @ 0x8
   881                           
   882                           
   883                           ; 1 bytes @ 0x8
   884  00A8                     	ds	1
   885  00A9                     ___lbdiv@dividend:
   886  00A9                     ___xxtofl@exp:	
   887                           ; 1 bytes @ 0x9
   888                           
   889  00A9                     _LCDGoto$141:	
   890                           ; 1 bytes @ 0x9
   891                           
   892  00A9                     ___awdiv@dividend:	
   893                           ; 2 bytes @ 0x9
   894                           
   895  00A9                     ___lldiv@quotient:	
   896                           ; 2 bytes @ 0x9
   897                           
   898  00A9                     __div_to_l_@quot:	
   899                           ; 4 bytes @ 0x9
   900                           
   901                           
   902                           ; 4 bytes @ 0x9
   903  00A9                     	ds	1
   904  00AA                     ___lbdiv@counter:
   905  00AA                     ___xxtofl@arg:	
   906                           ; 1 bytes @ 0xA
   907                           
   908                           
   909                           ; 4 bytes @ 0xA
   910  00AA                     	ds	1
   911  00AB                     ??___awdiv:
   912  00AB                     LCDGoto@pos:	
   913                           ; 1 bytes @ 0xB
   914                           
   915  00AB                     ___lbdiv@quotient:	
   916                           ; 1 bytes @ 0xB
   917                           
   918                           
   919                           ; 1 bytes @ 0xB
   920  00AB                     	ds	1
   921  00AC                     ___awdiv@counter:
   922  00AC                     __tdiv_to_l_@quot:	
   923                           ; 1 bytes @ 0xC
   924                           
   925                           
   926                           ; 4 bytes @ 0xC
   927  00AC                     	ds	1
   928  00AD                     ___lldiv@counter:
   929  00AD                     ___awdiv@sign:	
   930                           ; 1 bytes @ 0xD
   931                           
   932  00AD                     __div_to_l_@cntr:	
   933                           ; 1 bytes @ 0xD
   934                           
   935                           
   936                           ; 1 bytes @ 0xD
   937  00AD                     	ds	1
   938  00AE                     ?___llmod:
   939  00AE                     __div_to_l_@exp1:	
   940                           ; 4 bytes @ 0xE
   941                           
   942  00AE                     ___awdiv@quotient:	
   943                           ; 1 bytes @ 0xE
   944                           
   945  00AE                     ___llmod@divisor:	
   946                           ; 2 bytes @ 0xE
   947                           
   948                           
   949                           ; 4 bytes @ 0xE
   950  00AE                     	ds	2
   951  00B0                     ?___flmul:
   952  00B0                     __tdiv_to_l_@cntr:	
   953                           ; 4 bytes @ 0x10
   954                           
   955  00B0                     ___flmul@b:	
   956                           ; 1 bytes @ 0x10
   957                           
   958                           
   959                           ; 4 bytes @ 0x10
   960  00B0                     	ds	1
   961  00B1                     __tdiv_to_l_@exp1:
   962                           
   963                           ; 1 bytes @ 0x11
   964  00B1                     	ds	1
   965  00B2                     ___llmod@dividend:
   966                           
   967                           ; 4 bytes @ 0x12
   968  00B2                     	ds	2
   969  00B4                     ___flmul@a:
   970                           
   971                           ; 4 bytes @ 0x14
   972  00B4                     	ds	2
   973  00B6                     ??___llmod:
   974                           
   975                           ; 1 bytes @ 0x16
   976  00B6                     	ds	1
   977  00B7                     ___llmod@counter:
   978                           
   979                           ; 1 bytes @ 0x17
   980  00B7                     	ds	1
   981  00B8                     ??___flmul:
   982                           
   983                           ; 1 bytes @ 0x18
   984  00B8                     	ds	5
   985  00BD                     ___flmul@sign:
   986                           
   987                           ; 1 bytes @ 0x1D
   988  00BD                     	ds	1
   989  00BE                     ___flmul@aexp:
   990                           
   991                           ; 1 bytes @ 0x1E
   992  00BE                     	ds	1
   993  00BF                     ___flmul@bexp:
   994                           
   995                           ; 1 bytes @ 0x1F
   996  00BF                     	ds	1
   997  00C0                     ___flmul@grs:
   998                           
   999                           ; 4 bytes @ 0x20
  1000  00C0                     	ds	4
  1001  00C4                     ___flmul@prod:
  1002                           
  1003                           ; 4 bytes @ 0x24
  1004  00C4                     	ds	4
  1005  00C8                     ___flmul@temp:
  1006                           
  1007                           ; 2 bytes @ 0x28
  1008  00C8                     	ds	2
  1009  00CA                     ?_fround:
  1010  00CA                     ?_scale:	
  1011                           ; 4 bytes @ 0x2A
  1012                           
  1013                           
  1014                           ; 4 bytes @ 0x2A
  1015  00CA                     	ds	4
  1016  00CE                     ??_fround:
  1017  00CE                     ??_scale:	
  1018                           ; 1 bytes @ 0x2E
  1019                           
  1020                           
  1021                           ; 1 bytes @ 0x2E
  1022  00CE                     	ds	7
  1023  00D5                     _fround$832:
  1024                           
  1025                           ; 4 bytes @ 0x35
  1026  00D5                     	ds	3
  1027  00D8                     _scale$833:
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  00D8                     	ds	1
  1031  00D9                     _fround$831:
  1032                           
  1033                           ; 4 bytes @ 0x39
  1034  00D9                     	ds	3
  1035  00DC                     scale@scl:
  1036                           
  1037                           ; 1 bytes @ 0x3C
  1038  00DC                     	ds	1
  1039  00DD                     ?___fltol:
  1040  00DD                     fround@prec:	
  1041                           ; 4 bytes @ 0x3D
  1042                           
  1043  00DD                     ___fltol@f1:	
  1044                           ; 1 bytes @ 0x3D
  1045                           
  1046                           
  1047                           ; 4 bytes @ 0x3D
  1048  00DD                     	ds	1
  1049  00DE                     ?___fladd:
  1050  00DE                     ___fladd@b:	
  1051                           ; 4 bytes @ 0x3E
  1052                           
  1053                           
  1054                           ; 4 bytes @ 0x3E
  1055  00DE                     	ds	3
  1056  00E1                     ??___fltol:
  1057                           
  1058                           ; 1 bytes @ 0x41
  1059  00E1                     	ds	1
  1060  00E2                     ___fladd@a:
  1061                           
  1062                           ; 4 bytes @ 0x42
  1063  00E2                     	ds	4
  1064  00E6                     ??___fladd:
  1065  00E6                     ___fltol@sign1:	
  1066                           ; 1 bytes @ 0x46
  1067                           
  1068                           
  1069                           ; 1 bytes @ 0x46
  1070  00E6                     	ds	1
  1071  00E7                     ___fltol@exp1:
  1072                           
  1073                           ; 1 bytes @ 0x47
  1074  00E7                     	ds	7
  1075  00EE                     ??_main:
  1076                           
  1077                           ; 1 bytes @ 0x4E
  1078  00EE                     	ds	1
  1079                           
  1080                           	psect	cstackCOMMON
  1081  0070                     __pcstackCOMMON:
  1082  0070                     ?_isdigit:
  1083  0070                     ?_LCD_Initialize:	
  1084                           ; 1 bit 
  1085                           
  1086  0070                     ?_LCDPutStr:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     ?_LCDPutCmd:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092  0070                     ?_TIMER1_Init:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0070                     ?_config:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ?_main:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ?_ISR:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ?_LCDPutChar:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ?i1__Umul8_16:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?i1___xxtofl:	
  1111                           ; 2 bytes @ 0x0
  1112                           
  1113  0070                     i1__Umul8_16@multiplicand:	
  1114                           ; 4 bytes @ 0x0
  1115                           
  1116  0070                     i1___xxtofl@val:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119                           
  1120                           ; 4 bytes @ 0x0
  1121  0070                     	ds	2
  1122  0072                     ??i1__Umul8_16:
  1123                           
  1124                           ; 1 bytes @ 0x2
  1125  0072                     	ds	2
  1126  0074                     ??i1___xxtofl:
  1127  0074                     i1__Umul8_16@product:	
  1128                           ; 1 bytes @ 0x4
  1129                           
  1130                           
  1131                           ; 2 bytes @ 0x4
  1132  0074                     	ds	2
  1133  0076                     i1__Umul8_16@word_mpld:
  1134                           
  1135                           ; 2 bytes @ 0x6
  1136  0076                     	ds	2
  1137  0078                     i1__Umul8_16@multiplier:
  1138  0078                     i1___xxtofl@sign:	
  1139                           ; 1 bytes @ 0x8
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x8
  1143  0078                     	ds	1
  1144  0079                     i1___xxtofl@exp:
  1145                           
  1146                           ; 1 bytes @ 0x9
  1147  0079                     	ds	1
  1148  007A                     i1___xxtofl@arg:
  1149                           
  1150                           ; 4 bytes @ 0xA
  1151  007A                     	ds	4
  1152  007E                     ??_get_val:
  1153                           
  1154                           	psect	cstackBANK0
  1155  0020                     __pcstackBANK0:	
  1156                           ; 1 bytes @ 0xE
  1157                           
  1158  0020                     ?i1___flmul:
  1159  0020                     i1___flmul@b:	
  1160                           ; 4 bytes @ 0x0
  1161                           
  1162                           
  1163                           ; 4 bytes @ 0x0
  1164  0020                     	ds	4
  1165  0024                     i1___flmul@a:
  1166                           
  1167                           ; 4 bytes @ 0x4
  1168  0024                     	ds	4
  1169  0028                     ??i1___flmul:
  1170                           
  1171                           ; 1 bytes @ 0x8
  1172  0028                     	ds	5
  1173  002D                     i1___flmul@sign:
  1174                           
  1175                           ; 1 bytes @ 0xD
  1176  002D                     	ds	1
  1177  002E                     i1___flmul@aexp:
  1178                           
  1179                           ; 1 bytes @ 0xE
  1180  002E                     	ds	1
  1181  002F                     i1___flmul@grs:
  1182                           
  1183                           ; 4 bytes @ 0xF
  1184  002F                     	ds	4
  1185  0033                     i1___flmul@bexp:
  1186                           
  1187                           ; 1 bytes @ 0x13
  1188  0033                     	ds	1
  1189  0034                     i1___flmul@prod:
  1190                           
  1191                           ; 4 bytes @ 0x14
  1192  0034                     	ds	4
  1193  0038                     i1___flmul@temp:
  1194                           
  1195                           ; 2 bytes @ 0x18
  1196  0038                     	ds	2
  1197  003A                     ?_get_val:
  1198                           
  1199                           ; 4 bytes @ 0x1A
  1200  003A                     	ds	4
  1201  003E                     get_val@rpm:
  1202                           
  1203                           ; 4 bytes @ 0x1E
  1204  003E                     	ds	4
  1205  0042                     ??_ISR:
  1206                           
  1207                           ; 1 bytes @ 0x22
  1208  0042                     	ds	3
  1209  0045                     ??_isdigit:
  1210  0045                     ??_TIMER1_Init:	
  1211                           ; 1 bytes @ 0x25
  1212                           
  1213  0045                     ??_config:	
  1214                           ; 1 bytes @ 0x25
  1215                           
  1216  0045                     ??___wmul:	
  1217                           ; 1 bytes @ 0x25
  1218                           
  1219  0045                     ??___flneg:	
  1220                           ; 1 bytes @ 0x25
  1221                           
  1222  0045                     ??___flsub:	
  1223                           ; 1 bytes @ 0x25
  1224                           
  1225                           
  1226                           	psect	maintext
  1227  1AB4                     __pmaintext:	
  1228                           ; 1 bytes @ 0x25
  1229 ;;
  1230 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1231 ;;
  1232 ;; *************** function _main *****************
  1233 ;; Defined at:
  1234 ;;		line 112 in file "newmain.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : B00/0
  1245 ;;		On exit  : B00/900
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0
  1250 ;;      Temps:          0       0       1       0       0
  1251 ;;      Totals:         0       0       1       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels required when called: 8
  1254 ;; This function calls:
  1255 ;;		_LCDGoto
  1256 ;;		_LCDPutStr
  1257 ;;		_config
  1258 ;;		_sprintf
  1259 ;; This function is called by:
  1260 ;;		Startup code after reset
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264  1AB4                     _main:	
  1265                           ;psect for function _main
  1266                           
  1267                           
  1268                           ;newmain.c: 114:     config();
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272  1AB4  160A  118A  20A4  160A  158A  	fcall	_config
  1273  1AB9                     l62:	
  1274                           ;newmain.c: 115:     while(1)
  1275                           
  1276                           
  1277                           ;newmain.c: 116:     {;newmain.c: 117:         LCDGoto(0,0);
  1278  1AB9  01A6               	clrf	LCDGoto@ln^(0+128)
  1279  1ABA  3000               	movlw	0
  1280  1ABB  160A  158A  2236  160A  158A  	fcall	_LCDGoto
  1281                           
  1282                           ;newmain.c: 118:         sprintf(buffer," %0.3f   %u ", Velocity, DeltaPulse);
  1283  1AC0  3091               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1284  1AC1  1683               	bsf	3,5	;RP0=1, select bank1
  1285  1AC2  1303               	bcf	3,6	;RP1=0, select bank1
  1286  1AC3  00EE               	movwf	??_main^(0+128)
  1287  1AC4  086E               	movf	??_main^(0+128),w
  1288  1AC5  1703               	bsf	3,6	;RP1=1, select bank3
  1289  1AC6  009C               	movwf	sprintf@f^(0+384)
  1290  1AC7  0846               	movf	(_Velocity+3)^(0+384),w
  1291  1AC8  00A0               	movwf	((?_sprintf+3)^(0+384)+1)
  1292  1AC9  0845               	movf	(_Velocity+2)^(0+384),w
  1293  1ACA  009F               	movwf	((?_sprintf+2)^(0+384)+1)
  1294  1ACB  0844               	movf	(_Velocity+1)^(0+384),w
  1295  1ACC  009E               	movwf	((?_sprintf+1)^(0+384)+1)
  1296  1ACD  0843               	movf	_Velocity^(0+384),w
  1297  1ACE  009D               	movwf	(?_sprintf^(0+384)+1)
  1298  1ACF  1283               	bcf	3,5	;RP0=0, select bank0
  1299  1AD0  1303               	bcf	3,6	;RP1=0, select bank0
  1300  1AD1  084A               	movf	_DeltaPulse+1,w
  1301  1AD2  1683               	bsf	3,5	;RP0=1, select bank3
  1302  1AD3  1703               	bsf	3,6	;RP1=1, select bank3
  1303  1AD4  00A2               	movwf	((?_sprintf+1)^(0+384)+5)
  1304  1AD5  1283               	bcf	3,5	;RP0=0, select bank0
  1305  1AD6  1303               	bcf	3,6	;RP1=0, select bank0
  1306  1AD7  0849               	movf	_DeltaPulse,w
  1307  1AD8  1683               	bsf	3,5	;RP0=1, select bank3
  1308  1AD9  1703               	bsf	3,6	;RP1=1, select bank3
  1309  1ADA  00A1               	movwf	(?_sprintf^(0+384)+5)
  1310  1ADB  30C7               	movlw	(low (_buffer| (0+256)))& (0+255)
  1311  1ADC  120A  118A  202F  160A  158A  	fcall	_sprintf
  1312                           
  1313                           ;newmain.c: 119:         LCDPutStr(buffer);
  1314  1AE1  30C7               	movlw	(low (_buffer| (0+256)))& (0+255)
  1315  1AE2  120A  158A  2003  160A  158A  	fcall	_LCDPutStr
  1316  1AE7  2AB9               	goto	l62
  1317  1AE8                     __end_of_main:
  1318                           
  1319                           	psect	text1
  1320  002F                     __ptext1:	
  1321 ;; *************** function _sprintf *****************
  1322 ;; Defined at:
  1323 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  sp              1    wreg     PTR unsigned char 
  1326 ;;		 -> buffer(10), 
  1327 ;;  f               1   12[BANK3 ] PTR const unsigned char 
  1328 ;;		 -> STR_1(13), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  sp              1   49[BANK3 ] PTR unsigned char 
  1331 ;;		 -> buffer(10), 
  1332 ;;  fval            4   43[BANK3 ] PTR unsigned char 
  1333 ;;  tmpval          4   33[BANK3 ] struct .
  1334 ;;  val             4   29[BANK3 ] unsigned long 
  1335 ;;  prec            2   47[BANK3 ] int 
  1336 ;;  width           2   41[BANK3 ] int 
  1337 ;;  flag            2   39[BANK3 ] unsigned short 
  1338 ;;  eexp            2   37[BANK3 ] int 
  1339 ;;  cp              2    0        PTR const unsigned char 
  1340 ;;  len             2    0        unsigned int 
  1341 ;;  c               1   50[BANK3 ] unsigned char 
  1342 ;;  ap              1   28[BANK3 ] PTR void [1]
  1343 ;;		 -> ?_sprintf(2), 
  1344 ;;  d               1    0        unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2   12[BANK3 ] int 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 300/300
  1351 ;;		On exit  : B00/B00
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1354 ;;      Params:         0       0       0       7       0
  1355 ;;      Locals:         0       0       0      27       0
  1356 ;;      Temps:          0       0       0       5       0
  1357 ;;      Totals:         0       0       0      39       0
  1358 ;;Total ram usage:       39 bytes
  1359 ;; Hardware stack levels used: 1
  1360 ;; Hardware stack levels required when called: 7
  1361 ;; This function calls:
  1362 ;;		___awdiv
  1363 ;;		___fladd
  1364 ;;		___fleq
  1365 ;;		___flge
  1366 ;;		___flmul
  1367 ;;		___flneg
  1368 ;;		___flsub
  1369 ;;		___fltol
  1370 ;;		___lldiv
  1371 ;;		___llmod
  1372 ;;		___wmul
  1373 ;;		___xxtofl
  1374 ;;		__div_to_l_
  1375 ;;		__tdiv_to_l_
  1376 ;;		_fround
  1377 ;;		_isdigit
  1378 ;;		_scale
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384  002F                     _sprintf:	
  1385                           ;psect for function _sprintf
  1386                           
  1387                           
  1388                           ;incstack = 0
  1389 ;; using string table level
  1390                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1391                           ;sprintf@sp stored from wreg
  1392  002F  00C1               	movwf	sprintf@sp^(0+384)
  1393                           
  1394                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  1395  0030  309D               	movlw	(low ((?_sprintf| (0+256)+1)))& (0+255)
  1396  0031  00A3               	movwf	??_sprintf^(0+384)
  1397  0032  0823               	movf	??_sprintf^(0+384),w
  1398  0033  00AC               	movwf	sprintf@ap^(0+384)
  1399  0034                     l5230:	
  1400                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1401                           
  1402                           
  1403                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1404  0034  3001               	movlw	1
  1405  0035  079C               	addwf	sprintf@f^(0+384),f
  1406  0036  30FF               	movlw	-1
  1407  0037  071C               	addwf	sprintf@f^(0+384),w
  1408  0038  0084               	movwf	4
  1409  0039  160A  118A  2000  120A  118A  	fcall	stringdir
  1410  003E  00A3               	movwf	??_sprintf^(0+384)
  1411  003F  0823               	movf	??_sprintf^(0+384),w
  1412  0040  00C2               	movwf	sprintf@c^(0+384)
  1413  0041  0842               	movf	sprintf@c^(0+384),w
  1414  0042  1903               	btfsc	3,2
  1415  0043  2F4F               	goto	L12
  1416                           
  1417                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1418  0044  3025               	movlw	37
  1419  0045  0642               	xorwf	sprintf@c^(0+384),w
  1420  0046  1903               	btfsc	3,2
  1421  0047  2854               	goto	l4922
  1422                           
  1423                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1424  0048  0842               	movf	sprintf@c^(0+384),w
  1425  0049  00A3               	movwf	??_sprintf^(0+384)
  1426  004A  0841               	movf	sprintf@sp^(0+384),w
  1427  004B  0084               	movwf	4
  1428  004C  0823               	movf	??_sprintf^(0+384),w
  1429  004D  1783               	bsf	3,7	;select IRP bank2
  1430  004E  0080               	movwf	0
  1431  004F  3001               	movlw	1
  1432  0050  00A3               	movwf	??_sprintf^(0+384)
  1433  0051  0823               	movf	??_sprintf^(0+384),w
  1434  0052  07C1               	addwf	sprintf@sp^(0+384),f
  1435                           
  1436                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
  1437  0053  2834               	goto	l5230
  1438  0054                     l4922:
  1439                           
  1440                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1441  0054  01B9               	clrf	sprintf@width^(0+384)
  1442  0055  01BA               	clrf	(sprintf@width+1)^(0+384)
  1443                           
  1444                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1445  0056  01B7               	clrf	sprintf@flag^(0+384)
  1446  0057  01B8               	clrf	(sprintf@flag+1)^(0+384)
  1447  0058  285E               	goto	l4928
  1448  0059                     l244:	
  1449                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1450                           
  1451                           
  1452                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1453  0059  1537               	bsf	sprintf@flag^(0+384),2
  1454                           
  1455                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 598:     f++;
  1456  005A  3001               	movlw	1
  1457  005B  00A3               	movwf	??_sprintf^(0+384)
  1458  005C  0823               	movf	??_sprintf^(0+384),w
  1459  005D  079C               	addwf	sprintf@f^(0+384),f
  1460  005E                     l4928:	
  1461                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1462                           
  1463  005E  081C               	movf	sprintf@f^(0+384),w
  1464  005F  0084               	movwf	4
  1465  0060  160A  118A  2000  120A  118A  	fcall	stringdir
  1466  0065  00A3               	movwf	??_sprintf^(0+384)
  1467  0066  01A4               	clrf	(??_sprintf^(0+384)+1)
  1468                           
  1469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1470                           ; Switch size 1, requested type "simple"
  1471                           ; Number of cases is 1, Range of values is 0 to 0
  1472                           ; switch strategies available:
  1473                           ; Name         Instructions Cycles
  1474                           ; simple_byte            4     3 (average)
  1475                           ; direct_byte           11     8 (fixed)
  1476                           ; jumptable            260     6 (fixed)
  1477                           ;	Chosen strategy is simple_byte
  1478  0067  0824               	movf	(??_sprintf+1)^(0+384),w
  1479  0068  3A00               	xorlw	0	; case 0
  1480  0069  1903               	skipnz
  1481  006A  286C               	goto	l5322
  1482  006B  2871               	goto	l4930
  1483  006C                     l5322:
  1484                           
  1485                           ; Switch size 1, requested type "simple"
  1486                           ; Number of cases is 1, Range of values is 48 to 48
  1487                           ; switch strategies available:
  1488                           ; Name         Instructions Cycles
  1489                           ; simple_byte            4     3 (average)
  1490                           ; direct_byte           14    11 (fixed)
  1491                           ; jumptable            263     9 (fixed)
  1492                           ;	Chosen strategy is simple_byte
  1493  006C  0823               	movf	??_sprintf^(0+384),w
  1494  006D  3A30               	xorlw	48	; case 48
  1495  006E  1903               	skipnz
  1496  006F  2859               	goto	l244
  1497  0070  2871               	goto	l4930
  1498  0071                     l4930:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1501  0071  081C               	movf	sprintf@f^(0+384),w
  1502  0072  0084               	movwf	4
  1503  0073  160A  118A  2000  120A  118A  	fcall	stringdir
  1504  0078  160A  158A  217C  120A  118A  	fcall	_isdigit
  1505  007D  1C03               	btfss	3,0
  1506  007E  28C0               	goto	l4942
  1507                           
  1508                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1509  007F  1703               	bsf	3,6	;RP1=1, select bank3
  1510  0080  01B9               	clrf	sprintf@width^(0+384)
  1511  0081  01BA               	clrf	(sprintf@width+1)^(0+384)
  1512  0082                     l4934:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1515  0082  300A               	movlw	10
  1516  0083  1303               	bcf	3,6	;RP1=0, select bank1
  1517  0084  00A0               	movwf	___wmul@multiplier^(0+128)
  1518  0085  3000               	movlw	0
  1519  0086  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  1520  0087  1703               	bsf	3,6	;RP1=1, select bank3
  1521  0088  083A               	movf	(sprintf@width+1)^(0+384),w
  1522  0089  1303               	bcf	3,6	;RP1=0, select bank1
  1523  008A  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  1524  008B  1703               	bsf	3,6	;RP1=1, select bank3
  1525  008C  0839               	movf	sprintf@width^(0+384),w
  1526  008D  1303               	bcf	3,6	;RP1=0, select bank1
  1527  008E  00A2               	movwf	___wmul@multiplicand^(0+128)
  1528  008F  160A  158A  218B  120A  118A  	fcall	___wmul
  1529  0094  0821               	movf	(?___wmul+1)^(0+128),w
  1530  0095  1703               	bsf	3,6	;RP1=1, select bank3
  1531  0096  00BA               	movwf	(sprintf@width+1)^(0+384)
  1532  0097  1303               	bcf	3,6	;RP1=0, select bank1
  1533  0098  0820               	movf	?___wmul^(0+128),w
  1534  0099  1703               	bsf	3,6	;RP1=1, select bank3
  1535  009A  00B9               	movwf	sprintf@width^(0+384)
  1536                           
  1537                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1538  009B  081C               	movf	sprintf@f^(0+384),w
  1539  009C  0084               	movwf	4
  1540  009D  160A  118A  2000  120A  118A  	fcall	stringdir
  1541  00A2  3ED0               	addlw	208
  1542  00A3  00A3               	movwf	??_sprintf^(0+384)
  1543  00A4  30FF               	movlw	255
  1544  00A5  1803               	skipnc
  1545  00A6  3000               	movlw	0
  1546  00A7  00A4               	movwf	(??_sprintf^(0+384)+1)
  1547  00A8  0823               	movf	??_sprintf^(0+384),w
  1548  00A9  07B9               	addwf	sprintf@width^(0+384),f
  1549  00AA  1803               	skipnc
  1550  00AB  0ABA               	incf	(sprintf@width+1)^(0+384),f
  1551  00AC  0824               	movf	(??_sprintf+1)^(0+384),w
  1552  00AD  07BA               	addwf	(sprintf@width+1)^(0+384),f
  1553  00AE  3001               	movlw	1
  1554  00AF  00A3               	movwf	??_sprintf^(0+384)
  1555  00B0  0823               	movf	??_sprintf^(0+384),w
  1556  00B1  079C               	addwf	sprintf@f^(0+384),f
  1557                           
  1558                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1559  00B2  081C               	movf	sprintf@f^(0+384),w
  1560  00B3  0084               	movwf	4
  1561  00B4  160A  118A  2000  120A  118A  	fcall	stringdir
  1562  00B9  160A  158A  217C  120A  118A  	fcall	_isdigit
  1563  00BE  1803               	btfsc	3,0
  1564  00BF  2882               	goto	l4934
  1565  00C0                     l4942:
  1566                           
  1567                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  1568  00C0  1703               	bsf	3,6	;RP1=1, select bank3
  1569  00C1  081C               	movf	sprintf@f^(0+384),w
  1570  00C2  0084               	movwf	4
  1571  00C3  160A  118A  2000  120A  118A  	fcall	stringdir
  1572  00C8  3A2E               	xorlw	46
  1573  00C9  1D03               	skipz
  1574  00CA  2910               	goto	l4958
  1575                           
  1576                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  1577  00CB  1738               	bsf	(sprintf@flag^(0+384)+1),6
  1578                           
  1579                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 630:    f++;
  1580  00CC  3001               	movlw	1
  1581  00CD  00A3               	movwf	??_sprintf^(0+384)
  1582  00CE  0823               	movf	??_sprintf^(0+384),w
  1583  00CF  079C               	addwf	sprintf@f^(0+384),f
  1584                           
  1585                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  1586  00D0  01BF               	clrf	sprintf@prec^(0+384)
  1587  00D1  01C0               	clrf	(sprintf@prec+1)^(0+384)
  1588  00D2                     l4956:	
  1589                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  1590                           
  1591                           
  1592                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  1593  00D2  081C               	movf	sprintf@f^(0+384),w
  1594  00D3  0084               	movwf	4
  1595  00D4  160A  118A  2000  120A  118A  	fcall	stringdir
  1596  00D9  160A  158A  217C  120A  118A  	fcall	_isdigit
  1597  00DE  1C03               	btfss	3,0
  1598  00DF  291B               	goto	l4966
  1599                           
  1600                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  1601  00E0  300A               	movlw	10
  1602  00E1  00A0               	movwf	___wmul@multiplier^(0+128)
  1603  00E2  3000               	movlw	0
  1604  00E3  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  1605  00E4  1703               	bsf	3,6	;RP1=1, select bank3
  1606  00E5  0840               	movf	(sprintf@prec+1)^(0+384),w
  1607  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  1608  00E7  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  1609  00E8  1703               	bsf	3,6	;RP1=1, select bank3
  1610  00E9  083F               	movf	sprintf@prec^(0+384),w
  1611  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  1612  00EB  00A2               	movwf	___wmul@multiplicand^(0+128)
  1613  00EC  160A  158A  218B  120A  118A  	fcall	___wmul
  1614  00F1  0821               	movf	(?___wmul+1)^(0+128),w
  1615  00F2  1703               	bsf	3,6	;RP1=1, select bank3
  1616  00F3  00C0               	movwf	(sprintf@prec+1)^(0+384)
  1617  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1618  00F5  0820               	movf	?___wmul^(0+128),w
  1619  00F6  1703               	bsf	3,6	;RP1=1, select bank3
  1620  00F7  00BF               	movwf	sprintf@prec^(0+384)
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  1623  00F8  081C               	movf	sprintf@f^(0+384),w
  1624  00F9  0084               	movwf	4
  1625  00FA  160A  118A  2000  120A  118A  	fcall	stringdir
  1626  00FF  3ED0               	addlw	208
  1627  0100  00A3               	movwf	??_sprintf^(0+384)
  1628  0101  30FF               	movlw	255
  1629  0102  1803               	skipnc
  1630  0103  3000               	movlw	0
  1631  0104  00A4               	movwf	(??_sprintf^(0+384)+1)
  1632  0105  0823               	movf	??_sprintf^(0+384),w
  1633  0106  07BF               	addwf	sprintf@prec^(0+384),f
  1634  0107  1803               	skipnc
  1635  0108  0AC0               	incf	(sprintf@prec+1)^(0+384),f
  1636  0109  0824               	movf	(??_sprintf+1)^(0+384),w
  1637  010A  07C0               	addwf	(sprintf@prec+1)^(0+384),f
  1638  010B  3001               	movlw	1
  1639  010C  00A3               	movwf	??_sprintf^(0+384)
  1640  010D  0823               	movf	??_sprintf^(0+384),w
  1641  010E  079C               	addwf	sprintf@f^(0+384),f
  1642  010F  28D2               	goto	l4956
  1643  0110                     l4958:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  1646  0110  01BF               	clrf	sprintf@prec^(0+384)
  1647  0111  01C0               	clrf	(sprintf@prec+1)^(0+384)
  1648                           
  1649                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  1650  0112  1638               	bsf	(sprintf@flag^(0+384)+1),4
  1651  0113  291B               	goto	l4966
  1652  0114                     l259:	
  1653                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  1654                           
  1655                           
  1656                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  1657  0114  1538               	bsf	(sprintf@flag^(0+384)+1),2
  1658                           
  1659                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 690:    break;
  1660  0115  2939               	goto	l4968
  1661  0116                     l4962:
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
  1664  0116  30C0               	movlw	192
  1665  0117  04B7               	iorwf	sprintf@flag^(0+384),f
  1666  0118  3000               	movlw	0
  1667  0119  04B8               	iorwf	(sprintf@flag+1)^(0+384),f
  1668                           
  1669                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 845:    break;
  1670  011A  2939               	goto	l4968
  1671  011B                     l4966:
  1672  011B  3001               	movlw	1
  1673  011C  1703               	bsf	3,6	;RP1=1, select bank3
  1674  011D  079C               	addwf	sprintf@f^(0+384),f
  1675  011E  30FF               	movlw	-1
  1676  011F  071C               	addwf	sprintf@f^(0+384),w
  1677  0120  0084               	movwf	4
  1678  0121  160A  118A  2000  120A  118A  	fcall	stringdir
  1679  0126  00C2               	movwf	sprintf@c^(0+384)
  1680  0127  00A3               	movwf	??_sprintf^(0+384)
  1681  0128  01A4               	clrf	(??_sprintf^(0+384)+1)
  1682                           
  1683                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1684                           ; Switch size 1, requested type "simple"
  1685                           ; Number of cases is 1, Range of values is 0 to 0
  1686                           ; switch strategies available:
  1687                           ; Name         Instructions Cycles
  1688                           ; simple_byte            4     3 (average)
  1689                           ; direct_byte           11     8 (fixed)
  1690                           ; jumptable            260     6 (fixed)
  1691                           ;	Chosen strategy is simple_byte
  1692  0129  0824               	movf	(??_sprintf+1)^(0+384),w
  1693  012A  3A00               	xorlw	0	; case 0
  1694  012B  1903               	skipnz
  1695  012C  292E               	goto	l5324
  1696  012D  2834               	goto	l5230
  1697  012E                     l5324:
  1698                           
  1699                           ; Switch size 1, requested type "simple"
  1700                           ; Number of cases is 3, Range of values is 0 to 117
  1701                           ; switch strategies available:
  1702                           ; Name         Instructions Cycles
  1703                           ; simple_byte           10     6 (average)
  1704                           ; jumptable            260     6 (fixed)
  1705                           ;	Chosen strategy is simple_byte
  1706  012E  0823               	movf	??_sprintf^(0+384),w
  1707  012F  3A00               	xorlw	0	; case 0
  1708  0130  1903               	skipnz
  1709  0131  2F4F               	goto	L12
  1710  0132  3A66               	xorlw	102	; case 102
  1711  0133  1903               	skipnz
  1712  0134  2914               	goto	l259
  1713  0135  3A13               	xorlw	19	; case 117
  1714  0136  1903               	skipnz
  1715  0137  2916               	goto	l4962
  1716  0138  2834               	goto	l5230
  1717  0139                     l4968:
  1718                           
  1719                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  1720  0139  3000               	movlw	0
  1721  013A  0537               	andwf	sprintf@flag^(0+384),w
  1722  013B  00A3               	movwf	??_sprintf^(0+384)
  1723  013C  3007               	movlw	7
  1724  013D  0538               	andwf	(sprintf@flag+1)^(0+384),w
  1725  013E  00A4               	movwf	(??_sprintf+1)^(0+384)
  1726  013F  0823               	movf	??_sprintf^(0+384),w
  1727  0140  0424               	iorwf	(??_sprintf^(0+384)+1),w
  1728  0141  1903               	btfsc	3,2
  1729  0142  2EDB               	goto	l5142
  1730                           
  1731                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  1732  0143  1E38               	btfss	(sprintf@flag+1)^(0+384),4
  1733  0144  2949               	goto	l4974
  1734                           
  1735                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  1736  0145  3006               	movlw	6
  1737  0146  00BF               	movwf	sprintf@prec^(0+384)
  1738  0147  3000               	movlw	0
  1739  0148  00C0               	movwf	(sprintf@prec^(0+384)+1)
  1740  0149                     l4974:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  1743  0149  082C               	movf	sprintf@ap^(0+384),w
  1744  014A  0084               	movwf	4
  1745  014B  1783               	bsf	3,7	;select IRP bank2
  1746  014C  0800               	movf	0,w
  1747  014D  00BB               	movwf	sprintf@fval^(0+384)
  1748  014E  0A84               	incf	4,f
  1749  014F  0800               	movf	0,w
  1750  0150  00BC               	movwf	(sprintf@fval+1)^(0+384)
  1751  0151  0A84               	incf	4,f
  1752  0152  0800               	movf	0,w
  1753  0153  00BD               	movwf	(sprintf@fval+2)^(0+384)
  1754  0154  0A84               	incf	4,f
  1755  0155  0800               	movf	0,w
  1756  0156  00BE               	movwf	(sprintf@fval+3)^(0+384)
  1757  0157  3004               	movlw	4
  1758  0158  00A3               	movwf	??_sprintf^(0+384)
  1759  0159  0823               	movf	??_sprintf^(0+384),w
  1760  015A  07AC               	addwf	sprintf@ap^(0+384),f
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  1763  015B  083E               	movf	(sprintf@fval+3)^(0+384),w
  1764  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1765  015D  00A3               	movwf	(___flge@ff1+3)^(0+128)
  1766  015E  1703               	bsf	3,6	;RP1=1, select bank3
  1767  015F  083D               	movf	(sprintf@fval+2)^(0+384),w
  1768  0160  1303               	bcf	3,6	;RP1=0, select bank1
  1769  0161  00A2               	movwf	(___flge@ff1+2)^(0+128)
  1770  0162  1703               	bsf	3,6	;RP1=1, select bank3
  1771  0163  083C               	movf	(sprintf@fval+1)^(0+384),w
  1772  0164  1303               	bcf	3,6	;RP1=0, select bank1
  1773  0165  00A1               	movwf	(___flge@ff1+1)^(0+128)
  1774  0166  1703               	bsf	3,6	;RP1=1, select bank3
  1775  0167  083B               	movf	sprintf@fval^(0+384),w
  1776  0168  1303               	bcf	3,6	;RP1=0, select bank1
  1777  0169  00A0               	movwf	___flge@ff1^(0+128)
  1778  016A  3000               	movlw	0
  1779  016B  00A7               	movwf	(___flge@ff2+3)^(0+128)
  1780  016C  3000               	movlw	0
  1781  016D  00A6               	movwf	(___flge@ff2+2)^(0+128)
  1782  016E  3000               	movlw	0
  1783  016F  00A5               	movwf	(___flge@ff2+1)^(0+128)
  1784  0170  3000               	movlw	0
  1785  0171  00A4               	movwf	___flge@ff2^(0+128)
  1786  0172  160A  158A  2627  120A  118A  	fcall	___flge
  1787  0177  1803               	btfsc	3,0
  1788  0178  29A1               	goto	l4984
  1789                           
  1790                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  1791  0179  1703               	bsf	3,6	;RP1=1, select bank3
  1792  017A  083E               	movf	(sprintf@fval+3)^(0+384),w
  1793  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1794  017C  00A3               	movwf	(___flneg@f1+3)^(0+128)
  1795  017D  1703               	bsf	3,6	;RP1=1, select bank3
  1796  017E  083D               	movf	(sprintf@fval+2)^(0+384),w
  1797  017F  1303               	bcf	3,6	;RP1=0, select bank1
  1798  0180  00A2               	movwf	(___flneg@f1+2)^(0+128)
  1799  0181  1703               	bsf	3,6	;RP1=1, select bank3
  1800  0182  083C               	movf	(sprintf@fval+1)^(0+384),w
  1801  0183  1303               	bcf	3,6	;RP1=0, select bank1
  1802  0184  00A1               	movwf	(___flneg@f1+1)^(0+128)
  1803  0185  1703               	bsf	3,6	;RP1=1, select bank3
  1804  0186  083B               	movf	sprintf@fval^(0+384),w
  1805  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1806  0188  00A0               	movwf	___flneg@f1^(0+128)
  1807  0189  160A  158A  2169  120A  118A  	fcall	___flneg
  1808  018E  0823               	movf	(?___flneg+3)^(0+128),w
  1809  018F  1703               	bsf	3,6	;RP1=1, select bank3
  1810  0190  00BE               	movwf	(sprintf@fval+3)^(0+384)
  1811  0191  1303               	bcf	3,6	;RP1=0, select bank1
  1812  0192  0822               	movf	(?___flneg+2)^(0+128),w
  1813  0193  1703               	bsf	3,6	;RP1=1, select bank3
  1814  0194  00BD               	movwf	(sprintf@fval+2)^(0+384)
  1815  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1816  0196  0821               	movf	(?___flneg+1)^(0+128),w
  1817  0197  1703               	bsf	3,6	;RP1=1, select bank3
  1818  0198  00BC               	movwf	(sprintf@fval+1)^(0+384)
  1819  0199  1303               	bcf	3,6	;RP1=0, select bank1
  1820  019A  0820               	movf	?___flneg^(0+128),w
  1821  019B  1703               	bsf	3,6	;RP1=1, select bank3
  1822  019C  00BB               	movwf	sprintf@fval^(0+384)
  1823                           
  1824                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  1825  019D  3003               	movlw	3
  1826  019E  04B7               	iorwf	sprintf@flag^(0+384),f
  1827  019F  3000               	movlw	0
  1828  01A0  04B8               	iorwf	(sprintf@flag+1)^(0+384),f
  1829  01A1                     l4984:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  1832  01A1  1703               	bsf	3,6	;RP1=1, select bank3
  1833  01A2  01B5               	clrf	sprintf@eexp^(0+384)
  1834  01A3  01B6               	clrf	(sprintf@eexp+1)^(0+384)
  1835                           
  1836                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  1837  01A4  083E               	movf	(sprintf@fval+3)^(0+384),w
  1838  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  1839  01A6  00A3               	movwf	(___fleq@ff1+3)^(0+128)
  1840  01A7  1703               	bsf	3,6	;RP1=1, select bank3
  1841  01A8  083D               	movf	(sprintf@fval+2)^(0+384),w
  1842  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1843  01AA  00A2               	movwf	(___fleq@ff1+2)^(0+128)
  1844  01AB  1703               	bsf	3,6	;RP1=1, select bank3
  1845  01AC  083C               	movf	(sprintf@fval+1)^(0+384),w
  1846  01AD  1303               	bcf	3,6	;RP1=0, select bank1
  1847  01AE  00A1               	movwf	(___fleq@ff1+1)^(0+128)
  1848  01AF  1703               	bsf	3,6	;RP1=1, select bank3
  1849  01B0  083B               	movf	sprintf@fval^(0+384),w
  1850  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  1851  01B2  00A0               	movwf	___fleq@ff1^(0+128)
  1852  01B3  3000               	movlw	0
  1853  01B4  00A7               	movwf	(___fleq@ff2+3)^(0+128)
  1854  01B5  3000               	movlw	0
  1855  01B6  00A6               	movwf	(___fleq@ff2+2)^(0+128)
  1856  01B7  3000               	movlw	0
  1857  01B8  00A5               	movwf	(___fleq@ff2+1)^(0+128)
  1858  01B9  3000               	movlw	0
  1859  01BA  00A4               	movwf	___fleq@ff2^(0+128)
  1860  01BB  160A  158A  23CD  120A  118A  	fcall	___fleq
  1861  01C0  1803               	btfsc	3,0
  1862  01C1  2AA0               	goto	l5012
  1863                           
  1864                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
  1865  01C2  1003               	clrc
  1866  01C3  1703               	bsf	3,6	;RP1=1, select bank3
  1867  01C4  0D3D               	rlf	(sprintf@fval+2)^(0+384),w
  1868  01C5  0D3E               	rlf	(sprintf@fval+3)^(0+384),w
  1869  01C6  3E82               	addlw	130
  1870  01C7  00B5               	movwf	sprintf@eexp^(0+384)
  1871  01C8  30FF               	movlw	255
  1872  01C9  1803               	skipnc
  1873  01CA  3000               	movlw	0
  1874  01CB  00B6               	movwf	(sprintf@eexp^(0+384)+1)
  1875                           
  1876                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  1877  01CC  30FF               	movlw	255
  1878  01CD  07B5               	addwf	sprintf@eexp^(0+384),f
  1879  01CE  1803               	skipnc
  1880  01CF  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  1881  01D0  30FF               	movlw	255
  1882  01D1  07B6               	addwf	(sprintf@eexp+1)^(0+384),f
  1883                           
  1884                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  1885  01D2  3003               	movlw	3
  1886  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  1887  01D4  00A0               	movwf	___wmul@multiplier^(0+128)
  1888  01D5  3000               	movlw	0
  1889  01D6  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  1890  01D7  1703               	bsf	3,6	;RP1=1, select bank3
  1891  01D8  0836               	movf	(sprintf@eexp+1)^(0+384),w
  1892  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1893  01DA  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  1894  01DB  1703               	bsf	3,6	;RP1=1, select bank3
  1895  01DC  0835               	movf	sprintf@eexp^(0+384),w
  1896  01DD  1303               	bcf	3,6	;RP1=0, select bank1
  1897  01DE  00A2               	movwf	___wmul@multiplicand^(0+128)
  1898  01DF  160A  158A  218B  120A  118A  	fcall	___wmul
  1899  01E4  0821               	movf	(?___wmul+1)^(0+128),w
  1900  01E5  1703               	bsf	3,6	;RP1=1, select bank3
  1901  01E6  00B6               	movwf	(sprintf@eexp+1)^(0+384)
  1902  01E7  1303               	bcf	3,6	;RP1=0, select bank1
  1903  01E8  0820               	movf	?___wmul^(0+128),w
  1904  01E9  1703               	bsf	3,6	;RP1=1, select bank3
  1905  01EA  00B5               	movwf	sprintf@eexp^(0+384)
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  1908  01EB  300A               	movlw	10
  1909  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1910  01ED  00A7               	movwf	___awdiv@divisor^(0+128)
  1911  01EE  3000               	movlw	0
  1912  01EF  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  1913  01F0  1703               	bsf	3,6	;RP1=1, select bank3
  1914  01F1  0836               	movf	(sprintf@eexp+1)^(0+384),w
  1915  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  1916  01F3  00AA               	movwf	(___awdiv@dividend+1)^(0+128)
  1917  01F4  1703               	bsf	3,6	;RP1=1, select bank3
  1918  01F5  0835               	movf	sprintf@eexp^(0+384),w
  1919  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1920  01F7  00A9               	movwf	___awdiv@dividend^(0+128)
  1921  01F8  160A  158A  2505  120A  118A  	fcall	___awdiv
  1922  01FD  0828               	movf	(?___awdiv+1)^(0+128),w
  1923  01FE  1703               	bsf	3,6	;RP1=1, select bank3
  1924  01FF  00B6               	movwf	(sprintf@eexp+1)^(0+384)
  1925  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1926  0201  0827               	movf	?___awdiv^(0+128),w
  1927  0202  1703               	bsf	3,6	;RP1=1, select bank3
  1928  0203  00B5               	movwf	sprintf@eexp^(0+384)
  1929                           
  1930                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  1931  0204  1FB6               	btfss	(sprintf@eexp+1)^(0+384),7
  1932  0205  2A0C               	goto	l5000
  1933                           
  1934                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  1935  0206  30FF               	movlw	255
  1936  0207  07B5               	addwf	sprintf@eexp^(0+384),f
  1937  0208  1803               	skipnc
  1938  0209  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  1939  020A  30FF               	movlw	255
  1940  020B  07B6               	addwf	(sprintf@eexp+1)^(0+384),f
  1941  020C                     l5000:
  1942                           
  1943                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  1944  020C  0335               	decf	sprintf@eexp^(0+384),w
  1945  020D  3AFF               	xorlw	255
  1946  020E  120A  158A  24D8  120A  118A  	fcall	_scale
  1947  0213  084D               	movf	(?_scale+3)^(0+128),w
  1948  0214  1703               	bsf	3,6	;RP1=1, select bank3
  1949  0215  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  1950  0216  1303               	bcf	3,6	;RP1=0, select bank1
  1951  0217  084C               	movf	(?_scale+2)^(0+128),w
  1952  0218  1703               	bsf	3,6	;RP1=1, select bank3
  1953  0219  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  1954  021A  1303               	bcf	3,6	;RP1=0, select bank1
  1955  021B  084B               	movf	(?_scale+1)^(0+128),w
  1956  021C  1703               	bsf	3,6	;RP1=1, select bank3
  1957  021D  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  1958  021E  1303               	bcf	3,6	;RP1=0, select bank1
  1959  021F  084A               	movf	?_scale^(0+128),w
  1960  0220  1703               	bsf	3,6	;RP1=1, select bank3
  1961  0221  00B1               	movwf	sprintf@tmpval^(0+384)
  1962                           
  1963                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  1964  0222  083E               	movf	(sprintf@fval+3)^(0+384),w
  1965  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1966  0224  00B3               	movwf	(___flmul@b+3)^(0+128)
  1967  0225  1703               	bsf	3,6	;RP1=1, select bank3
  1968  0226  083D               	movf	(sprintf@fval+2)^(0+384),w
  1969  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1970  0228  00B2               	movwf	(___flmul@b+2)^(0+128)
  1971  0229  1703               	bsf	3,6	;RP1=1, select bank3
  1972  022A  083C               	movf	(sprintf@fval+1)^(0+384),w
  1973  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1974  022C  00B1               	movwf	(___flmul@b+1)^(0+128)
  1975  022D  1703               	bsf	3,6	;RP1=1, select bank3
  1976  022E  083B               	movf	sprintf@fval^(0+384),w
  1977  022F  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0230  00B0               	movwf	___flmul@b^(0+128)
  1979  0231  1703               	bsf	3,6	;RP1=1, select bank3
  1980  0232  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  1981  0233  1303               	bcf	3,6	;RP1=0, select bank1
  1982  0234  00B7               	movwf	(___flmul@a+3)^(0+128)
  1983  0235  1703               	bsf	3,6	;RP1=1, select bank3
  1984  0236  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  1985  0237  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0238  00B6               	movwf	(___flmul@a+2)^(0+128)
  1987  0239  1703               	bsf	3,6	;RP1=1, select bank3
  1988  023A  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  1989  023B  1303               	bcf	3,6	;RP1=0, select bank1
  1990  023C  00B5               	movwf	(___flmul@a+1)^(0+128)
  1991  023D  1703               	bsf	3,6	;RP1=1, select bank3
  1992  023E  0831               	movf	sprintf@tmpval^(0+384),w
  1993  023F  1303               	bcf	3,6	;RP1=0, select bank1
  1994  0240  00B4               	movwf	___flmul@a^(0+128)
  1995  0241  120A  158A  21E3  120A  118A  	fcall	___flmul
  1996  0246  0833               	movf	(?___flmul+3)^(0+128),w
  1997  0247  1703               	bsf	3,6	;RP1=1, select bank3
  1998  0248  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  1999  0249  1303               	bcf	3,6	;RP1=0, select bank1
  2000  024A  0832               	movf	(?___flmul+2)^(0+128),w
  2001  024B  1703               	bsf	3,6	;RP1=1, select bank3
  2002  024C  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  2003  024D  1303               	bcf	3,6	;RP1=0, select bank1
  2004  024E  0831               	movf	(?___flmul+1)^(0+128),w
  2005  024F  1703               	bsf	3,6	;RP1=1, select bank3
  2006  0250  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  2007  0251  1303               	bcf	3,6	;RP1=0, select bank1
  2008  0252  0830               	movf	?___flmul^(0+128),w
  2009  0253  1703               	bsf	3,6	;RP1=1, select bank3
  2010  0254  00B1               	movwf	sprintf@tmpval^(0+384)
  2011                           
  2012                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  2013  0255  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  2014  0256  1303               	bcf	3,6	;RP1=0, select bank1
  2015  0257  00A3               	movwf	(___flge@ff1+3)^(0+128)
  2016  0258  1703               	bsf	3,6	;RP1=1, select bank3
  2017  0259  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  2018  025A  1303               	bcf	3,6	;RP1=0, select bank1
  2019  025B  00A2               	movwf	(___flge@ff1+2)^(0+128)
  2020  025C  1703               	bsf	3,6	;RP1=1, select bank3
  2021  025D  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  2022  025E  1303               	bcf	3,6	;RP1=0, select bank1
  2023  025F  00A1               	movwf	(___flge@ff1+1)^(0+128)
  2024  0260  1703               	bsf	3,6	;RP1=1, select bank3
  2025  0261  0831               	movf	sprintf@tmpval^(0+384),w
  2026  0262  1303               	bcf	3,6	;RP1=0, select bank1
  2027  0263  00A0               	movwf	___flge@ff1^(0+128)
  2028  0264  303F               	movlw	63
  2029  0265  00A7               	movwf	(___flge@ff2+3)^(0+128)
  2030  0266  3080               	movlw	128
  2031  0267  00A6               	movwf	(___flge@ff2+2)^(0+128)
  2032  0268  3000               	movlw	0
  2033  0269  00A5               	movwf	(___flge@ff2+1)^(0+128)
  2034  026A  3000               	movlw	0
  2035  026B  00A4               	movwf	___flge@ff2^(0+128)
  2036  026C  160A  158A  2627  120A  118A  	fcall	___flge
  2037  0271  1803               	btfsc	3,0
  2038  0272  2A7A               	goto	l5008
  2039                           
  2040                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  2041  0273  30FF               	movlw	255
  2042  0274  1703               	bsf	3,6	;RP1=1, select bank3
  2043  0275  07B5               	addwf	sprintf@eexp^(0+384),f
  2044  0276  1803               	skipnc
  2045  0277  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  2046  0278  30FF               	movlw	255
  2047  0279  2A9F               	goto	L1
  2048  027A                     l5008:
  2049  027A  1703               	bsf	3,6	;RP1=1, select bank3
  2050  027B  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  2051  027C  1303               	bcf	3,6	;RP1=0, select bank1
  2052  027D  00A3               	movwf	(___flge@ff1+3)^(0+128)
  2053  027E  1703               	bsf	3,6	;RP1=1, select bank3
  2054  027F  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  2055  0280  1303               	bcf	3,6	;RP1=0, select bank1
  2056  0281  00A2               	movwf	(___flge@ff1+2)^(0+128)
  2057  0282  1703               	bsf	3,6	;RP1=1, select bank3
  2058  0283  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  2059  0284  1303               	bcf	3,6	;RP1=0, select bank1
  2060  0285  00A1               	movwf	(___flge@ff1+1)^(0+128)
  2061  0286  1703               	bsf	3,6	;RP1=1, select bank3
  2062  0287  0831               	movf	sprintf@tmpval^(0+384),w
  2063  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2064  0289  00A0               	movwf	___flge@ff1^(0+128)
  2065  028A  3041               	movlw	65
  2066  028B  00A7               	movwf	(___flge@ff2+3)^(0+128)
  2067  028C  3020               	movlw	32
  2068  028D  00A6               	movwf	(___flge@ff2+2)^(0+128)
  2069  028E  3000               	movlw	0
  2070  028F  00A5               	movwf	(___flge@ff2+1)^(0+128)
  2071  0290  3000               	movlw	0
  2072  0291  00A4               	movwf	___flge@ff2^(0+128)
  2073  0292  160A  158A  2627  120A  118A  	fcall	___flge
  2074  0297  1C03               	btfss	3,0
  2075  0298  2AA0               	goto	l5012
  2076                           
  2077                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  2078  0299  3001               	movlw	1
  2079  029A  1703               	bsf	3,6	;RP1=1, select bank3
  2080  029B  07B5               	addwf	sprintf@eexp^(0+384),f
  2081  029C  1803               	skipnc
  2082  029D  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  2083  029E  3000               	movlw	0
  2084  029F                     L1:
  2085  029F  07B6               	addwf	(sprintf@eexp+1)^(0+384),f
  2086  02A0                     l5012:
  2087                           
  2088                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  2089  02A0  1703               	bsf	3,6	;RP1=1, select bank3
  2090  02A1  0840               	movf	(sprintf@prec+1)^(0+384),w
  2091  02A2  3A80               	xorlw	128
  2092  02A3  00FF               	movwf	127
  2093  02A4  3080               	movlw	128
  2094  02A5  027F               	subwf	127,w
  2095  02A6  1D03               	skipz
  2096  02A7  2AAA               	goto	u9185
  2097  02A8  300D               	movlw	13
  2098  02A9  023F               	subwf	sprintf@prec^(0+384),w
  2099  02AA                     u9185:
  2100  02AA  1803               	skipnc
  2101  02AB  2AE1               	goto	l5016
  2102                           
  2103                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  2104  02AC  1683               	bsf	3,5	;RP0=1, select bank3
  2105  02AD  1703               	bsf	3,6	;RP1=1, select bank3
  2106  02AE  083F               	movf	sprintf@prec^(0+384),w
  2107  02AF  120A  158A  2020  120A  118A  	fcall	_fround
  2108  02B4  084D               	movf	(?_fround+3)^(0+128),w
  2109  02B5  00E1               	movwf	(___fladd@b+3)^(0+128)
  2110  02B6  084C               	movf	(?_fround+2)^(0+128),w
  2111  02B7  00E0               	movwf	(___fladd@b+2)^(0+128)
  2112  02B8  084B               	movf	(?_fround+1)^(0+128),w
  2113  02B9  00DF               	movwf	(___fladd@b+1)^(0+128)
  2114  02BA  084A               	movf	?_fround^(0+128),w
  2115  02BB  00DE               	movwf	___fladd@b^(0+128)
  2116  02BC  1703               	bsf	3,6	;RP1=1, select bank3
  2117  02BD  083E               	movf	(sprintf@fval+3)^(0+384),w
  2118  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  2119  02BF  00E5               	movwf	(___fladd@a+3)^(0+128)
  2120  02C0  1703               	bsf	3,6	;RP1=1, select bank3
  2121  02C1  083D               	movf	(sprintf@fval+2)^(0+384),w
  2122  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  2123  02C3  00E4               	movwf	(___fladd@a+2)^(0+128)
  2124  02C4  1703               	bsf	3,6	;RP1=1, select bank3
  2125  02C5  083C               	movf	(sprintf@fval+1)^(0+384),w
  2126  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  2127  02C7  00E3               	movwf	(___fladd@a+1)^(0+128)
  2128  02C8  1703               	bsf	3,6	;RP1=1, select bank3
  2129  02C9  083B               	movf	sprintf@fval^(0+384),w
  2130  02CA  1303               	bcf	3,6	;RP1=0, select bank1
  2131  02CB  00E2               	movwf	___fladd@a^(0+128)
  2132  02CC  160A  118A  227A  120A  118A  	fcall	___fladd
  2133  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2134  02D2  0861               	movf	(?___fladd+3)^(0+128),w
  2135  02D3  1703               	bsf	3,6	;RP1=1, select bank3
  2136  02D4  00BE               	movwf	(sprintf@fval+3)^(0+384)
  2137  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  2138  02D6  0860               	movf	(?___fladd+2)^(0+128),w
  2139  02D7  1703               	bsf	3,6	;RP1=1, select bank3
  2140  02D8  00BD               	movwf	(sprintf@fval+2)^(0+384)
  2141  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  2142  02DA  085F               	movf	(?___fladd+1)^(0+128),w
  2143  02DB  1703               	bsf	3,6	;RP1=1, select bank3
  2144  02DC  00BC               	movwf	(sprintf@fval+1)^(0+384)
  2145  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  2146  02DE  085E               	movf	?___fladd^(0+128),w
  2147  02DF  1703               	bsf	3,6	;RP1=1, select bank3
  2148  02E0  00BB               	movwf	sprintf@fval^(0+384)
  2149  02E1                     l5016:
  2150                           
  2151                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2152  02E1  1683               	bsf	3,5	;RP0=1, select bank3
  2153  02E2  1703               	bsf	3,6	;RP1=1, select bank3
  2154  02E3  0836               	movf	(sprintf@eexp+1)^(0+384),w
  2155  02E4  3A80               	xorlw	128
  2156  02E5  00FF               	movwf	127
  2157  02E6  3080               	movlw	128
  2158  02E7  027F               	subwf	127,w
  2159  02E8  1D03               	skipz
  2160  02E9  2AEC               	goto	u9195
  2161  02EA  300A               	movlw	10
  2162  02EB  0235               	subwf	sprintf@eexp^(0+384),w
  2163  02EC                     u9195:
  2164  02EC  1803               	skipnc
  2165  02ED  2B35               	goto	l5024
  2166  02EE  1683               	bsf	3,5	;RP0=1, select bank3
  2167  02EF  1703               	bsf	3,6	;RP1=1, select bank3
  2168  02F0  083E               	movf	(sprintf@fval+3)^(0+384),w
  2169  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2170  02F2  00A3               	movwf	(___fleq@ff1+3)^(0+128)
  2171  02F3  1703               	bsf	3,6	;RP1=1, select bank3
  2172  02F4  083D               	movf	(sprintf@fval+2)^(0+384),w
  2173  02F5  1303               	bcf	3,6	;RP1=0, select bank1
  2174  02F6  00A2               	movwf	(___fleq@ff1+2)^(0+128)
  2175  02F7  1703               	bsf	3,6	;RP1=1, select bank3
  2176  02F8  083C               	movf	(sprintf@fval+1)^(0+384),w
  2177  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  2178  02FA  00A1               	movwf	(___fleq@ff1+1)^(0+128)
  2179  02FB  1703               	bsf	3,6	;RP1=1, select bank3
  2180  02FC  083B               	movf	sprintf@fval^(0+384),w
  2181  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  2182  02FE  00A0               	movwf	___fleq@ff1^(0+128)
  2183  02FF  3000               	movlw	0
  2184  0300  00A7               	movwf	(___fleq@ff2+3)^(0+128)
  2185  0301  3000               	movlw	0
  2186  0302  00A6               	movwf	(___fleq@ff2+2)^(0+128)
  2187  0303  3000               	movlw	0
  2188  0304  00A5               	movwf	(___fleq@ff2+1)^(0+128)
  2189  0305  3000               	movlw	0
  2190  0306  00A4               	movwf	___fleq@ff2^(0+128)
  2191  0307  160A  158A  23CD  120A  118A  	fcall	___fleq
  2192  030C  1803               	btfsc	3,0
  2193  030D  2BAF               	goto	l5038
  2194  030E  1703               	bsf	3,6	;RP1=1, select bank3
  2195  030F  083E               	movf	(sprintf@fval+3)^(0+384),w
  2196  0310  1303               	bcf	3,6	;RP1=0, select bank1
  2197  0311  00E0               	movwf	(___fltol@f1+3)^(0+128)
  2198  0312  1703               	bsf	3,6	;RP1=1, select bank3
  2199  0313  083D               	movf	(sprintf@fval+2)^(0+384),w
  2200  0314  1303               	bcf	3,6	;RP1=0, select bank1
  2201  0315  00DF               	movwf	(___fltol@f1+2)^(0+128)
  2202  0316  1703               	bsf	3,6	;RP1=1, select bank3
  2203  0317  083C               	movf	(sprintf@fval+1)^(0+384),w
  2204  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2205  0319  00DE               	movwf	(___fltol@f1+1)^(0+128)
  2206  031A  1703               	bsf	3,6	;RP1=1, select bank3
  2207  031B  083B               	movf	sprintf@fval^(0+384),w
  2208  031C  1303               	bcf	3,6	;RP1=0, select bank1
  2209  031D  00DD               	movwf	___fltol@f1^(0+128)
  2210  031E  160A  158A  25BC  120A  118A  	fcall	___fltol
  2211  0323  0860               	movf	(?___fltol+3)^(0+128),w
  2212  0324  045F               	iorwf	(?___fltol+2)^(0+128),w
  2213  0325  045E               	iorwf	(?___fltol+1)^(0+128),w
  2214  0326  045D               	iorwf	?___fltol^(0+128),w
  2215  0327  1D03               	skipz
  2216  0328  2BAF               	goto	l5038
  2217  0329  1703               	bsf	3,6	;RP1=1, select bank3
  2218  032A  0836               	movf	(sprintf@eexp+1)^(0+384),w
  2219  032B  3A80               	xorlw	128
  2220  032C  00FF               	movwf	127
  2221  032D  3080               	movlw	128
  2222  032E  027F               	subwf	127,w
  2223  032F  1D03               	skipz
  2224  0330  2B33               	goto	u9225
  2225  0331  3002               	movlw	2
  2226  0332  0235               	subwf	sprintf@eexp^(0+384),w
  2227  0333                     u9225:
  2228  0333  1C03               	skipc
  2229  0334  2BAF               	goto	l5038
  2230  0335                     l5024:
  2231                           
  2232                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  2233  0335  1683               	bsf	3,5	;RP0=1, select bank3
  2234  0336  1703               	bsf	3,6	;RP1=1, select bank3
  2235  0337  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  2236  0338  1303               	bcf	3,6	;RP1=0, select bank1
  2237  0339  00A3               	movwf	(___flge@ff1+3)^(0+128)
  2238  033A  1703               	bsf	3,6	;RP1=1, select bank3
  2239  033B  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  2240  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2241  033D  00A2               	movwf	(___flge@ff1+2)^(0+128)
  2242  033E  1703               	bsf	3,6	;RP1=1, select bank3
  2243  033F  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  2244  0340  1303               	bcf	3,6	;RP1=0, select bank1
  2245  0341  00A1               	movwf	(___flge@ff1+1)^(0+128)
  2246  0342  1703               	bsf	3,6	;RP1=1, select bank3
  2247  0343  0831               	movf	sprintf@tmpval^(0+384),w
  2248  0344  1303               	bcf	3,6	;RP1=0, select bank1
  2249  0345  00A0               	movwf	___flge@ff1^(0+128)
  2250  0346  3040               	movlw	64
  2251  0347  00A7               	movwf	(___flge@ff2+3)^(0+128)
  2252  0348  3089               	movlw	137
  2253  0349  00A6               	movwf	(___flge@ff2+2)^(0+128)
  2254  034A  3070               	movlw	112
  2255  034B  00A5               	movwf	(___flge@ff2+1)^(0+128)
  2256  034C  305F               	movlw	95
  2257  034D  00A4               	movwf	___flge@ff2^(0+128)
  2258  034E  160A  158A  2627  120A  118A  	fcall	___flge
  2259  0353  1803               	btfsc	3,0
  2260  0354  2B57               	goto	l5028
  2261                           
  2262                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  2263  0355  30F7               	movlw	247
  2264  0356  2B58               	goto	L2
  2265  0357                     l5028:	
  2266                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1148:      }else{
  2267                           
  2268                           
  2269                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  2270  0357  30F8               	movlw	248
  2271  0358                     L2:
  2272  0358  1703               	bsf	3,6	;RP1=1, select bank3
  2273  0359  07B5               	addwf	sprintf@eexp^(0+384),f
  2274  035A  1803               	skipnc
  2275  035B  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  2276  035C  30FF               	movlw	255
  2277  035D  07B6               	addwf	(sprintf@eexp+1)^(0+384),f
  2278                           
  2279                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  2280  035E  0835               	movf	sprintf@eexp^(0+384),w
  2281  035F  120A  158A  24D8  120A  118A  	fcall	_scale
  2282  0364  084D               	movf	(?_scale+3)^(0+128),w
  2283  0365  1703               	bsf	3,6	;RP1=1, select bank3
  2284  0366  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  2285  0367  1303               	bcf	3,6	;RP1=0, select bank1
  2286  0368  084C               	movf	(?_scale+2)^(0+128),w
  2287  0369  1703               	bsf	3,6	;RP1=1, select bank3
  2288  036A  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  2289  036B  1303               	bcf	3,6	;RP1=0, select bank1
  2290  036C  084B               	movf	(?_scale+1)^(0+128),w
  2291  036D  1703               	bsf	3,6	;RP1=1, select bank3
  2292  036E  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  2293  036F  1303               	bcf	3,6	;RP1=0, select bank1
  2294  0370  084A               	movf	?_scale^(0+128),w
  2295  0371  1703               	bsf	3,6	;RP1=1, select bank3
  2296  0372  00B1               	movwf	sprintf@tmpval^(0+384)
  2297  0373  083E               	movf	(sprintf@fval+3)^(0+384),w
  2298  0374  1303               	bcf	3,6	;RP1=0, select bank1
  2299  0375  00A3               	movwf	(__div_to_l_@f1+3)^(0+128)
  2300  0376  1703               	bsf	3,6	;RP1=1, select bank3
  2301  0377  083D               	movf	(sprintf@fval+2)^(0+384),w
  2302  0378  1303               	bcf	3,6	;RP1=0, select bank1
  2303  0379  00A2               	movwf	(__div_to_l_@f1+2)^(0+128)
  2304  037A  1703               	bsf	3,6	;RP1=1, select bank3
  2305  037B  083C               	movf	(sprintf@fval+1)^(0+384),w
  2306  037C  1303               	bcf	3,6	;RP1=0, select bank1
  2307  037D  00A1               	movwf	(__div_to_l_@f1+1)^(0+128)
  2308  037E  1703               	bsf	3,6	;RP1=1, select bank3
  2309  037F  083B               	movf	sprintf@fval^(0+384),w
  2310  0380  1303               	bcf	3,6	;RP1=0, select bank1
  2311  0381  00A0               	movwf	__div_to_l_@f1^(0+128)
  2312  0382  1703               	bsf	3,6	;RP1=1, select bank3
  2313  0383  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  2314  0384  1303               	bcf	3,6	;RP1=0, select bank1
  2315  0385  00A7               	movwf	(__div_to_l_@f2+3)^(0+128)
  2316  0386  1703               	bsf	3,6	;RP1=1, select bank3
  2317  0387  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  2318  0388  1303               	bcf	3,6	;RP1=0, select bank1
  2319  0389  00A6               	movwf	(__div_to_l_@f2+2)^(0+128)
  2320  038A  1703               	bsf	3,6	;RP1=1, select bank3
  2321  038B  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  2322  038C  1303               	bcf	3,6	;RP1=0, select bank1
  2323  038D  00A5               	movwf	(__div_to_l_@f2+1)^(0+128)
  2324  038E  1703               	bsf	3,6	;RP1=1, select bank3
  2325  038F  0831               	movf	sprintf@tmpval^(0+384),w
  2326  0390  1303               	bcf	3,6	;RP1=0, select bank1
  2327  0391  00A4               	movwf	__div_to_l_@f2^(0+128)
  2328  0392  160A  118A  20BD  120A  118A  	fcall	__div_to_l_
  2329  0397  0823               	movf	(?__div_to_l_+3)^(0+128),w
  2330  0398  1703               	bsf	3,6	;RP1=1, select bank3
  2331  0399  00B0               	movwf	(sprintf@val+3)^(0+384)
  2332  039A  1303               	bcf	3,6	;RP1=0, select bank1
  2333  039B  0822               	movf	(?__div_to_l_+2)^(0+128),w
  2334  039C  1703               	bsf	3,6	;RP1=1, select bank3
  2335  039D  00AF               	movwf	(sprintf@val+2)^(0+384)
  2336  039E  1303               	bcf	3,6	;RP1=0, select bank1
  2337  039F  0821               	movf	(?__div_to_l_+1)^(0+128),w
  2338  03A0  1703               	bsf	3,6	;RP1=1, select bank3
  2339  03A1  00AE               	movwf	(sprintf@val+1)^(0+384)
  2340  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  2341  03A3  0820               	movf	?__div_to_l_^(0+128),w
  2342  03A4  1703               	bsf	3,6	;RP1=1, select bank3
  2343  03A5  00AD               	movwf	sprintf@val^(0+384)
  2344                           
  2345                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  2346  03A6  3000               	movlw	0
  2347  03A7  00BE               	movwf	(sprintf@fval+3)^(0+384)
  2348  03A8  3000               	movlw	0
  2349  03A9  00BD               	movwf	(sprintf@fval+2)^(0+384)
  2350  03AA  3000               	movlw	0
  2351  03AB  00BC               	movwf	(sprintf@fval+1)^(0+384)
  2352  03AC  3000               	movlw	0
  2353  03AD  00BB               	movwf	sprintf@fval^(0+384)
  2354                           
  2355                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  2356  03AE  2C0F               	goto	l5044
  2357  03AF                     l5038:
  2358                           
  2359                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  2360  03AF  1683               	bsf	3,5	;RP0=1, select bank3
  2361  03B0  1703               	bsf	3,6	;RP1=1, select bank3
  2362  03B1  083E               	movf	(sprintf@fval+3)^(0+384),w
  2363  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  2364  03B3  00E0               	movwf	(___fltol@f1+3)^(0+128)
  2365  03B4  1703               	bsf	3,6	;RP1=1, select bank3
  2366  03B5  083D               	movf	(sprintf@fval+2)^(0+384),w
  2367  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2368  03B7  00DF               	movwf	(___fltol@f1+2)^(0+128)
  2369  03B8  1703               	bsf	3,6	;RP1=1, select bank3
  2370  03B9  083C               	movf	(sprintf@fval+1)^(0+384),w
  2371  03BA  1303               	bcf	3,6	;RP1=0, select bank1
  2372  03BB  00DE               	movwf	(___fltol@f1+1)^(0+128)
  2373  03BC  1703               	bsf	3,6	;RP1=1, select bank3
  2374  03BD  083B               	movf	sprintf@fval^(0+384),w
  2375  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  2376  03BF  00DD               	movwf	___fltol@f1^(0+128)
  2377  03C0  160A  158A  25BC  120A  118A  	fcall	___fltol
  2378  03C5  0860               	movf	(?___fltol+3)^(0+128),w
  2379  03C6  1703               	bsf	3,6	;RP1=1, select bank3
  2380  03C7  00B0               	movwf	(sprintf@val+3)^(0+384)
  2381  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  2382  03C9  085F               	movf	(?___fltol+2)^(0+128),w
  2383  03CA  1703               	bsf	3,6	;RP1=1, select bank3
  2384  03CB  00AF               	movwf	(sprintf@val+2)^(0+384)
  2385  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  2386  03CD  085E               	movf	(?___fltol+1)^(0+128),w
  2387  03CE  1703               	bsf	3,6	;RP1=1, select bank3
  2388  03CF  00AE               	movwf	(sprintf@val+1)^(0+384)
  2389  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  2390  03D1  085D               	movf	?___fltol^(0+128),w
  2391  03D2  1703               	bsf	3,6	;RP1=1, select bank3
  2392  03D3  00AD               	movwf	sprintf@val^(0+384)
  2393                           
  2394                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  2395  03D4  0830               	movf	(sprintf@val+3)^(0+384),w
  2396  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  2397  03D6  00A3               	movwf	(___xxtofl@val+3)^(0+128)
  2398  03D7  1703               	bsf	3,6	;RP1=1, select bank3
  2399  03D8  082F               	movf	(sprintf@val+2)^(0+384),w
  2400  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  2401  03DA  00A2               	movwf	(___xxtofl@val+2)^(0+128)
  2402  03DB  1703               	bsf	3,6	;RP1=1, select bank3
  2403  03DC  082E               	movf	(sprintf@val+1)^(0+384),w
  2404  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  2405  03DE  00A1               	movwf	(___xxtofl@val+1)^(0+128)
  2406  03DF  1703               	bsf	3,6	;RP1=1, select bank3
  2407  03E0  082D               	movf	sprintf@val^(0+384),w
  2408  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2409  03E2  00A0               	movwf	___xxtofl@val^(0+128)
  2410  03E3  3000               	movlw	0
  2411  03E4  160A  158A  275D  120A  118A  	fcall	___xxtofl
  2412  03E9  0823               	movf	(?___xxtofl+3)^(0+128),w
  2413  03EA  1703               	bsf	3,6	;RP1=1, select bank3
  2414  03EB  0097               	movwf	(___flsub@a+3)^(0+384)
  2415  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  2416  03ED  0822               	movf	(?___xxtofl+2)^(0+128),w
  2417  03EE  1703               	bsf	3,6	;RP1=1, select bank3
  2418  03EF  0096               	movwf	(___flsub@a+2)^(0+384)
  2419  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  2420  03F1  0821               	movf	(?___xxtofl+1)^(0+128),w
  2421  03F2  1703               	bsf	3,6	;RP1=1, select bank3
  2422  03F3  0095               	movwf	(___flsub@a+1)^(0+384)
  2423  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  2424  03F5  0820               	movf	?___xxtofl^(0+128),w
  2425  03F6  1703               	bsf	3,6	;RP1=1, select bank3
  2426  03F7  0094               	movwf	___flsub@a^(0+384)
  2427  03F8  083E               	movf	(sprintf@fval+3)^(0+384),w
  2428  03F9  009B               	movwf	(___flsub@b+3)^(0+384)
  2429  03FA  083D               	movf	(sprintf@fval+2)^(0+384),w
  2430  03FB  009A               	movwf	(___flsub@b+2)^(0+384)
  2431  03FC  083C               	movf	(sprintf@fval+1)^(0+384),w
  2432  03FD  0099               	movwf	(___flsub@b+1)^(0+384)
  2433  03FE  083B               	movf	sprintf@fval^(0+384),w
  2434  03FF  0098               	movwf	___flsub@b^(0+384)
  2435  0400  160A  158A  22E8  120A  118A  	fcall	___flsub
  2436  0405  0817               	movf	(?___flsub+3)^(0+384),w
  2437  0406  00BE               	movwf	(sprintf@fval+3)^(0+384)
  2438  0407  0816               	movf	(?___flsub+2)^(0+384),w
  2439  0408  00BD               	movwf	(sprintf@fval+2)^(0+384)
  2440  0409  0815               	movf	(?___flsub+1)^(0+384),w
  2441  040A  00BC               	movwf	(sprintf@fval+1)^(0+384)
  2442  040B  0814               	movf	?___flsub^(0+384),w
  2443  040C  00BB               	movwf	sprintf@fval^(0+384)
  2444                           
  2445                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  2446  040D  01B5               	clrf	sprintf@eexp^(0+384)
  2447  040E  01B6               	clrf	(sprintf@eexp+1)^(0+384)
  2448  040F                     l5044:
  2449                           
  2450                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2451  040F  01C2               	clrf	sprintf@c^(0+384)
  2452  0410  0AC2               	incf	sprintf@c^(0+384),f
  2453  0411                     l5050:
  2454                           
  2455                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  2456  0411  0842               	movf	sprintf@c^(0+384),w
  2457  0412  00A3               	movwf	??_sprintf^(0+384)
  2458  0413  3001               	movlw	1
  2459  0414                     u9245:
  2460  0414  1003               	clrc
  2461  0415  0DA3               	rlf	??_sprintf^(0+384),f
  2462  0416  3EFF               	addlw	-1
  2463  0417  1D03               	skipz
  2464  0418  2C14               	goto	u9245
  2465  0419  1003               	clrc
  2466  041A  0D23               	rlf	??_sprintf^(0+384),w
  2467  041B  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2468  041C  0084               	movwf	4
  2469  041D  160A  118A  2000  120A  118A  	fcall	stringdir
  2470  0422  00A4               	movwf	(??_sprintf+1)^(0+384)
  2471  0423  160A  118A  2000  120A  118A  	fcall	stringdir
  2472  0428  00A5               	movwf	((??_sprintf+1)^(0+384)+1)
  2473  0429  160A  118A  2000  120A  118A  	fcall	stringdir
  2474  042E  00A6               	movwf	((??_sprintf+1)^(0+384)+2)
  2475  042F  160A  118A  2000  120A  118A  	fcall	stringdir
  2476  0434  00A7               	movwf	((??_sprintf+1)^(0+384)+3)
  2477  0435  0827               	movf	(??_sprintf+4)^(0+384),w
  2478  0436  0230               	subwf	(sprintf@val+3)^(0+384),w
  2479  0437  1D03               	skipz
  2480  0438  2C43               	goto	u9255
  2481  0439  0826               	movf	(??_sprintf+3)^(0+384),w
  2482  043A  022F               	subwf	(sprintf@val+2)^(0+384),w
  2483  043B  1D03               	skipz
  2484  043C  2C43               	goto	u9255
  2485  043D  0825               	movf	(??_sprintf+2)^(0+384),w
  2486  043E  022E               	subwf	(sprintf@val+1)^(0+384),w
  2487  043F  1D03               	skipz
  2488  0440  2C43               	goto	u9255
  2489  0441  0824               	movf	(??_sprintf+1)^(0+384),w
  2490  0442  022D               	subwf	sprintf@val^(0+384),w
  2491  0443                     u9255:
  2492  0443  1C03               	btfss	3,0
  2493  0444  2C4D               	goto	l5056
  2494  0445  3001               	movlw	1
  2495  0446  00A3               	movwf	??_sprintf^(0+384)
  2496  0447  0823               	movf	??_sprintf^(0+384),w
  2497  0448  07C2               	addwf	sprintf@c^(0+384),f
  2498  0449  300A               	movlw	10
  2499  044A  0642               	xorwf	sprintf@c^(0+384),w
  2500  044B  1D03               	btfss	3,2
  2501  044C  2C11               	goto	l5050
  2502  044D                     l5056:
  2503                           
  2504                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1168:     width -
      +                          = prec + c + eexp;
  2505  044D  0842               	movf	sprintf@c^(0+384),w
  2506  044E  073F               	addwf	sprintf@prec^(0+384),w
  2507  044F  00A3               	movwf	??_sprintf^(0+384)
  2508  0450  0840               	movf	(sprintf@prec+1)^(0+384),w
  2509  0451  1803               	skipnc
  2510  0452  0A40               	incf	(sprintf@prec+1)^(0+384),w
  2511  0453  00A4               	movwf	(??_sprintf^(0+384)+1)
  2512  0454  0835               	movf	sprintf@eexp^(0+384),w
  2513  0455  0723               	addwf	??_sprintf^(0+384),w
  2514  0456  00A5               	movwf	(??_sprintf+2)^(0+384)
  2515  0457  0836               	movf	(sprintf@eexp+1)^(0+384),w
  2516  0458  1803               	skipnc
  2517  0459  0A36               	incf	(sprintf@eexp+1)^(0+384),w
  2518  045A  0724               	addwf	(??_sprintf+1)^(0+384),w
  2519  045B  00A6               	movwf	(??_sprintf+3)^(0+384)
  2520  045C  0825               	movf	(??_sprintf+2)^(0+384),w
  2521  045D  02B9               	subwf	sprintf@width^(0+384),f
  2522  045E  0826               	movf	(??_sprintf+3)^(0+384),w
  2523  045F  1C03               	skipc
  2524  0460  03BA               	decf	(sprintf@width+1)^(0+384),f
  2525  0461  02BA               	subwf	(sprintf@width+1)^(0+384),f
  2526                           
  2527                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1169:     if(
  2528  0462  083F               	movf	sprintf@prec^(0+384),w
  2529  0463  0440               	iorwf	(sprintf@prec+1)^(0+384),w
  2530  0464  1903               	btfsc	3,2
  2531  0465  2C6C               	goto	l5060
  2532                           
  2533                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1174:      width-
      +                          -;
  2534  0466  30FF               	movlw	255
  2535  0467  07B9               	addwf	sprintf@width^(0+384),f
  2536  0468  1803               	skipnc
  2537  0469  0ABA               	incf	(sprintf@width+1)^(0+384),f
  2538  046A  30FF               	movlw	255
  2539  046B  07BA               	addwf	(sprintf@width+1)^(0+384),f
  2540  046C                     l5060:
  2541                           
  2542                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1175:     if(flag
      +                           & 0x03)
  2543  046C  0837               	movf	sprintf@flag^(0+384),w
  2544  046D  3903               	andlw	3
  2545  046E  1903               	btfsc	3,2
  2546  046F  2C76               	goto	l5064
  2547                           
  2548                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1176:      width-
      +                          -;
  2549  0470  30FF               	movlw	255
  2550  0471  07B9               	addwf	sprintf@width^(0+384),f
  2551  0472  1803               	skipnc
  2552  0473  0ABA               	incf	(sprintf@width+1)^(0+384),f
  2553  0474  30FF               	movlw	255
  2554  0475  07BA               	addwf	(sprintf@width+1)^(0+384),f
  2555  0476                     l5064:
  2556                           
  2557                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1179:     if(flag
      +                           & 0x04) {
  2558  0476  1D37               	btfss	sprintf@flag^(0+384),2
  2559  0477  2CB9               	goto	l5086
  2560                           
  2561                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1183:      if(fla
      +                          g & 0x03)
  2562  0478  0837               	movf	sprintf@flag^(0+384),w
  2563  0479  3903               	andlw	3
  2564  047A  1903               	btfsc	3,2
  2565  047B  2C87               	goto	l5078
  2566                           
  2567                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1185:       ((*sp
      +                          ++ = ('-')));
  2568  047C  302D               	movlw	45
  2569  047D  00A3               	movwf	??_sprintf^(0+384)
  2570  047E  0841               	movf	sprintf@sp^(0+384),w
  2571  047F  0084               	movwf	4
  2572  0480  0823               	movf	??_sprintf^(0+384),w
  2573  0481  1783               	bsf	3,7	;select IRP bank2
  2574  0482  0080               	movwf	0
  2575  0483  3001               	movlw	1
  2576  0484  00A3               	movwf	??_sprintf^(0+384)
  2577  0485  0823               	movf	??_sprintf^(0+384),w
  2578  0486  07C1               	addwf	sprintf@sp^(0+384),f
  2579  0487                     l5078:
  2580                           
  2581                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1194:      while(
      +                          width > 0) {
  2582  0487  083A               	movf	(sprintf@width+1)^(0+384),w
  2583  0488  3A80               	xorlw	128
  2584  0489  00FF               	movwf	127
  2585  048A  3080               	movlw	128
  2586  048B  027F               	subwf	127,w
  2587  048C  1D03               	skipz
  2588  048D  2C90               	goto	u9315
  2589  048E  3001               	movlw	1
  2590  048F  0239               	subwf	sprintf@width^(0+384),w
  2591  0490                     u9315:
  2592  0490  1C03               	btfss	3,0
  2593  0491  2CD5               	goto	l297
  2594                           
  2595                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1195:       ((*sp
      +                          ++ = ('0')));
  2596  0492  3030               	movlw	48
  2597  0493  1683               	bsf	3,5	;RP0=1, select bank3
  2598  0494  1703               	bsf	3,6	;RP1=1, select bank3
  2599  0495  00A3               	movwf	??_sprintf^(0+384)
  2600  0496  0841               	movf	sprintf@sp^(0+384),w
  2601  0497  0084               	movwf	4
  2602  0498  0823               	movf	??_sprintf^(0+384),w
  2603  0499  1783               	bsf	3,7	;select IRP bank2
  2604  049A  0080               	movwf	0
  2605  049B  3001               	movlw	1
  2606  049C  00A3               	movwf	??_sprintf^(0+384)
  2607  049D  0823               	movf	??_sprintf^(0+384),w
  2608  049E  07C1               	addwf	sprintf@sp^(0+384),f
  2609                           
  2610                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1196:       width
      +                          --;
  2611  049F  30FF               	movlw	255
  2612  04A0  07B9               	addwf	sprintf@width^(0+384),f
  2613  04A1  1803               	skipnc
  2614  04A2  0ABA               	incf	(sprintf@width+1)^(0+384),f
  2615  04A3  30FF               	movlw	255
  2616  04A4  07BA               	addwf	(sprintf@width+1)^(0+384),f
  2617  04A5  2C87               	goto	l5078
  2618  04A6                     l5080:
  2619                           
  2620                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1207:       ((*sp
      +                          ++ = (' ')));
  2621  04A6  3020               	movlw	32
  2622  04A7  1683               	bsf	3,5	;RP0=1, select bank3
  2623  04A8  1703               	bsf	3,6	;RP1=1, select bank3
  2624  04A9  00A3               	movwf	??_sprintf^(0+384)
  2625  04AA  0841               	movf	sprintf@sp^(0+384),w
  2626  04AB  0084               	movwf	4
  2627  04AC  0823               	movf	??_sprintf^(0+384),w
  2628  04AD  1783               	bsf	3,7	;select IRP bank2
  2629  04AE  0080               	movwf	0
  2630  04AF  3001               	movlw	1
  2631  04B0  00A3               	movwf	??_sprintf^(0+384)
  2632  04B1  0823               	movf	??_sprintf^(0+384),w
  2633  04B2  07C1               	addwf	sprintf@sp^(0+384),f
  2634                           
  2635                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1208:       width
      +                          --;
  2636  04B3  30FF               	movlw	255
  2637  04B4  07B9               	addwf	sprintf@width^(0+384),f
  2638  04B5  1803               	skipnc
  2639  04B6  0ABA               	incf	(sprintf@width+1)^(0+384),f
  2640  04B7  30FF               	movlw	255
  2641  04B8  07BA               	addwf	(sprintf@width+1)^(0+384),f
  2642  04B9                     l5086:
  2643                           
  2644                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1206:      while(
      +                          width > 0) {
  2645  04B9  083A               	movf	(sprintf@width+1)^(0+384),w
  2646  04BA  3A80               	xorlw	128
  2647  04BB  00FF               	movwf	127
  2648  04BC  3080               	movlw	128
  2649  04BD  027F               	subwf	127,w
  2650  04BE  1D03               	skipz
  2651  04BF  2CC2               	goto	u9325
  2652  04C0  3001               	movlw	1
  2653  04C1  0239               	subwf	sprintf@width^(0+384),w
  2654  04C2                     u9325:
  2655  04C2  1803               	skipnc
  2656  04C3  2CA6               	goto	l5080
  2657                           
  2658                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1214:     if(flag
      +                           & 0x03)
  2659  04C4  1683               	bsf	3,5	;RP0=1, select bank3
  2660  04C5  1703               	bsf	3,6	;RP1=1, select bank3
  2661  04C6  0837               	movf	sprintf@flag^(0+384),w
  2662  04C7  3903               	andlw	3
  2663  04C8  1903               	btfsc	3,2
  2664  04C9  2CD5               	goto	l297
  2665                           
  2666                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
  2667  04CA  302D               	movlw	45
  2668  04CB                     L3:
  2669  04CB  00A3               	movwf	??_sprintf^(0+384)
  2670  04CC  0841               	movf	sprintf@sp^(0+384),w
  2671  04CD  0084               	movwf	4
  2672  04CE  0823               	movf	??_sprintf^(0+384),w
  2673  04CF  1783               	bsf	3,7	;select IRP bank2
  2674  04D0  0080               	movwf	0
  2675  04D1  3001               	movlw	1
  2676  04D2  00A3               	movwf	??_sprintf^(0+384)
  2677  04D3  0823               	movf	??_sprintf^(0+384),w
  2678  04D4  07C1               	addwf	sprintf@sp^(0+384),f
  2679  04D5                     l297:	
  2680                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1230:     };C:\Pr
      +                          ogram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1232:    }
  2681                           
  2682                           
  2683                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
  2684  04D5  3001               	movlw	1
  2685  04D6  1683               	bsf	3,5	;RP0=1, select bank3
  2686  04D7  1703               	bsf	3,6	;RP1=1, select bank3
  2687  04D8  02C2               	subwf	sprintf@c^(0+384),f
  2688  04D9  0A42               	incf	sprintf@c^(0+384),w
  2689  04DA  1903               	btfsc	3,2
  2690  04DB  2D68               	goto	l5106
  2691                           
  2692                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
  2693  04DC  0842               	movf	sprintf@c^(0+384),w
  2694  04DD  00A3               	movwf	??_sprintf^(0+384)
  2695  04DE  3001               	movlw	1
  2696  04DF                     u9345:
  2697  04DF  1003               	clrc
  2698  04E0  0DA3               	rlf	??_sprintf^(0+384),f
  2699  04E1  3EFF               	addlw	-1
  2700  04E2  1D03               	skipz
  2701  04E3  2CDF               	goto	u9345
  2702  04E4  1003               	clrc
  2703  04E5  0D23               	rlf	??_sprintf^(0+384),w
  2704  04E6  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2705  04E7  0084               	movwf	4
  2706  04E8  160A  118A  2000  120A  118A  	fcall	stringdir
  2707  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  2708  04EE  00A0               	movwf	___lldiv@divisor^(0+128)
  2709  04EF  160A  118A  2000  120A  118A  	fcall	stringdir
  2710  04F4  00A1               	movwf	(___lldiv@divisor+1)^(0+128)
  2711  04F5  160A  118A  2000  120A  118A  	fcall	stringdir
  2712  04FA  00A2               	movwf	(___lldiv@divisor+2)^(0+128)
  2713  04FB  160A  118A  2000  120A  118A  	fcall	stringdir
  2714  0500  00A3               	movwf	(___lldiv@divisor+3)^(0+128)
  2715  0501  1703               	bsf	3,6	;RP1=1, select bank3
  2716  0502  0830               	movf	(sprintf@val+3)^(0+384),w
  2717  0503  1303               	bcf	3,6	;RP1=0, select bank1
  2718  0504  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
  2719  0505  1703               	bsf	3,6	;RP1=1, select bank3
  2720  0506  082F               	movf	(sprintf@val+2)^(0+384),w
  2721  0507  1303               	bcf	3,6	;RP1=0, select bank1
  2722  0508  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  2723  0509  1703               	bsf	3,6	;RP1=1, select bank3
  2724  050A  082E               	movf	(sprintf@val+1)^(0+384),w
  2725  050B  1303               	bcf	3,6	;RP1=0, select bank1
  2726  050C  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  2727  050D  1703               	bsf	3,6	;RP1=1, select bank3
  2728  050E  082D               	movf	sprintf@val^(0+384),w
  2729  050F  1303               	bcf	3,6	;RP1=0, select bank1
  2730  0510  00A4               	movwf	___lldiv@dividend^(0+128)
  2731  0511  160A  158A  255E  120A  118A  	fcall	___lldiv
  2732  0516  0823               	movf	(?___lldiv+3)^(0+128),w
  2733  0517  1703               	bsf	3,6	;RP1=1, select bank3
  2734  0518  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  2735  0519  1303               	bcf	3,6	;RP1=0, select bank1
  2736  051A  0822               	movf	(?___lldiv+2)^(0+128),w
  2737  051B  1703               	bsf	3,6	;RP1=1, select bank3
  2738  051C  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  2739  051D  1303               	bcf	3,6	;RP1=0, select bank1
  2740  051E  0821               	movf	(?___lldiv+1)^(0+128),w
  2741  051F  1703               	bsf	3,6	;RP1=1, select bank3
  2742  0520  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  2743  0521  1303               	bcf	3,6	;RP1=0, select bank1
  2744  0522  0820               	movf	?___lldiv^(0+128),w
  2745  0523  1703               	bsf	3,6	;RP1=1, select bank3
  2746  0524  00B1               	movwf	sprintf@tmpval^(0+384)
  2747                           
  2748                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
  2749  0525  3000               	movlw	0
  2750  0526  1303               	bcf	3,6	;RP1=0, select bank1
  2751  0527  00B1               	movwf	(___llmod@divisor+3)^(0+128)
  2752  0528  3000               	movlw	0
  2753  0529  00B0               	movwf	(___llmod@divisor+2)^(0+128)
  2754  052A  3000               	movlw	0
  2755  052B  00AF               	movwf	(___llmod@divisor+1)^(0+128)
  2756  052C  300A               	movlw	10
  2757  052D  00AE               	movwf	___llmod@divisor^(0+128)
  2758  052E  1703               	bsf	3,6	;RP1=1, select bank3
  2759  052F  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  2760  0530  1303               	bcf	3,6	;RP1=0, select bank1
  2761  0531  00B5               	movwf	(___llmod@dividend+3)^(0+128)
  2762  0532  1703               	bsf	3,6	;RP1=1, select bank3
  2763  0533  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  2764  0534  1303               	bcf	3,6	;RP1=0, select bank1
  2765  0535  00B4               	movwf	(___llmod@dividend+2)^(0+128)
  2766  0536  1703               	bsf	3,6	;RP1=1, select bank3
  2767  0537  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  2768  0538  1303               	bcf	3,6	;RP1=0, select bank1
  2769  0539  00B3               	movwf	(___llmod@dividend+1)^(0+128)
  2770  053A  1703               	bsf	3,6	;RP1=1, select bank3
  2771  053B  0831               	movf	sprintf@tmpval^(0+384),w
  2772  053C  1303               	bcf	3,6	;RP1=0, select bank1
  2773  053D  00B2               	movwf	___llmod@dividend^(0+128)
  2774  053E  160A  158A  2460  120A  118A  	fcall	___llmod
  2775  0543  0831               	movf	(?___llmod+3)^(0+128),w
  2776  0544  1703               	bsf	3,6	;RP1=1, select bank3
  2777  0545  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  2778  0546  1303               	bcf	3,6	;RP1=0, select bank1
  2779  0547  0830               	movf	(?___llmod+2)^(0+128),w
  2780  0548  1703               	bsf	3,6	;RP1=1, select bank3
  2781  0549  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  2782  054A  1303               	bcf	3,6	;RP1=0, select bank1
  2783  054B  082F               	movf	(?___llmod+1)^(0+128),w
  2784  054C  1703               	bsf	3,6	;RP1=1, select bank3
  2785  054D  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  2786  054E  1303               	bcf	3,6	;RP1=0, select bank1
  2787  054F  082E               	movf	?___llmod^(0+128),w
  2788  0550  1703               	bsf	3,6	;RP1=1, select bank3
  2789  0551  00B1               	movwf	sprintf@tmpval^(0+384)
  2790                           
  2791                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
  2792  0552  0831               	movf	sprintf@tmpval^(0+384),w
  2793  0553  3E30               	addlw	48
  2794  0554  2CCB               	goto	L3
  2795  0555                     l5100:
  2796                           
  2797                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
  2798  0555  3030               	movlw	48
  2799  0556  1683               	bsf	3,5	;RP0=1, select bank3
  2800  0557  1703               	bsf	3,6	;RP1=1, select bank3
  2801  0558  00A3               	movwf	??_sprintf^(0+384)
  2802  0559  0841               	movf	sprintf@sp^(0+384),w
  2803  055A  0084               	movwf	4
  2804  055B  0823               	movf	??_sprintf^(0+384),w
  2805  055C  1783               	bsf	3,7	;select IRP bank2
  2806  055D  0080               	movwf	0
  2807  055E  3001               	movlw	1
  2808  055F  00A3               	movwf	??_sprintf^(0+384)
  2809  0560  0823               	movf	??_sprintf^(0+384),w
  2810  0561  07C1               	addwf	sprintf@sp^(0+384),f
  2811                           
  2812                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
  2813  0562  30FF               	movlw	255
  2814  0563  07B5               	addwf	sprintf@eexp^(0+384),f
  2815  0564  1803               	skipnc
  2816  0565  0AB6               	incf	(sprintf@eexp+1)^(0+384),f
  2817  0566  30FF               	movlw	255
  2818  0567  07B6               	addwf	(sprintf@eexp+1)^(0+384),f
  2819  0568                     l5106:
  2820                           
  2821                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
  2822  0568  0836               	movf	(sprintf@eexp+1)^(0+384),w
  2823  0569  3A80               	xorlw	128
  2824  056A  00FF               	movwf	127
  2825  056B  3080               	movlw	128
  2826  056C  027F               	subwf	127,w
  2827  056D  1D03               	skipz
  2828  056E  2D71               	goto	u9365
  2829  056F  3001               	movlw	1
  2830  0570  0235               	subwf	sprintf@eexp^(0+384),w
  2831  0571                     u9365:
  2832  0571  1803               	skipnc
  2833  0572  2D55               	goto	l5100
  2834                           
  2835                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2836  0573  1683               	bsf	3,5	;RP0=1, select bank3
  2837  0574  1703               	bsf	3,6	;RP1=1, select bank3
  2838  0575  0840               	movf	(sprintf@prec+1)^(0+384),w
  2839  0576  3A80               	xorlw	128
  2840  0577  00FF               	movwf	127
  2841  0578  3080               	movlw	128
  2842  0579  027F               	subwf	127,w
  2843  057A  1D03               	skipz
  2844  057B  2D7E               	goto	u9375
  2845  057C  3009               	movlw	9
  2846  057D  023F               	subwf	sprintf@prec^(0+384),w
  2847  057E                     u9375:
  2848  057E  1C03               	skipc
  2849  057F  2D84               	goto	l5112
  2850                           
  2851                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
  2852  0580  3008               	movlw	8
  2853  0581  1683               	bsf	3,5	;RP0=1, select bank3
  2854  0582  1703               	bsf	3,6	;RP1=1, select bank3
  2855  0583  2D87               	goto	L4
  2856  0584                     l5112:
  2857                           
  2858                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
  2859  0584  1683               	bsf	3,5	;RP0=1, select bank3
  2860  0585  1703               	bsf	3,6	;RP1=1, select bank3
  2861  0586  083F               	movf	sprintf@prec^(0+384),w
  2862  0587                     L4:
  2863  0587  00A3               	movwf	??_sprintf^(0+384)
  2864  0588  0823               	movf	??_sprintf^(0+384),w
  2865  0589  00C2               	movwf	sprintf@c^(0+384)
  2866                           
  2867                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
  2868  058A  0842               	movf	sprintf@c^(0+384),w
  2869  058B  00A3               	movwf	??_sprintf^(0+384)
  2870  058C  01A4               	clrf	(??_sprintf^(0+384)+1)
  2871  058D  0823               	movf	??_sprintf^(0+384),w
  2872  058E  02BF               	subwf	sprintf@prec^(0+384),f
  2873  058F  0824               	movf	(??_sprintf+1)^(0+384),w
  2874  0590  1C03               	skipc
  2875  0591  03C0               	decf	(sprintf@prec+1)^(0+384),f
  2876  0592  02C0               	subwf	(sprintf@prec+1)^(0+384),f
  2877                           
  2878                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1245:    if(c)
  2879  0593  0842               	movf	sprintf@c^(0+384),w
  2880  0594  1903               	btfsc	3,2
  2881  0595  2DA1               	goto	l5120
  2882                           
  2883                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
  2884  0596  302E               	movlw	46
  2885  0597  00A3               	movwf	??_sprintf^(0+384)
  2886  0598  0841               	movf	sprintf@sp^(0+384),w
  2887  0599  0084               	movwf	4
  2888  059A  0823               	movf	??_sprintf^(0+384),w
  2889  059B  1783               	bsf	3,7	;select IRP bank2
  2890  059C  0080               	movwf	0
  2891  059D  3001               	movlw	1
  2892  059E  00A3               	movwf	??_sprintf^(0+384)
  2893  059F  0823               	movf	??_sprintf^(0+384),w
  2894  05A0  07C1               	addwf	sprintf@sp^(0+384),f
  2895  05A1                     l5120:
  2896                           
  2897                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  2898  05A1  0842               	movf	sprintf@c^(0+384),w
  2899  05A2  120A  158A  24D8  120A  118A  	fcall	_scale
  2900  05A7  084D               	movf	(?_scale+3)^(0+128),w
  2901  05A8  1703               	bsf	3,6	;RP1=1, select bank3
  2902  05A9  00AB               	movwf	(_sprintf$834+3)^(0+384)
  2903  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  2904  05AB  084C               	movf	(?_scale+2)^(0+128),w
  2905  05AC  1703               	bsf	3,6	;RP1=1, select bank3
  2906  05AD  00AA               	movwf	(_sprintf$834+2)^(0+384)
  2907  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  2908  05AF  084B               	movf	(?_scale+1)^(0+128),w
  2909  05B0  1703               	bsf	3,6	;RP1=1, select bank3
  2910  05B1  00A9               	movwf	(_sprintf$834+1)^(0+384)
  2911  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  2912  05B3  084A               	movf	?_scale^(0+128),w
  2913  05B4  1703               	bsf	3,6	;RP1=1, select bank3
  2914  05B5  00A8               	movwf	_sprintf$834^(0+384)
  2915                           
  2916                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  2917  05B6  082B               	movf	(_sprintf$834+3)^(0+384),w
  2918  05B7  1303               	bcf	3,6	;RP1=0, select bank1
  2919  05B8  00B7               	movwf	(___flmul@a+3)^(0+128)
  2920  05B9  1703               	bsf	3,6	;RP1=1, select bank3
  2921  05BA  082A               	movf	(_sprintf$834+2)^(0+384),w
  2922  05BB  1303               	bcf	3,6	;RP1=0, select bank1
  2923  05BC  00B6               	movwf	(___flmul@a+2)^(0+128)
  2924  05BD  1703               	bsf	3,6	;RP1=1, select bank3
  2925  05BE  0829               	movf	(_sprintf$834+1)^(0+384),w
  2926  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  2927  05C0  00B5               	movwf	(___flmul@a+1)^(0+128)
  2928  05C1  1703               	bsf	3,6	;RP1=1, select bank3
  2929  05C2  0828               	movf	_sprintf$834^(0+384),w
  2930  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  2931  05C4  00B4               	movwf	___flmul@a^(0+128)
  2932  05C5  1703               	bsf	3,6	;RP1=1, select bank3
  2933  05C6  083E               	movf	(sprintf@fval+3)^(0+384),w
  2934  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  2935  05C8  00B3               	movwf	(___flmul@b+3)^(0+128)
  2936  05C9  1703               	bsf	3,6	;RP1=1, select bank3
  2937  05CA  083D               	movf	(sprintf@fval+2)^(0+384),w
  2938  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  2939  05CC  00B2               	movwf	(___flmul@b+2)^(0+128)
  2940  05CD  1703               	bsf	3,6	;RP1=1, select bank3
  2941  05CE  083C               	movf	(sprintf@fval+1)^(0+384),w
  2942  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  2943  05D0  00B1               	movwf	(___flmul@b+1)^(0+128)
  2944  05D1  1703               	bsf	3,6	;RP1=1, select bank3
  2945  05D2  083B               	movf	sprintf@fval^(0+384),w
  2946  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  2947  05D4  00B0               	movwf	___flmul@b^(0+128)
  2948  05D5  120A  158A  21E3  120A  118A  	fcall	___flmul
  2949  05DA  0833               	movf	(?___flmul+3)^(0+128),w
  2950  05DB  00E0               	movwf	(___fltol@f1+3)^(0+128)
  2951  05DC  0832               	movf	(?___flmul+2)^(0+128),w
  2952  05DD  00DF               	movwf	(___fltol@f1+2)^(0+128)
  2953  05DE  0831               	movf	(?___flmul+1)^(0+128),w
  2954  05DF  00DE               	movwf	(___fltol@f1+1)^(0+128)
  2955  05E0  0830               	movf	?___flmul^(0+128),w
  2956  05E1  00DD               	movwf	___fltol@f1^(0+128)
  2957  05E2  160A  158A  25BC  120A  118A  	fcall	___fltol
  2958  05E7  0860               	movf	(?___fltol+3)^(0+128),w
  2959  05E8  1703               	bsf	3,6	;RP1=1, select bank3
  2960  05E9  00B0               	movwf	(sprintf@val+3)^(0+384)
  2961  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  2962  05EB  085F               	movf	(?___fltol+2)^(0+128),w
  2963  05EC  1703               	bsf	3,6	;RP1=1, select bank3
  2964  05ED  00AF               	movwf	(sprintf@val+2)^(0+384)
  2965  05EE  1303               	bcf	3,6	;RP1=0, select bank1
  2966  05EF  085E               	movf	(?___fltol+1)^(0+128),w
  2967  05F0  1703               	bsf	3,6	;RP1=1, select bank3
  2968  05F1  00AE               	movwf	(sprintf@val+1)^(0+384)
  2969  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  2970  05F3  085D               	movf	?___fltol^(0+128),w
  2971  05F4                     L5:
  2972  05F4  1703               	bsf	3,6	;RP1=1, select bank3
  2973  05F5  00AD               	movwf	sprintf@val^(0+384)
  2974                           
  2975                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  2976  05F6  3001               	movlw	1
  2977  05F7  02C2               	subwf	sprintf@c^(0+384),f
  2978  05F8  0A42               	incf	sprintf@c^(0+384),w
  2979  05F9  1903               	btfsc	3,2
  2980  05FA  2ED6               	goto	l5140
  2981                           
  2982                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
  2983                           
  2984                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  2985  05FB  0842               	movf	sprintf@c^(0+384),w
  2986  05FC  00A3               	movwf	??_sprintf^(0+384)
  2987  05FD  3001               	movlw	1
  2988  05FE                     u9395:
  2989  05FE  1003               	clrc
  2990  05FF  0DA3               	rlf	??_sprintf^(0+384),f
  2991  0600  3EFF               	addlw	-1
  2992  0601  1D03               	skipz
  2993  0602  2DFE               	goto	u9395
  2994  0603  1003               	clrc
  2995  0604  0D23               	rlf	??_sprintf^(0+384),w
  2996  0605  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2997  0606  0084               	movwf	4
  2998  0607  160A  118A  2000  120A  118A  	fcall	stringdir
  2999  060C  1303               	bcf	3,6	;RP1=0, select bank1
  3000  060D  00A0               	movwf	___lldiv@divisor^(0+128)
  3001  060E  160A  118A  2000  120A  118A  	fcall	stringdir
  3002  0613  00A1               	movwf	(___lldiv@divisor+1)^(0+128)
  3003  0614  160A  118A  2000  120A  118A  	fcall	stringdir
  3004  0619  00A2               	movwf	(___lldiv@divisor+2)^(0+128)
  3005  061A  160A  118A  2000  120A  118A  	fcall	stringdir
  3006  061F  00A3               	movwf	(___lldiv@divisor+3)^(0+128)
  3007  0620  1703               	bsf	3,6	;RP1=1, select bank3
  3008  0621  0830               	movf	(sprintf@val+3)^(0+384),w
  3009  0622  1303               	bcf	3,6	;RP1=0, select bank1
  3010  0623  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
  3011  0624  1703               	bsf	3,6	;RP1=1, select bank3
  3012  0625  082F               	movf	(sprintf@val+2)^(0+384),w
  3013  0626  1303               	bcf	3,6	;RP1=0, select bank1
  3014  0627  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  3015  0628  1703               	bsf	3,6	;RP1=1, select bank3
  3016  0629  082E               	movf	(sprintf@val+1)^(0+384),w
  3017  062A  1303               	bcf	3,6	;RP1=0, select bank1
  3018  062B  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  3019  062C  1703               	bsf	3,6	;RP1=1, select bank3
  3020  062D  082D               	movf	sprintf@val^(0+384),w
  3021  062E  1303               	bcf	3,6	;RP1=0, select bank1
  3022  062F  00A4               	movwf	___lldiv@dividend^(0+128)
  3023  0630  160A  158A  255E  120A  118A  	fcall	___lldiv
  3024  0635  0823               	movf	(?___lldiv+3)^(0+128),w
  3025  0636  1703               	bsf	3,6	;RP1=1, select bank3
  3026  0637  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  3027  0638  1303               	bcf	3,6	;RP1=0, select bank1
  3028  0639  0822               	movf	(?___lldiv+2)^(0+128),w
  3029  063A  1703               	bsf	3,6	;RP1=1, select bank3
  3030  063B  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  3031  063C  1303               	bcf	3,6	;RP1=0, select bank1
  3032  063D  0821               	movf	(?___lldiv+1)^(0+128),w
  3033  063E  1703               	bsf	3,6	;RP1=1, select bank3
  3034  063F  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  3035  0640  1303               	bcf	3,6	;RP1=0, select bank1
  3036  0641  0820               	movf	?___lldiv^(0+128),w
  3037  0642  1703               	bsf	3,6	;RP1=1, select bank3
  3038  0643  00B1               	movwf	sprintf@tmpval^(0+384)
  3039                           
  3040                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
  3041  0644  3000               	movlw	0
  3042  0645  1303               	bcf	3,6	;RP1=0, select bank1
  3043  0646  00B1               	movwf	(___llmod@divisor+3)^(0+128)
  3044  0647  3000               	movlw	0
  3045  0648  00B0               	movwf	(___llmod@divisor+2)^(0+128)
  3046  0649  3000               	movlw	0
  3047  064A  00AF               	movwf	(___llmod@divisor+1)^(0+128)
  3048  064B  300A               	movlw	10
  3049  064C  00AE               	movwf	___llmod@divisor^(0+128)
  3050  064D  1703               	bsf	3,6	;RP1=1, select bank3
  3051  064E  0834               	movf	(sprintf@tmpval+3)^(0+384),w
  3052  064F  1303               	bcf	3,6	;RP1=0, select bank1
  3053  0650  00B5               	movwf	(___llmod@dividend+3)^(0+128)
  3054  0651  1703               	bsf	3,6	;RP1=1, select bank3
  3055  0652  0833               	movf	(sprintf@tmpval+2)^(0+384),w
  3056  0653  1303               	bcf	3,6	;RP1=0, select bank1
  3057  0654  00B4               	movwf	(___llmod@dividend+2)^(0+128)
  3058  0655  1703               	bsf	3,6	;RP1=1, select bank3
  3059  0656  0832               	movf	(sprintf@tmpval+1)^(0+384),w
  3060  0657  1303               	bcf	3,6	;RP1=0, select bank1
  3061  0658  00B3               	movwf	(___llmod@dividend+1)^(0+128)
  3062  0659  1703               	bsf	3,6	;RP1=1, select bank3
  3063  065A  0831               	movf	sprintf@tmpval^(0+384),w
  3064  065B  1303               	bcf	3,6	;RP1=0, select bank1
  3065  065C  00B2               	movwf	___llmod@dividend^(0+128)
  3066  065D  160A  158A  2460  120A  118A  	fcall	___llmod
  3067  0662  0831               	movf	(?___llmod+3)^(0+128),w
  3068  0663  1703               	bsf	3,6	;RP1=1, select bank3
  3069  0664  00B4               	movwf	(sprintf@tmpval+3)^(0+384)
  3070  0665  1303               	bcf	3,6	;RP1=0, select bank1
  3071  0666  0830               	movf	(?___llmod+2)^(0+128),w
  3072  0667  1703               	bsf	3,6	;RP1=1, select bank3
  3073  0668  00B3               	movwf	(sprintf@tmpval+2)^(0+384)
  3074  0669  1303               	bcf	3,6	;RP1=0, select bank1
  3075  066A  082F               	movf	(?___llmod+1)^(0+128),w
  3076  066B  1703               	bsf	3,6	;RP1=1, select bank3
  3077  066C  00B2               	movwf	(sprintf@tmpval+1)^(0+384)
  3078  066D  1303               	bcf	3,6	;RP1=0, select bank1
  3079  066E  082E               	movf	?___llmod^(0+128),w
  3080  066F  1703               	bsf	3,6	;RP1=1, select bank3
  3081  0670  00B1               	movwf	sprintf@tmpval^(0+384)
  3082                           
  3083                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
  3084  0671  0831               	movf	sprintf@tmpval^(0+384),w
  3085  0672  3E30               	addlw	48
  3086  0673  00A3               	movwf	??_sprintf^(0+384)
  3087  0674  0841               	movf	sprintf@sp^(0+384),w
  3088  0675  0084               	movwf	4
  3089  0676  0823               	movf	??_sprintf^(0+384),w
  3090  0677  1783               	bsf	3,7	;select IRP bank2
  3091  0678  0080               	movwf	0
  3092  0679  3001               	movlw	1
  3093  067A  00A3               	movwf	??_sprintf^(0+384)
  3094  067B  0823               	movf	??_sprintf^(0+384),w
  3095  067C  07C1               	addwf	sprintf@sp^(0+384),f
  3096                           
  3097                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
  3098  067D  0842               	movf	sprintf@c^(0+384),w
  3099  067E  00A3               	movwf	??_sprintf^(0+384)
  3100  067F  3001               	movlw	1
  3101  0680                     u9405:
  3102  0680  1003               	clrc
  3103  0681  0DA3               	rlf	??_sprintf^(0+384),f
  3104  0682  3EFF               	addlw	-1
  3105  0683  1D03               	skipz
  3106  0684  2E80               	goto	u9405
  3107  0685  1003               	clrc
  3108  0686  0D23               	rlf	??_sprintf^(0+384),w
  3109  0687  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3110  0688  0084               	movwf	4
  3111  0689  160A  118A  2000  120A  118A  	fcall	stringdir
  3112  068E  1303               	bcf	3,6	;RP1=0, select bank1
  3113  068F  00AE               	movwf	___llmod@divisor^(0+128)
  3114  0690  160A  118A  2000  120A  118A  	fcall	stringdir
  3115  0695  00AF               	movwf	(___llmod@divisor+1)^(0+128)
  3116  0696  160A  118A  2000  120A  118A  	fcall	stringdir
  3117  069B  00B0               	movwf	(___llmod@divisor+2)^(0+128)
  3118  069C  160A  118A  2000  120A  118A  	fcall	stringdir
  3119  06A1  00B1               	movwf	(___llmod@divisor+3)^(0+128)
  3120  06A2  1703               	bsf	3,6	;RP1=1, select bank3
  3121  06A3  0830               	movf	(sprintf@val+3)^(0+384),w
  3122  06A4  1303               	bcf	3,6	;RP1=0, select bank1
  3123  06A5  00B5               	movwf	(___llmod@dividend+3)^(0+128)
  3124  06A6  1703               	bsf	3,6	;RP1=1, select bank3
  3125  06A7  082F               	movf	(sprintf@val+2)^(0+384),w
  3126  06A8  1303               	bcf	3,6	;RP1=0, select bank1
  3127  06A9  00B4               	movwf	(___llmod@dividend+2)^(0+128)
  3128  06AA  1703               	bsf	3,6	;RP1=1, select bank3
  3129  06AB  082E               	movf	(sprintf@val+1)^(0+384),w
  3130  06AC  1303               	bcf	3,6	;RP1=0, select bank1
  3131  06AD  00B3               	movwf	(___llmod@dividend+1)^(0+128)
  3132  06AE  1703               	bsf	3,6	;RP1=1, select bank3
  3133  06AF  082D               	movf	sprintf@val^(0+384),w
  3134  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  3135  06B1  00B2               	movwf	___llmod@dividend^(0+128)
  3136  06B2  160A  158A  2460  120A  118A  	fcall	___llmod
  3137  06B7  0831               	movf	(?___llmod+3)^(0+128),w
  3138  06B8  1703               	bsf	3,6	;RP1=1, select bank3
  3139  06B9  00B0               	movwf	(sprintf@val+3)^(0+384)
  3140  06BA  1303               	bcf	3,6	;RP1=0, select bank1
  3141  06BB  0830               	movf	(?___llmod+2)^(0+128),w
  3142  06BC  1703               	bsf	3,6	;RP1=1, select bank3
  3143  06BD  00AF               	movwf	(sprintf@val+2)^(0+384)
  3144  06BE  1303               	bcf	3,6	;RP1=0, select bank1
  3145  06BF  082F               	movf	(?___llmod+1)^(0+128),w
  3146  06C0  1703               	bsf	3,6	;RP1=1, select bank3
  3147  06C1  00AE               	movwf	(sprintf@val+1)^(0+384)
  3148  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  3149  06C3  082E               	movf	?___llmod^(0+128),w
  3150  06C4  2DF4               	goto	L5
  3151  06C5                     l5134:
  3152                           
  3153                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
  3154  06C5  3030               	movlw	48
  3155  06C6  00A3               	movwf	??_sprintf^(0+384)
  3156  06C7  0841               	movf	sprintf@sp^(0+384),w
  3157  06C8  0084               	movwf	4
  3158  06C9  0823               	movf	??_sprintf^(0+384),w
  3159  06CA  1783               	bsf	3,7	;select IRP bank2
  3160  06CB  0080               	movwf	0
  3161  06CC  3001               	movlw	1
  3162  06CD  00A3               	movwf	??_sprintf^(0+384)
  3163  06CE  0823               	movf	??_sprintf^(0+384),w
  3164  06CF  07C1               	addwf	sprintf@sp^(0+384),f
  3165                           
  3166                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1263:     prec--;
  3167  06D0  30FF               	movlw	255
  3168  06D1  07BF               	addwf	sprintf@prec^(0+384),f
  3169  06D2  1803               	skipnc
  3170  06D3  0AC0               	incf	(sprintf@prec+1)^(0+384),f
  3171  06D4  30FF               	movlw	255
  3172  06D5  07C0               	addwf	(sprintf@prec+1)^(0+384),f
  3173  06D6                     l5140:
  3174                           
  3175                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
  3176  06D6  083F               	movf	sprintf@prec^(0+384),w
  3177  06D7  0440               	iorwf	(sprintf@prec+1)^(0+384),w
  3178  06D8  1903               	btfsc	3,2
  3179  06D9  2834               	goto	l5230
  3180  06DA  2EC5               	goto	l5134
  3181  06DB                     l5142:
  3182                           
  3183                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3184  06DB  082C               	movf	sprintf@ap^(0+384),w
  3185  06DC  0084               	movwf	4
  3186  06DD  1783               	bsf	3,7	;select IRP bank2
  3187  06DE  0800               	movf	0,w
  3188  06DF  00A3               	movwf	??_sprintf^(0+384)
  3189  06E0  0A84               	incf	4,f
  3190  06E1  0800               	movf	0,w
  3191  06E2  00A4               	movwf	(??_sprintf^(0+384)+1)
  3192  06E3  0823               	movf	??_sprintf^(0+384),w
  3193  06E4  00AD               	movwf	sprintf@val^(0+384)
  3194  06E5  0824               	movf	(??_sprintf+1)^(0+384),w
  3195  06E6  00AE               	movwf	(sprintf@val^(0+384)+1)
  3196  06E7  01AF               	clrf	(sprintf@val^(0+384)+2)
  3197  06E8  01B0               	clrf	(sprintf@val^(0+384)+3)
  3198  06E9  3002               	movlw	2
  3199  06EA  00A3               	movwf	??_sprintf^(0+384)
  3200  06EB  0823               	movf	??_sprintf^(0+384),w
  3201  06EC  07AC               	addwf	sprintf@ap^(0+384),f
  3202                           
  3203                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3204  06ED  083F               	movf	sprintf@prec^(0+384),w
  3205  06EE  0440               	iorwf	(sprintf@prec+1)^(0+384),w
  3206  06EF  1D03               	btfss	3,2
  3207  06F0  2EFD               	goto	l5152
  3208  06F1  0830               	movf	(sprintf@val+3)^(0+384),w
  3209  06F2  042F               	iorwf	(sprintf@val+2)^(0+384),w
  3210  06F3  042E               	iorwf	(sprintf@val+1)^(0+384),w
  3211  06F4  042D               	iorwf	sprintf@val^(0+384),w
  3212  06F5  1D03               	skipz
  3213  06F6  2EFD               	goto	l5152
  3214                           
  3215                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3216  06F7  3001               	movlw	1
  3217  06F8  07BF               	addwf	sprintf@prec^(0+384),f
  3218  06F9  1803               	skipnc
  3219  06FA  0AC0               	incf	(sprintf@prec+1)^(0+384),f
  3220  06FB  3000               	movlw	0
  3221  06FC  07C0               	addwf	(sprintf@prec+1)^(0+384),f
  3222  06FD                     l5152:
  3223                           
  3224                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3225  06FD  01C2               	clrf	sprintf@c^(0+384)
  3226  06FE  0AC2               	incf	sprintf@c^(0+384),f
  3227  06FF                     l5158:
  3228                           
  3229                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3230  06FF  0842               	movf	sprintf@c^(0+384),w
  3231  0700  00A3               	movwf	??_sprintf^(0+384)
  3232  0701  3001               	movlw	1
  3233  0702                     u9455:
  3234  0702  1003               	clrc
  3235  0703  0DA3               	rlf	??_sprintf^(0+384),f
  3236  0704  3EFF               	addlw	-1
  3237  0705  1D03               	skipz
  3238  0706  2F02               	goto	u9455
  3239  0707  1003               	clrc
  3240  0708  0D23               	rlf	??_sprintf^(0+384),w
  3241  0709  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3242  070A  0084               	movwf	4
  3243  070B  160A  118A  2000  120A  118A  	fcall	stringdir
  3244  0710  00A4               	movwf	(??_sprintf+1)^(0+384)
  3245  0711  160A  118A  2000  120A  118A  	fcall	stringdir
  3246  0716  00A5               	movwf	((??_sprintf+1)^(0+384)+1)
  3247  0717  160A  118A  2000  120A  118A  	fcall	stringdir
  3248  071C  00A6               	movwf	((??_sprintf+1)^(0+384)+2)
  3249  071D  160A  118A  2000  120A  118A  	fcall	stringdir
  3250  0722  00A7               	movwf	((??_sprintf+1)^(0+384)+3)
  3251  0723  0827               	movf	(??_sprintf+4)^(0+384),w
  3252  0724  0230               	subwf	(sprintf@val+3)^(0+384),w
  3253  0725  1D03               	skipz
  3254  0726  2F31               	goto	u9465
  3255  0727  0826               	movf	(??_sprintf+3)^(0+384),w
  3256  0728  022F               	subwf	(sprintf@val+2)^(0+384),w
  3257  0729  1D03               	skipz
  3258  072A  2F31               	goto	u9465
  3259  072B  0825               	movf	(??_sprintf+2)^(0+384),w
  3260  072C  022E               	subwf	(sprintf@val+1)^(0+384),w
  3261  072D  1D03               	skipz
  3262  072E  2F31               	goto	u9465
  3263  072F  0824               	movf	(??_sprintf+1)^(0+384),w
  3264  0730  022D               	subwf	sprintf@val^(0+384),w
  3265  0731                     u9465:
  3266  0731  1C03               	btfss	3,0
  3267  0732  2F3B               	goto	l5164
  3268  0733  3001               	movlw	1
  3269  0734  00A3               	movwf	??_sprintf^(0+384)
  3270  0735  0823               	movf	??_sprintf^(0+384),w
  3271  0736  07C2               	addwf	sprintf@c^(0+384),f
  3272  0737  300A               	movlw	10
  3273  0738  0642               	xorwf	sprintf@c^(0+384),w
  3274  0739  1D03               	btfss	3,2
  3275  073A  2EFF               	goto	l5158
  3276  073B                     l5164:
  3277                           
  3278                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3279  073B  0840               	movf	(sprintf@prec+1)^(0+384),w
  3280  073C  3A80               	xorlw	128
  3281  073D  3C80               	sublw	128
  3282  073E  1D03               	skipz
  3283  073F  2F42               	goto	u9485
  3284  0740  083F               	movf	sprintf@prec^(0+384),w
  3285  0741  0242               	subwf	sprintf@c^(0+384),w
  3286  0742                     u9485:
  3287  0742  160A  118A  1803   	skipnc
  3288  0745  2965               	goto	l5168
  3289                           
  3290                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1366:    c = (cha
      +                          r)prec;
  3291  0746  1683               	bsf	3,5	;RP0=1, select bank3
  3292  0747  1703               	bsf	3,6	;RP1=1, select bank3
  3293  0748  083F               	movf	sprintf@prec^(0+384),w
  3294  0749  00A3               	movwf	??_sprintf^(0+384)
  3295  074A  0823               	movf	??_sprintf^(0+384),w
  3296  074B  00C2               	movwf	sprintf@c^(0+384)
  3297  074C  160A  118A  297B   	goto	l5172
  3298  074F                     L12:
  3299  074F                     L11:
  3300  074F  160A  118A  2A72   	ljmp	l5232
  3301                           
  3302                           	psect	text2
  3303  0CD8                     __ptext2:	
  3304 ;; *************** function _scale *****************
  3305 ;; Defined at:
  3306 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  scl             1    wreg     char 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  scl             1   60[BANK1 ] char 
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  4   42[BANK1 ] char 
  3313 ;; Registers used:
  3314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 300/B00
  3317 ;;		On exit  : 300/100
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3320 ;;      Params:         0       0       4       0       0
  3321 ;;      Locals:         0       0       5       0       0
  3322 ;;      Temps:          0       0      10       0       0
  3323 ;;      Totals:         0       0      19       0       0
  3324 ;;Total ram usage:       19 bytes
  3325 ;; Hardware stack levels used: 1
  3326 ;; Hardware stack levels required when called: 6
  3327 ;; This function calls:
  3328 ;;		___awdiv
  3329 ;;		___awmod
  3330 ;;		___flmul
  3331 ;; This function is called by:
  3332 ;;		_sprintf
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336  0CD8                     _scale:	
  3337                           ;psect for function _scale
  3338                           
  3339                           
  3340                           ;incstack = 0
  3341 ;; using string table level
  3342                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3343                           ;scale@scl stored from wreg
  3344  0CD8  1303               	bcf	3,6	;RP1=0, select bank1
  3345  0CD9  00DC               	movwf	scale@scl^(0+128)
  3346                           
  3347                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  3348  0CDA  1FDC               	btfss	scale@scl^(0+128),7
  3349  0CDB  2E6F               	goto	l4618
  3350                           
  3351                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  3352  0CDC  09DC               	comf	scale@scl^(0+128),f
  3353  0CDD  0ADC               	incf	scale@scl^(0+128),f
  3354                           
  3355                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  3356  0CDE  085C               	movf	scale@scl^(0+128),w
  3357  0CDF  3A80               	xorlw	128
  3358  0CE0  3E12               	addlw	-238
  3359  0CE1  1C03               	skipc
  3360  0CE2  2DBF               	goto	l4608
  3361                           
  3362                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  3363  0CE3  300A               	movlw	10
  3364  0CE4  00A7               	movwf	___awdiv@divisor^(0+128)
  3365  0CE5  3000               	movlw	0
  3366  0CE6  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3367  0CE7  085C               	movf	scale@scl^(0+128),w
  3368  0CE8  00A2               	movwf	___awmod@dividend^(0+128)
  3369  0CE9  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3370  0CEA  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3371  0CEB  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3372  0CEC  3064               	movlw	100
  3373  0CED  00A0               	movwf	___awmod@divisor^(0+128)
  3374  0CEE  3000               	movlw	0
  3375  0CEF  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3376  0CF0  160A  158A  2415  120A  158A  	fcall	___awmod
  3377  0CF5  0821               	movf	(?___awmod+1)^(0+128),w
  3378  0CF6  00AA               	movwf	(___awdiv@dividend+1)^(0+128)
  3379  0CF7  0820               	movf	?___awmod^(0+128),w
  3380  0CF8  00A9               	movwf	___awdiv@dividend^(0+128)
  3381  0CF9  160A  158A  2505  120A  158A  	fcall	___awdiv
  3382  0CFE  0827               	movf	?___awdiv^(0+128),w
  3383  0CFF  00CE               	movwf	??_scale^(0+128)
  3384  0D00  3001               	movlw	1
  3385  0D01                     u8245:
  3386  0D01  1003               	clrc
  3387  0D02  0DCE               	rlf	??_scale^(0+128),f
  3388  0D03  3EFF               	addlw	-1
  3389  0D04  1D03               	skipz
  3390  0D05  2D01               	goto	u8245
  3391  0D06  1003               	clrc
  3392  0D07  0D4E               	rlf	??_scale^(0+128),w
  3393  0D08  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  3394  0D09  0084               	movwf	4
  3395  0D0A  160A  118A  2000  120A  158A  	fcall	stringdir
  3396  0D0F  00CF               	movwf	(??_scale+1)^(0+128)
  3397  0D10  160A  118A  2000  120A  158A  	fcall	stringdir
  3398  0D15  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3399  0D16  160A  118A  2000  120A  158A  	fcall	stringdir
  3400  0D1B  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3401  0D1C  160A  118A  2000  120A  158A  	fcall	stringdir
  3402  0D21  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3403  0D22  0852               	movf	(??_scale+4)^(0+128),w
  3404  0D23  00B3               	movwf	(___flmul@b+3)^(0+128)
  3405  0D24  0851               	movf	(??_scale+3)^(0+128),w
  3406  0D25  00B2               	movwf	(___flmul@b+2)^(0+128)
  3407  0D26  0850               	movf	(??_scale+2)^(0+128),w
  3408  0D27  00B1               	movwf	(___flmul@b+1)^(0+128)
  3409  0D28  084F               	movf	(??_scale+1)^(0+128),w
  3410  0D29  00B0               	movwf	___flmul@b^(0+128)
  3411  0D2A  3064               	movlw	100
  3412  0D2B  00A7               	movwf	___awdiv@divisor^(0+128)
  3413  0D2C  3000               	movlw	0
  3414  0D2D  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3415  0D2E  085C               	movf	scale@scl^(0+128),w
  3416  0D2F  00A9               	movwf	___awdiv@dividend^(0+128)
  3417  0D30  01AA               	clrf	(___awdiv@dividend+1)^(0+128)
  3418  0D31  1BA9               	btfsc	___awdiv@dividend^(0+128),7
  3419  0D32  03AA               	decf	(___awdiv@dividend+1)^(0+128),f
  3420  0D33  160A  158A  2505  120A  158A  	fcall	___awdiv
  3421  0D38  0827               	movf	?___awdiv^(0+128),w
  3422  0D39  00D3               	movwf	(??_scale+5)^(0+128)
  3423  0D3A  3001               	movlw	1
  3424  0D3B                     u8255:
  3425  0D3B  1003               	clrc
  3426  0D3C  0DD3               	rlf	(??_scale+5)^(0+128),f
  3427  0D3D  3EFF               	addlw	-1
  3428  0D3E  1D03               	skipz
  3429  0D3F  2D3B               	goto	u8255
  3430  0D40  1003               	clrc
  3431  0D41  0D53               	rlf	(??_scale+5)^(0+128),w
  3432  0D42  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  3433  0D43  0084               	movwf	4
  3434  0D44  160A  118A  2000  120A  158A  	fcall	stringdir
  3435  0D49  00D4               	movwf	(??_scale+6)^(0+128)
  3436  0D4A  160A  118A  2000  120A  158A  	fcall	stringdir
  3437  0D4F  00D5               	movwf	((??_scale+6)^(0+128)+1)
  3438  0D50  160A  118A  2000  120A  158A  	fcall	stringdir
  3439  0D55  00D6               	movwf	((??_scale+6)^(0+128)+2)
  3440  0D56  160A  118A  2000  120A  158A  	fcall	stringdir
  3441  0D5B  00D7               	movwf	((??_scale+6)^(0+128)+3)
  3442  0D5C  0857               	movf	(??_scale+9)^(0+128),w
  3443  0D5D  00B7               	movwf	(___flmul@a+3)^(0+128)
  3444  0D5E  0856               	movf	(??_scale+8)^(0+128),w
  3445  0D5F  00B6               	movwf	(___flmul@a+2)^(0+128)
  3446  0D60  0855               	movf	(??_scale+7)^(0+128),w
  3447  0D61  00B5               	movwf	(___flmul@a+1)^(0+128)
  3448  0D62  0854               	movf	(??_scale+6)^(0+128),w
  3449  0D63  00B4               	movwf	___flmul@a^(0+128)
  3450  0D64  120A  158A  21E3  120A  158A  	fcall	___flmul
  3451  0D69  0833               	movf	(?___flmul+3)^(0+128),w
  3452  0D6A  00DB               	movwf	(_scale$833+3)^(0+128)
  3453  0D6B  0832               	movf	(?___flmul+2)^(0+128),w
  3454  0D6C  00DA               	movwf	(_scale$833+2)^(0+128)
  3455  0D6D  0831               	movf	(?___flmul+1)^(0+128),w
  3456  0D6E  00D9               	movwf	(_scale$833+1)^(0+128)
  3457  0D6F  0830               	movf	?___flmul^(0+128),w
  3458  0D70  00D8               	movwf	_scale$833^(0+128)
  3459                           
  3460                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  3461  0D71  300A               	movlw	10
  3462  0D72  00A0               	movwf	___awmod@divisor^(0+128)
  3463  0D73  3000               	movlw	0
  3464  0D74  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3465  0D75  085C               	movf	scale@scl^(0+128),w
  3466  0D76  00A2               	movwf	___awmod@dividend^(0+128)
  3467  0D77  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3468  0D78  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3469  0D79  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3470  0D7A  160A  158A  2415  120A  158A  	fcall	___awmod
  3471  0D7F  0820               	movf	?___awmod^(0+128),w
  3472  0D80  00CE               	movwf	??_scale^(0+128)
  3473  0D81  3001               	movlw	1
  3474  0D82                     u8265:
  3475  0D82  1003               	clrc
  3476  0D83  0DCE               	rlf	??_scale^(0+128),f
  3477  0D84  3EFF               	addlw	-1
  3478  0D85  1D03               	skipz
  3479  0D86  2D82               	goto	u8265
  3480  0D87  1003               	clrc
  3481  0D88  0D4E               	rlf	??_scale^(0+128),w
  3482  0D89  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3483  0D8A  0084               	movwf	4
  3484  0D8B  160A  118A  2000  120A  158A  	fcall	stringdir
  3485  0D90  00CF               	movwf	(??_scale+1)^(0+128)
  3486  0D91  160A  118A  2000  120A  158A  	fcall	stringdir
  3487  0D96  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3488  0D97  160A  118A  2000  120A  158A  	fcall	stringdir
  3489  0D9C  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3490  0D9D  160A  118A  2000  120A  158A  	fcall	stringdir
  3491  0DA2  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3492  0DA3  0852               	movf	(??_scale+4)^(0+128),w
  3493  0DA4  00B3               	movwf	(___flmul@b+3)^(0+128)
  3494  0DA5  0851               	movf	(??_scale+3)^(0+128),w
  3495  0DA6  00B2               	movwf	(___flmul@b+2)^(0+128)
  3496  0DA7  0850               	movf	(??_scale+2)^(0+128),w
  3497  0DA8  00B1               	movwf	(___flmul@b+1)^(0+128)
  3498  0DA9  084F               	movf	(??_scale+1)^(0+128),w
  3499  0DAA  00B0               	movwf	___flmul@b^(0+128)
  3500  0DAB  085B               	movf	(_scale$833+3)^(0+128),w
  3501  0DAC  00B7               	movwf	(___flmul@a+3)^(0+128)
  3502  0DAD  085A               	movf	(_scale$833+2)^(0+128),w
  3503  0DAE  00B6               	movwf	(___flmul@a+2)^(0+128)
  3504  0DAF  0859               	movf	(_scale$833+1)^(0+128),w
  3505  0DB0  00B5               	movwf	(___flmul@a+1)^(0+128)
  3506  0DB1  0858               	movf	_scale$833^(0+128),w
  3507  0DB2  00B4               	movwf	___flmul@a^(0+128)
  3508  0DB3  120A  158A  21E3   	fcall	___flmul
  3509  0DB6  0833               	movf	(?___flmul+3)^(0+128),w
  3510  0DB7  00CD               	movwf	(?_scale+3)^(0+128)
  3511  0DB8  0832               	movf	(?___flmul+2)^(0+128),w
  3512  0DB9  00CC               	movwf	(?_scale+2)^(0+128)
  3513  0DBA  0831               	movf	(?___flmul+1)^(0+128),w
  3514  0DBB  00CB               	movwf	(?_scale+1)^(0+128)
  3515  0DBC  0830               	movf	?___flmul^(0+128),w
  3516  0DBD  00CA               	movwf	?_scale^(0+128)
  3517  0DBE  0008               	return
  3518  0DBF                     l4608:
  3519  0DBF  085C               	movf	scale@scl^(0+128),w
  3520  0DC0  3A80               	xorlw	128
  3521  0DC1  3E75               	addlw	-139
  3522  0DC2  1C03               	skipc
  3523  0DC3  2E44               	goto	l4614
  3524                           
  3525                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3526  0DC4  300A               	movlw	10
  3527  0DC5  00A0               	movwf	___awmod@divisor^(0+128)
  3528  0DC6  3000               	movlw	0
  3529  0DC7  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3530  0DC8  085C               	movf	scale@scl^(0+128),w
  3531  0DC9  00A2               	movwf	___awmod@dividend^(0+128)
  3532  0DCA  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3533  0DCB  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3534  0DCC  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3535  0DCD  160A  158A  2415  120A  158A  	fcall	___awmod
  3536  0DD2  0820               	movf	?___awmod^(0+128),w
  3537  0DD3  00CE               	movwf	??_scale^(0+128)
  3538  0DD4  3001               	movlw	1
  3539  0DD5                     u8285:
  3540  0DD5  1003               	clrc
  3541  0DD6  0DCE               	rlf	??_scale^(0+128),f
  3542  0DD7  3EFF               	addlw	-1
  3543  0DD8  1D03               	skipz
  3544  0DD9  2DD5               	goto	u8285
  3545  0DDA  1003               	clrc
  3546  0DDB  0D4E               	rlf	??_scale^(0+128),w
  3547  0DDC  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3548  0DDD  0084               	movwf	4
  3549  0DDE  160A  118A  2000  120A  158A  	fcall	stringdir
  3550  0DE3  00CF               	movwf	(??_scale+1)^(0+128)
  3551  0DE4  160A  118A  2000  120A  158A  	fcall	stringdir
  3552  0DE9  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3553  0DEA  160A  118A  2000  120A  158A  	fcall	stringdir
  3554  0DEF  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3555  0DF0  160A  118A  2000  120A  158A  	fcall	stringdir
  3556  0DF5  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3557  0DF6  0852               	movf	(??_scale+4)^(0+128),w
  3558  0DF7  00B3               	movwf	(___flmul@b+3)^(0+128)
  3559  0DF8  0851               	movf	(??_scale+3)^(0+128),w
  3560  0DF9  00B2               	movwf	(___flmul@b+2)^(0+128)
  3561  0DFA  0850               	movf	(??_scale+2)^(0+128),w
  3562  0DFB  00B1               	movwf	(___flmul@b+1)^(0+128)
  3563  0DFC  084F               	movf	(??_scale+1)^(0+128),w
  3564  0DFD  00B0               	movwf	___flmul@b^(0+128)
  3565  0DFE  300A               	movlw	10
  3566  0DFF  00A7               	movwf	___awdiv@divisor^(0+128)
  3567  0E00  3000               	movlw	0
  3568  0E01  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3569  0E02  085C               	movf	scale@scl^(0+128),w
  3570  0E03  00A9               	movwf	___awdiv@dividend^(0+128)
  3571  0E04  01AA               	clrf	(___awdiv@dividend+1)^(0+128)
  3572  0E05  1BA9               	btfsc	___awdiv@dividend^(0+128),7
  3573  0E06  03AA               	decf	(___awdiv@dividend+1)^(0+128),f
  3574  0E07  160A  158A  2505  120A  158A  	fcall	___awdiv
  3575  0E0C  0827               	movf	?___awdiv^(0+128),w
  3576  0E0D  00D3               	movwf	(??_scale+5)^(0+128)
  3577  0E0E  3001               	movlw	1
  3578  0E0F                     u8295:
  3579  0E0F  1003               	clrc
  3580  0E10  0DD3               	rlf	(??_scale+5)^(0+128),f
  3581  0E11  3EFF               	addlw	-1
  3582  0E12  1D03               	skipz
  3583  0E13  2E0F               	goto	u8295
  3584  0E14  1003               	clrc
  3585  0E15  0D53               	rlf	(??_scale+5)^(0+128),w
  3586  0E16  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  3587  0E17  0084               	movwf	4
  3588  0E18  160A  118A  2000  120A  158A  	fcall	stringdir
  3589  0E1D  00D4               	movwf	(??_scale+6)^(0+128)
  3590  0E1E  160A  118A  2000  120A  158A  	fcall	stringdir
  3591  0E23  00D5               	movwf	((??_scale+6)^(0+128)+1)
  3592  0E24  160A  118A  2000  120A  158A  	fcall	stringdir
  3593  0E29  00D6               	movwf	((??_scale+6)^(0+128)+2)
  3594  0E2A  160A  118A  2000  120A  158A  	fcall	stringdir
  3595  0E2F  00D7               	movwf	((??_scale+6)^(0+128)+3)
  3596  0E30  0857               	movf	(??_scale+9)^(0+128),w
  3597  0E31  00B7               	movwf	(___flmul@a+3)^(0+128)
  3598  0E32  0856               	movf	(??_scale+8)^(0+128),w
  3599  0E33  00B6               	movwf	(___flmul@a+2)^(0+128)
  3600  0E34  0855               	movf	(??_scale+7)^(0+128),w
  3601  0E35  00B5               	movwf	(___flmul@a+1)^(0+128)
  3602  0E36  0854               	movf	(??_scale+6)^(0+128),w
  3603  0E37  00B4               	movwf	___flmul@a^(0+128)
  3604  0E38  120A  158A  21E3   	fcall	___flmul
  3605  0E3B  0833               	movf	(?___flmul+3)^(0+128),w
  3606  0E3C  00CD               	movwf	(?_scale+3)^(0+128)
  3607  0E3D  0832               	movf	(?___flmul+2)^(0+128),w
  3608  0E3E  00CC               	movwf	(?_scale+2)^(0+128)
  3609  0E3F  0831               	movf	(?___flmul+1)^(0+128),w
  3610  0E40  00CB               	movwf	(?_scale+1)^(0+128)
  3611  0E41  0830               	movf	?___flmul^(0+128),w
  3612  0E42  00CA               	movwf	?_scale^(0+128)
  3613  0E43  0008               	return
  3614  0E44                     l4614:
  3615                           
  3616                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  3617  0E44  085C               	movf	scale@scl^(0+128),w
  3618  0E45  00CE               	movwf	??_scale^(0+128)
  3619  0E46  3001               	movlw	1
  3620  0E47                     u8305:
  3621  0E47  1003               	clrc
  3622  0E48  0DCE               	rlf	??_scale^(0+128),f
  3623  0E49  3EFF               	addlw	-1
  3624  0E4A  1D03               	skipz
  3625  0E4B  2E47               	goto	u8305
  3626  0E4C  1003               	clrc
  3627  0E4D  0D4E               	rlf	??_scale^(0+128),w
  3628  0E4E  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3629  0E4F  0084               	movwf	4
  3630  0E50  160A  118A  2000  120A  158A  	fcall	stringdir
  3631  0E55  00CF               	movwf	(??_scale+1)^(0+128)
  3632  0E56  160A  118A  2000  120A  158A  	fcall	stringdir
  3633  0E5B  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3634  0E5C  160A  118A  2000  120A  158A  	fcall	stringdir
  3635  0E61  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3636  0E62  160A  118A  2000   	fcall	stringdir
  3637  0E65  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3638  0E66  0852               	movf	(??_scale+4)^(0+128),w
  3639  0E67  00CD               	movwf	(?_scale+3)^(0+128)
  3640  0E68  0851               	movf	(??_scale+3)^(0+128),w
  3641  0E69  00CC               	movwf	(?_scale+2)^(0+128)
  3642  0E6A  0850               	movf	(??_scale+2)^(0+128),w
  3643  0E6B  00CB               	movwf	(?_scale+1)^(0+128)
  3644  0E6C  084F               	movf	(??_scale+1)^(0+128),w
  3645  0E6D  00CA               	movwf	?_scale^(0+128)
  3646  0E6E  0008               	return
  3647  0E6F                     l4618:
  3648                           
  3649                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  3650  0E6F  085C               	movf	scale@scl^(0+128),w
  3651  0E70  3A80               	xorlw	128
  3652  0E71  3E12               	addlw	-238
  3653  0E72  1C03               	skipc
  3654  0E73  2F50               	goto	l4626
  3655                           
  3656                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  3657  0E74  300A               	movlw	10
  3658  0E75  00A7               	movwf	___awdiv@divisor^(0+128)
  3659  0E76  3000               	movlw	0
  3660  0E77  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3661  0E78  085C               	movf	scale@scl^(0+128),w
  3662  0E79  00A2               	movwf	___awmod@dividend^(0+128)
  3663  0E7A  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3664  0E7B  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3665  0E7C  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3666  0E7D  3064               	movlw	100
  3667  0E7E  00A0               	movwf	___awmod@divisor^(0+128)
  3668  0E7F  3000               	movlw	0
  3669  0E80  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3670  0E81  160A  158A  2415  120A  158A  	fcall	___awmod
  3671  0E86  0821               	movf	(?___awmod+1)^(0+128),w
  3672  0E87  00AA               	movwf	(___awdiv@dividend+1)^(0+128)
  3673  0E88  0820               	movf	?___awmod^(0+128),w
  3674  0E89  00A9               	movwf	___awdiv@dividend^(0+128)
  3675  0E8A  160A  158A  2505  120A  158A  	fcall	___awdiv
  3676  0E8F  0827               	movf	?___awdiv^(0+128),w
  3677  0E90  00CE               	movwf	??_scale^(0+128)
  3678  0E91  3001               	movlw	1
  3679  0E92                     u8325:
  3680  0E92  1003               	clrc
  3681  0E93  0DCE               	rlf	??_scale^(0+128),f
  3682  0E94  3EFF               	addlw	-1
  3683  0E95  1D03               	skipz
  3684  0E96  2E92               	goto	u8325
  3685  0E97  1003               	clrc
  3686  0E98  0D4E               	rlf	??_scale^(0+128),w
  3687  0E99  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  3688  0E9A  0084               	movwf	4
  3689  0E9B  160A  118A  2000  120A  158A  	fcall	stringdir
  3690  0EA0  00CF               	movwf	(??_scale+1)^(0+128)
  3691  0EA1  160A  118A  2000  120A  158A  	fcall	stringdir
  3692  0EA6  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3693  0EA7  160A  118A  2000  120A  158A  	fcall	stringdir
  3694  0EAC  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3695  0EAD  160A  118A  2000  120A  158A  	fcall	stringdir
  3696  0EB2  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3697  0EB3  0852               	movf	(??_scale+4)^(0+128),w
  3698  0EB4  00B3               	movwf	(___flmul@b+3)^(0+128)
  3699  0EB5  0851               	movf	(??_scale+3)^(0+128),w
  3700  0EB6  00B2               	movwf	(___flmul@b+2)^(0+128)
  3701  0EB7  0850               	movf	(??_scale+2)^(0+128),w
  3702  0EB8  00B1               	movwf	(___flmul@b+1)^(0+128)
  3703  0EB9  084F               	movf	(??_scale+1)^(0+128),w
  3704  0EBA  00B0               	movwf	___flmul@b^(0+128)
  3705  0EBB  3064               	movlw	100
  3706  0EBC  00A7               	movwf	___awdiv@divisor^(0+128)
  3707  0EBD  3000               	movlw	0
  3708  0EBE  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3709  0EBF  085C               	movf	scale@scl^(0+128),w
  3710  0EC0  00A9               	movwf	___awdiv@dividend^(0+128)
  3711  0EC1  01AA               	clrf	(___awdiv@dividend+1)^(0+128)
  3712  0EC2  1BA9               	btfsc	___awdiv@dividend^(0+128),7
  3713  0EC3  03AA               	decf	(___awdiv@dividend+1)^(0+128),f
  3714  0EC4  160A  158A  2505  120A  158A  	fcall	___awdiv
  3715  0EC9  0827               	movf	?___awdiv^(0+128),w
  3716  0ECA  00D3               	movwf	(??_scale+5)^(0+128)
  3717  0ECB  3001               	movlw	1
  3718  0ECC                     u8335:
  3719  0ECC  1003               	clrc
  3720  0ECD  0DD3               	rlf	(??_scale+5)^(0+128),f
  3721  0ECE  3EFF               	addlw	-1
  3722  0ECF  1D03               	skipz
  3723  0ED0  2ECC               	goto	u8335
  3724  0ED1  1003               	clrc
  3725  0ED2  0D53               	rlf	(??_scale+5)^(0+128),w
  3726  0ED3  3E49               	addlw	low (((__powers_-__stringbase)| (0+32768)+72))
  3727  0ED4  0084               	movwf	4
  3728  0ED5  160A  118A  2000  120A  158A  	fcall	stringdir
  3729  0EDA  00D4               	movwf	(??_scale+6)^(0+128)
  3730  0EDB  160A  118A  2000  120A  158A  	fcall	stringdir
  3731  0EE0  00D5               	movwf	((??_scale+6)^(0+128)+1)
  3732  0EE1  160A  118A  2000  120A  158A  	fcall	stringdir
  3733  0EE6  00D6               	movwf	((??_scale+6)^(0+128)+2)
  3734  0EE7  160A  118A  2000  120A  158A  	fcall	stringdir
  3735  0EEC  00D7               	movwf	((??_scale+6)^(0+128)+3)
  3736  0EED  0857               	movf	(??_scale+9)^(0+128),w
  3737  0EEE  00B7               	movwf	(___flmul@a+3)^(0+128)
  3738  0EEF  0856               	movf	(??_scale+8)^(0+128),w
  3739  0EF0  00B6               	movwf	(___flmul@a+2)^(0+128)
  3740  0EF1  0855               	movf	(??_scale+7)^(0+128),w
  3741  0EF2  00B5               	movwf	(___flmul@a+1)^(0+128)
  3742  0EF3  0854               	movf	(??_scale+6)^(0+128),w
  3743  0EF4  00B4               	movwf	___flmul@a^(0+128)
  3744  0EF5  120A  158A  21E3  120A  158A  	fcall	___flmul
  3745  0EFA  0833               	movf	(?___flmul+3)^(0+128),w
  3746  0EFB  00DB               	movwf	(_scale$833+3)^(0+128)
  3747  0EFC  0832               	movf	(?___flmul+2)^(0+128),w
  3748  0EFD  00DA               	movwf	(_scale$833+2)^(0+128)
  3749  0EFE  0831               	movf	(?___flmul+1)^(0+128),w
  3750  0EFF  00D9               	movwf	(_scale$833+1)^(0+128)
  3751  0F00  0830               	movf	?___flmul^(0+128),w
  3752  0F01  00D8               	movwf	_scale$833^(0+128)
  3753                           
  3754                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  3755  0F02  300A               	movlw	10
  3756  0F03  00A0               	movwf	___awmod@divisor^(0+128)
  3757  0F04  3000               	movlw	0
  3758  0F05  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3759  0F06  085C               	movf	scale@scl^(0+128),w
  3760  0F07  00A2               	movwf	___awmod@dividend^(0+128)
  3761  0F08  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3762  0F09  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3763  0F0A  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3764  0F0B  160A  158A  2415  120A  158A  	fcall	___awmod
  3765  0F10  0820               	movf	?___awmod^(0+128),w
  3766  0F11  00CE               	movwf	??_scale^(0+128)
  3767  0F12  3001               	movlw	1
  3768  0F13                     u8345:
  3769  0F13  1003               	clrc
  3770  0F14  0DCE               	rlf	??_scale^(0+128),f
  3771  0F15  3EFF               	addlw	-1
  3772  0F16  1D03               	skipz
  3773  0F17  2F13               	goto	u8345
  3774  0F18  1003               	clrc
  3775  0F19  0D4E               	rlf	??_scale^(0+128),w
  3776  0F1A  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3777  0F1B  0084               	movwf	4
  3778  0F1C  160A  118A  2000  120A  158A  	fcall	stringdir
  3779  0F21  00CF               	movwf	(??_scale+1)^(0+128)
  3780  0F22  160A  118A  2000  120A  158A  	fcall	stringdir
  3781  0F27  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3782  0F28  160A  118A  2000  120A  158A  	fcall	stringdir
  3783  0F2D  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3784  0F2E  160A  118A  2000  120A  158A  	fcall	stringdir
  3785  0F33  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3786  0F34  0852               	movf	(??_scale+4)^(0+128),w
  3787  0F35  00B3               	movwf	(___flmul@b+3)^(0+128)
  3788  0F36  0851               	movf	(??_scale+3)^(0+128),w
  3789  0F37  00B2               	movwf	(___flmul@b+2)^(0+128)
  3790  0F38  0850               	movf	(??_scale+2)^(0+128),w
  3791  0F39  00B1               	movwf	(___flmul@b+1)^(0+128)
  3792  0F3A  084F               	movf	(??_scale+1)^(0+128),w
  3793  0F3B  00B0               	movwf	___flmul@b^(0+128)
  3794  0F3C  085B               	movf	(_scale$833+3)^(0+128),w
  3795  0F3D  00B7               	movwf	(___flmul@a+3)^(0+128)
  3796  0F3E  085A               	movf	(_scale$833+2)^(0+128),w
  3797  0F3F  00B6               	movwf	(___flmul@a+2)^(0+128)
  3798  0F40  0859               	movf	(_scale$833+1)^(0+128),w
  3799  0F41  00B5               	movwf	(___flmul@a+1)^(0+128)
  3800  0F42  0858               	movf	_scale$833^(0+128),w
  3801  0F43  00B4               	movwf	___flmul@a^(0+128)
  3802  0F44  120A  158A  21E3   	fcall	___flmul
  3803  0F47  0833               	movf	(?___flmul+3)^(0+128),w
  3804  0F48  00CD               	movwf	(?_scale+3)^(0+128)
  3805  0F49  0832               	movf	(?___flmul+2)^(0+128),w
  3806  0F4A  00CC               	movwf	(?_scale+2)^(0+128)
  3807  0F4B  0831               	movf	(?___flmul+1)^(0+128),w
  3808  0F4C  00CB               	movwf	(?_scale+1)^(0+128)
  3809  0F4D  0830               	movf	?___flmul^(0+128),w
  3810  0F4E  00CA               	movwf	?_scale^(0+128)
  3811  0F4F  0008               	return
  3812  0F50                     l4626:
  3813  0F50  085C               	movf	scale@scl^(0+128),w
  3814  0F51  3A80               	xorlw	128
  3815  0F52  3E75               	addlw	-139
  3816  0F53  1C03               	skipc
  3817  0F54  2FD5               	goto	l4632
  3818                           
  3819                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  3820  0F55  300A               	movlw	10
  3821  0F56  00A0               	movwf	___awmod@divisor^(0+128)
  3822  0F57  3000               	movlw	0
  3823  0F58  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3824  0F59  085C               	movf	scale@scl^(0+128),w
  3825  0F5A  00A2               	movwf	___awmod@dividend^(0+128)
  3826  0F5B  01A3               	clrf	(___awmod@dividend+1)^(0+128)
  3827  0F5C  1BA2               	btfsc	___awmod@dividend^(0+128),7
  3828  0F5D  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  3829  0F5E  160A  158A  2415  120A  158A  	fcall	___awmod
  3830  0F63  0820               	movf	?___awmod^(0+128),w
  3831  0F64  00CE               	movwf	??_scale^(0+128)
  3832  0F65  3001               	movlw	1
  3833  0F66                     u8365:
  3834  0F66  1003               	clrc
  3835  0F67  0DCE               	rlf	??_scale^(0+128),f
  3836  0F68  3EFF               	addlw	-1
  3837  0F69  1D03               	skipz
  3838  0F6A  2F66               	goto	u8365
  3839  0F6B  1003               	clrc
  3840  0F6C  0D4E               	rlf	??_scale^(0+128),w
  3841  0F6D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3842  0F6E  0084               	movwf	4
  3843  0F6F  160A  118A  2000  120A  158A  	fcall	stringdir
  3844  0F74  00CF               	movwf	(??_scale+1)^(0+128)
  3845  0F75  160A  118A  2000  120A  158A  	fcall	stringdir
  3846  0F7A  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3847  0F7B  160A  118A  2000  120A  158A  	fcall	stringdir
  3848  0F80  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3849  0F81  160A  118A  2000  120A  158A  	fcall	stringdir
  3850  0F86  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3851  0F87  0852               	movf	(??_scale+4)^(0+128),w
  3852  0F88  00B3               	movwf	(___flmul@b+3)^(0+128)
  3853  0F89  0851               	movf	(??_scale+3)^(0+128),w
  3854  0F8A  00B2               	movwf	(___flmul@b+2)^(0+128)
  3855  0F8B  0850               	movf	(??_scale+2)^(0+128),w
  3856  0F8C  00B1               	movwf	(___flmul@b+1)^(0+128)
  3857  0F8D  084F               	movf	(??_scale+1)^(0+128),w
  3858  0F8E  00B0               	movwf	___flmul@b^(0+128)
  3859  0F8F  300A               	movlw	10
  3860  0F90  00A7               	movwf	___awdiv@divisor^(0+128)
  3861  0F91  3000               	movlw	0
  3862  0F92  00A8               	movwf	(___awdiv@divisor^(0+128)+1)
  3863  0F93  085C               	movf	scale@scl^(0+128),w
  3864  0F94  00A9               	movwf	___awdiv@dividend^(0+128)
  3865  0F95  01AA               	clrf	(___awdiv@dividend+1)^(0+128)
  3866  0F96  1BA9               	btfsc	___awdiv@dividend^(0+128),7
  3867  0F97  03AA               	decf	(___awdiv@dividend+1)^(0+128),f
  3868  0F98  160A  158A  2505  120A  158A  	fcall	___awdiv
  3869  0F9D  0827               	movf	?___awdiv^(0+128),w
  3870  0F9E  00D3               	movwf	(??_scale+5)^(0+128)
  3871  0F9F  3001               	movlw	1
  3872  0FA0                     u8375:
  3873  0FA0  1003               	clrc
  3874  0FA1  0DD3               	rlf	(??_scale+5)^(0+128),f
  3875  0FA2  3EFF               	addlw	-1
  3876  0FA3  1D03               	skipz
  3877  0FA4  2FA0               	goto	u8375
  3878  0FA5  1003               	clrc
  3879  0FA6  0D53               	rlf	(??_scale+5)^(0+128),w
  3880  0FA7  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  3881  0FA8  0084               	movwf	4
  3882  0FA9  160A  118A  2000  120A  158A  	fcall	stringdir
  3883  0FAE  00D4               	movwf	(??_scale+6)^(0+128)
  3884  0FAF  160A  118A  2000  120A  158A  	fcall	stringdir
  3885  0FB4  00D5               	movwf	((??_scale+6)^(0+128)+1)
  3886  0FB5  160A  118A  2000  120A  158A  	fcall	stringdir
  3887  0FBA  00D6               	movwf	((??_scale+6)^(0+128)+2)
  3888  0FBB  160A  118A  2000  120A  158A  	fcall	stringdir
  3889  0FC0  00D7               	movwf	((??_scale+6)^(0+128)+3)
  3890  0FC1  0857               	movf	(??_scale+9)^(0+128),w
  3891  0FC2  00B7               	movwf	(___flmul@a+3)^(0+128)
  3892  0FC3  0856               	movf	(??_scale+8)^(0+128),w
  3893  0FC4  00B6               	movwf	(___flmul@a+2)^(0+128)
  3894  0FC5  0855               	movf	(??_scale+7)^(0+128),w
  3895  0FC6  00B5               	movwf	(___flmul@a+1)^(0+128)
  3896  0FC7  0854               	movf	(??_scale+6)^(0+128),w
  3897  0FC8  00B4               	movwf	___flmul@a^(0+128)
  3898  0FC9  120A  158A  21E3   	fcall	___flmul
  3899  0FCC  0833               	movf	(?___flmul+3)^(0+128),w
  3900  0FCD  00CD               	movwf	(?_scale+3)^(0+128)
  3901  0FCE  0832               	movf	(?___flmul+2)^(0+128),w
  3902  0FCF  00CC               	movwf	(?_scale+2)^(0+128)
  3903  0FD0  0831               	movf	(?___flmul+1)^(0+128),w
  3904  0FD1  00CB               	movwf	(?_scale+1)^(0+128)
  3905  0FD2  0830               	movf	?___flmul^(0+128),w
  3906  0FD3  00CA               	movwf	?_scale^(0+128)
  3907  0FD4  0008               	return
  3908  0FD5                     l4632:
  3909                           
  3910                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  3911  0FD5  085C               	movf	scale@scl^(0+128),w
  3912  0FD6  00CE               	movwf	??_scale^(0+128)
  3913  0FD7  3001               	movlw	1
  3914  0FD8                     u8385:
  3915  0FD8  1003               	clrc
  3916  0FD9  0DCE               	rlf	??_scale^(0+128),f
  3917  0FDA  3EFF               	addlw	-1
  3918  0FDB  1D03               	skipz
  3919  0FDC  2FD8               	goto	u8385
  3920  0FDD  1003               	clrc
  3921  0FDE  0D4E               	rlf	??_scale^(0+128),w
  3922  0FDF  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3923  0FE0  0084               	movwf	4
  3924  0FE1  160A  118A  2000  120A  158A  	fcall	stringdir
  3925  0FE6  00CF               	movwf	(??_scale+1)^(0+128)
  3926  0FE7  160A  118A  2000  120A  158A  	fcall	stringdir
  3927  0FEC  00D0               	movwf	((??_scale+1)^(0+128)+1)
  3928  0FED  160A  118A  2000  120A  158A  	fcall	stringdir
  3929  0FF2  00D1               	movwf	((??_scale+1)^(0+128)+2)
  3930  0FF3  160A  118A  2000   	fcall	stringdir
  3931  0FF6  00D2               	movwf	((??_scale+1)^(0+128)+3)
  3932  0FF7  0852               	movf	(??_scale+4)^(0+128),w
  3933  0FF8  00CD               	movwf	(?_scale+3)^(0+128)
  3934  0FF9  0851               	movf	(??_scale+3)^(0+128),w
  3935  0FFA  00CC               	movwf	(?_scale+2)^(0+128)
  3936  0FFB  0850               	movf	(??_scale+2)^(0+128),w
  3937  0FFC  00CB               	movwf	(?_scale+1)^(0+128)
  3938  0FFD  084F               	movf	(??_scale+1)^(0+128),w
  3939  0FFE  00CA               	movwf	?_scale^(0+128)
  3940  0FFF  0008               	return
  3941  1000                     __end_of_scale:
  3942                           
  3943                           	psect	text3
  3944  1C15                     __ptext3:	
  3945 ;; *************** function ___awmod *****************
  3946 ;; Defined at:
  3947 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  divisor         2    0[BANK1 ] int 
  3950 ;;  dividend        2    2[BANK1 ] int 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  sign            1    6[BANK1 ] unsigned char 
  3953 ;;  counter         1    5[BANK1 ] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  2    0[BANK1 ] int 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 300/900
  3960 ;;		On exit  : 300/100
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3963 ;;      Params:         0       0       4       0       0
  3964 ;;      Locals:         0       0       2       0       0
  3965 ;;      Temps:          0       0       1       0       0
  3966 ;;      Totals:         0       0       7       0       0
  3967 ;;Total ram usage:        7 bytes
  3968 ;; Hardware stack levels used: 1
  3969 ;; Hardware stack levels required when called: 4
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_scale
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977  1C15                     ___awmod:	
  3978                           ;psect for function ___awmod
  3979                           
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3983  1C15  01A6               	clrf	___awmod@sign^(0+128)
  3984  1C16  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  3985  1C17  2C1F               	goto	l4150
  3986  1C18  09A2               	comf	___awmod@dividend^(0+128),f
  3987  1C19  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  3988  1C1A  0AA2               	incf	___awmod@dividend^(0+128),f
  3989  1C1B  1903               	skipnz
  3990  1C1C  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  3991  1C1D  01A6               	clrf	___awmod@sign^(0+128)
  3992  1C1E  0AA6               	incf	___awmod@sign^(0+128),f
  3993  1C1F                     l4150:
  3994  1C1F  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  3995  1C20  2C26               	goto	l4154
  3996  1C21  09A0               	comf	___awmod@divisor^(0+128),f
  3997  1C22  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  3998  1C23  0AA0               	incf	___awmod@divisor^(0+128),f
  3999  1C24  1903               	skipnz
  4000  1C25  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4001  1C26                     l4154:
  4002  1C26  0820               	movf	___awmod@divisor^(0+128),w
  4003  1C27  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4004  1C28  1903               	btfsc	3,2
  4005  1C29  2C53               	goto	l4172
  4006  1C2A  01A5               	clrf	___awmod@counter^(0+128)
  4007  1C2B  0AA5               	incf	___awmod@counter^(0+128),f
  4008  1C2C                     l4162:
  4009  1C2C  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4010  1C2D  2C3A               	goto	l4164
  4011  1C2E  3001               	movlw	1
  4012  1C2F                     u7185:
  4013  1C2F  1003               	clrc
  4014  1C30  0DA0               	rlf	___awmod@divisor^(0+128),f
  4015  1C31  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  4016  1C32  3EFF               	addlw	-1
  4017  1C33  1D03               	skipz
  4018  1C34  2C2F               	goto	u7185
  4019  1C35  3001               	movlw	1
  4020  1C36  00A4               	movwf	??___awmod^(0+128)
  4021  1C37  0824               	movf	??___awmod^(0+128),w
  4022  1C38  07A5               	addwf	___awmod@counter^(0+128),f
  4023  1C39  2C2C               	goto	l4162
  4024  1C3A                     l4164:
  4025  1C3A  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4026  1C3B  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  4027  1C3C  1D03               	skipz
  4028  1C3D  2C40               	goto	u7205
  4029  1C3E  0820               	movf	___awmod@divisor^(0+128),w
  4030  1C3F  0222               	subwf	___awmod@dividend^(0+128),w
  4031  1C40                     u7205:
  4032  1C40  1C03               	skipc
  4033  1C41  2C48               	goto	l4168
  4034  1C42  0820               	movf	___awmod@divisor^(0+128),w
  4035  1C43  02A2               	subwf	___awmod@dividend^(0+128),f
  4036  1C44  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4037  1C45  1C03               	skipc
  4038  1C46  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  4039  1C47  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  4040  1C48                     l4168:
  4041  1C48  3001               	movlw	1
  4042  1C49                     u7215:
  4043  1C49  1003               	clrc
  4044  1C4A  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  4045  1C4B  0CA0               	rrf	___awmod@divisor^(0+128),f
  4046  1C4C  3EFF               	addlw	-1
  4047  1C4D  1D03               	skipz
  4048  1C4E  2C49               	goto	u7215
  4049  1C4F  3001               	movlw	1
  4050  1C50  02A5               	subwf	___awmod@counter^(0+128),f
  4051  1C51  1D03               	btfss	3,2
  4052  1C52  2C3A               	goto	l4164
  4053  1C53                     l4172:
  4054  1C53  0826               	movf	___awmod@sign^(0+128),w
  4055  1C54  1903               	btfsc	3,2
  4056  1C55  2C5B               	goto	l4176
  4057  1C56  09A2               	comf	___awmod@dividend^(0+128),f
  4058  1C57  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4059  1C58  0AA2               	incf	___awmod@dividend^(0+128),f
  4060  1C59  1903               	skipnz
  4061  1C5A  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4062  1C5B                     l4176:
  4063  1C5B  0823               	movf	(___awmod@dividend+1)^(0+128),w
  4064  1C5C  00A1               	movwf	(?___awmod+1)^(0+128)
  4065  1C5D  0822               	movf	___awmod@dividend^(0+128),w
  4066  1C5E  00A0               	movwf	?___awmod^(0+128)
  4067  1C5F  0008               	return
  4068  1C60                     __end_of___awmod:
  4069                           
  4070                           	psect	text4
  4071  1D05                     __ptext4:	
  4072 ;; *************** function ___awdiv *****************
  4073 ;; Defined at:
  4074 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  divisor         2    7[BANK1 ] int 
  4077 ;;  dividend        2    9[BANK1 ] int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  quotient        2   14[BANK1 ] int 
  4080 ;;  sign            1   13[BANK1 ] unsigned char 
  4081 ;;  counter         1   12[BANK1 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  2    7[BANK1 ] int 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 300/900
  4088 ;;		On exit  : 300/100
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4091 ;;      Params:         0       0       4       0       0
  4092 ;;      Locals:         0       0       4       0       0
  4093 ;;      Temps:          0       0       1       0       0
  4094 ;;      Totals:         0       0       9       0       0
  4095 ;;Total ram usage:        9 bytes
  4096 ;; Hardware stack levels used: 1
  4097 ;; Hardware stack levels required when called: 4
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_scale
  4102 ;;		_sprintf
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106  1D05                     ___awdiv:	
  4107                           ;psect for function ___awdiv
  4108                           
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4112  1D05  01AD               	clrf	___awdiv@sign^(0+128)
  4113  1D06  1FA8               	btfss	(___awdiv@divisor+1)^(0+128),7
  4114  1D07  2D0F               	goto	l4106
  4115  1D08  09A7               	comf	___awdiv@divisor^(0+128),f
  4116  1D09  09A8               	comf	(___awdiv@divisor+1)^(0+128),f
  4117  1D0A  0AA7               	incf	___awdiv@divisor^(0+128),f
  4118  1D0B  1903               	skipnz
  4119  1D0C  0AA8               	incf	(___awdiv@divisor+1)^(0+128),f
  4120  1D0D  01AD               	clrf	___awdiv@sign^(0+128)
  4121  1D0E  0AAD               	incf	___awdiv@sign^(0+128),f
  4122  1D0F                     l4106:
  4123  1D0F  1FAA               	btfss	(___awdiv@dividend+1)^(0+128),7
  4124  1D10  2D1A               	goto	l4112
  4125  1D11  09A9               	comf	___awdiv@dividend^(0+128),f
  4126  1D12  09AA               	comf	(___awdiv@dividend+1)^(0+128),f
  4127  1D13  0AA9               	incf	___awdiv@dividend^(0+128),f
  4128  1D14  1903               	skipnz
  4129  1D15  0AAA               	incf	(___awdiv@dividend+1)^(0+128),f
  4130  1D16  3001               	movlw	1
  4131  1D17  00AB               	movwf	??___awdiv^(0+128)
  4132  1D18  082B               	movf	??___awdiv^(0+128),w
  4133  1D19  06AD               	xorwf	___awdiv@sign^(0+128),f
  4134  1D1A                     l4112:
  4135  1D1A  01AE               	clrf	___awdiv@quotient^(0+128)
  4136  1D1B  01AF               	clrf	(___awdiv@quotient+1)^(0+128)
  4137  1D1C  0827               	movf	___awdiv@divisor^(0+128),w
  4138  1D1D  0428               	iorwf	(___awdiv@divisor+1)^(0+128),w
  4139  1D1E  1903               	btfsc	3,2
  4140  1D1F  2D51               	goto	l4134
  4141  1D20  01AC               	clrf	___awdiv@counter^(0+128)
  4142  1D21  0AAC               	incf	___awdiv@counter^(0+128),f
  4143  1D22                     l4122:
  4144  1D22  1BA8               	btfsc	(___awdiv@divisor+1)^(0+128),7
  4145  1D23  2D30               	goto	l4124
  4146  1D24  3001               	movlw	1
  4147  1D25                     u7085:
  4148  1D25  1003               	clrc
  4149  1D26  0DA7               	rlf	___awdiv@divisor^(0+128),f
  4150  1D27  0DA8               	rlf	(___awdiv@divisor+1)^(0+128),f
  4151  1D28  3EFF               	addlw	-1
  4152  1D29  1D03               	skipz
  4153  1D2A  2D25               	goto	u7085
  4154  1D2B  3001               	movlw	1
  4155  1D2C  00AB               	movwf	??___awdiv^(0+128)
  4156  1D2D  082B               	movf	??___awdiv^(0+128),w
  4157  1D2E  07AC               	addwf	___awdiv@counter^(0+128),f
  4158  1D2F  2D22               	goto	l4122
  4159  1D30                     l4124:
  4160  1D30  3001               	movlw	1
  4161  1D31                     u7105:
  4162  1D31  1003               	clrc
  4163  1D32  0DAE               	rlf	___awdiv@quotient^(0+128),f
  4164  1D33  0DAF               	rlf	(___awdiv@quotient+1)^(0+128),f
  4165  1D34  3EFF               	addlw	-1
  4166  1D35  1D03               	skipz
  4167  1D36  2D31               	goto	u7105
  4168  1D37  0828               	movf	(___awdiv@divisor+1)^(0+128),w
  4169  1D38  022A               	subwf	(___awdiv@dividend+1)^(0+128),w
  4170  1D39  1D03               	skipz
  4171  1D3A  2D3D               	goto	u7115
  4172  1D3B  0827               	movf	___awdiv@divisor^(0+128),w
  4173  1D3C  0229               	subwf	___awdiv@dividend^(0+128),w
  4174  1D3D                     u7115:
  4175  1D3D  1C03               	skipc
  4176  1D3E  2D46               	goto	l4130
  4177  1D3F  0827               	movf	___awdiv@divisor^(0+128),w
  4178  1D40  02A9               	subwf	___awdiv@dividend^(0+128),f
  4179  1D41  0828               	movf	(___awdiv@divisor+1)^(0+128),w
  4180  1D42  1C03               	skipc
  4181  1D43  03AA               	decf	(___awdiv@dividend+1)^(0+128),f
  4182  1D44  02AA               	subwf	(___awdiv@dividend+1)^(0+128),f
  4183  1D45  142E               	bsf	___awdiv@quotient^(0+128),0
  4184  1D46                     l4130:
  4185  1D46  3001               	movlw	1
  4186  1D47                     u7125:
  4187  1D47  1003               	clrc
  4188  1D48  0CA8               	rrf	(___awdiv@divisor+1)^(0+128),f
  4189  1D49  0CA7               	rrf	___awdiv@divisor^(0+128),f
  4190  1D4A  3EFF               	addlw	-1
  4191  1D4B  1D03               	skipz
  4192  1D4C  2D47               	goto	u7125
  4193  1D4D  3001               	movlw	1
  4194  1D4E  02AC               	subwf	___awdiv@counter^(0+128),f
  4195  1D4F  1D03               	btfss	3,2
  4196  1D50  2D30               	goto	l4124
  4197  1D51                     l4134:
  4198  1D51  082D               	movf	___awdiv@sign^(0+128),w
  4199  1D52  1903               	btfsc	3,2
  4200  1D53  2D59               	goto	l4138
  4201  1D54  09AE               	comf	___awdiv@quotient^(0+128),f
  4202  1D55  09AF               	comf	(___awdiv@quotient+1)^(0+128),f
  4203  1D56  0AAE               	incf	___awdiv@quotient^(0+128),f
  4204  1D57  1903               	skipnz
  4205  1D58  0AAF               	incf	(___awdiv@quotient+1)^(0+128),f
  4206  1D59                     l4138:
  4207  1D59  082F               	movf	(___awdiv@quotient+1)^(0+128),w
  4208  1D5A  00A8               	movwf	(?___awdiv+1)^(0+128)
  4209  1D5B  082E               	movf	___awdiv@quotient^(0+128),w
  4210  1D5C  00A7               	movwf	?___awdiv^(0+128)
  4211  1D5D  0008               	return
  4212  1D5E                     __end_of___awdiv:
  4213                           
  4214                           	psect	text5
  4215  197C                     __ptext5:	
  4216 ;; *************** function _isdigit *****************
  4217 ;; Defined at:
  4218 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  c               1    wreg     unsigned char 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  c               1    1[BANK1 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;		None               void
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 300/300
  4229 ;;		On exit  : 300/100
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4232 ;;      Params:         0       0       0       0       0
  4233 ;;      Locals:         0       0       2       0       0
  4234 ;;      Temps:          0       0       0       0       0
  4235 ;;      Totals:         0       0       2       0       0
  4236 ;;Total ram usage:        2 bytes
  4237 ;; Hardware stack levels used: 1
  4238 ;; Hardware stack levels required when called: 4
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_sprintf
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246  197C                     _isdigit:	
  4247                           ;psect for function _isdigit
  4248                           
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4252                           ;isdigit@c stored from wreg
  4253  197C  1303               	bcf	3,6	;RP1=0, select bank1
  4254  197D  00A1               	movwf	isdigit@c^(0+128)
  4255  197E  01A0               	clrf	_isdigit$652^(0+128)
  4256  197F  303A               	movlw	58
  4257  1980  0221               	subwf	isdigit@c^(0+128),w
  4258  1981  1803               	skipnc
  4259  1982  2989               	goto	l4644
  4260  1983  3030               	movlw	48
  4261  1984  0221               	subwf	isdigit@c^(0+128),w
  4262  1985  1C03               	skipc
  4263  1986  2989               	goto	l4644
  4264  1987  01A0               	clrf	_isdigit$652^(0+128)
  4265  1988  0AA0               	incf	_isdigit$652^(0+128),f
  4266  1989                     l4644:
  4267  1989  0C20               	rrf	_isdigit$652^(0+128),w
  4268  198A  0008               	return
  4269  198B                     __end_of_isdigit:
  4270                           
  4271                           	psect	text6
  4272  0820                     __ptext6:	
  4273 ;; *************** function _fround *****************
  4274 ;; Defined at:
  4275 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  prec            1    wreg     unsigned char 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  prec            1   61[BANK1 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  4   42[BANK1 ] unsigned char 
  4282 ;; Registers used:
  4283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 300/B00
  4286 ;;		On exit  : 300/100
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4289 ;;      Params:         0       0       4       0       0
  4290 ;;      Locals:         0       0       9       0       0
  4291 ;;      Temps:          0       0       7       0       0
  4292 ;;      Totals:         0       0      20       0       0
  4293 ;;Total ram usage:       20 bytes
  4294 ;; Hardware stack levels used: 1
  4295 ;; Hardware stack levels required when called: 6
  4296 ;; This function calls:
  4297 ;;		___flmul
  4298 ;;		___lbdiv
  4299 ;;		___lbmod
  4300 ;; This function is called by:
  4301 ;;		_sprintf
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305  0820                     _fround:	
  4306                           ;psect for function _fround
  4307                           
  4308                           
  4309                           ;incstack = 0
  4310 ;; using string table level
  4311                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4312                           ;fround@prec stored from wreg
  4313  0820  1303               	bcf	3,6	;RP1=0, select bank1
  4314  0821  00DD               	movwf	fround@prec^(0+128)
  4315                           
  4316                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  4317  0822  306E               	movlw	110
  4318  0823  025D               	subwf	fround@prec^(0+128),w
  4319  0824  1C03               	skipc
  4320  0825  290C               	goto	l4586
  4321                           
  4322                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  4323  0826  303F               	movlw	63
  4324  0827  00B3               	movwf	(___flmul@b+3)^(0+128)
  4325  0828  3000               	movlw	0
  4326  0829  00B2               	movwf	(___flmul@b+2)^(0+128)
  4327  082A  3000               	movlw	0
  4328  082B  00B1               	movwf	(___flmul@b+1)^(0+128)
  4329  082C  3000               	movlw	0
  4330  082D  00B0               	movwf	___flmul@b^(0+128)
  4331  082E  3064               	movlw	100
  4332  082F  00CE               	movwf	??_fround^(0+128)
  4333  0830  084E               	movf	??_fround^(0+128),w
  4334  0831  00A7               	movwf	___lbdiv@divisor^(0+128)
  4335  0832  085D               	movf	fround@prec^(0+128),w
  4336  0833  160A  158A  21AC  120A  158A  	fcall	___lbdiv
  4337  0838  00CF               	movwf	(??_fround+1)^(0+128)
  4338  0839  3001               	movlw	1
  4339  083A                     u8155:
  4340  083A  1003               	clrc
  4341  083B  0DCF               	rlf	(??_fround+1)^(0+128),f
  4342  083C  3EFF               	addlw	-1
  4343  083D  1D03               	skipz
  4344  083E  283A               	goto	u8155
  4345  083F  1003               	clrc
  4346  0840  0D4F               	rlf	(??_fround+1)^(0+128),w
  4347  0841  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  4348  0842  0084               	movwf	4
  4349  0843  160A  118A  2000  120A  158A  	fcall	stringdir
  4350  0848  00D0               	movwf	(??_fround+2)^(0+128)
  4351  0849  160A  118A  2000  120A  158A  	fcall	stringdir
  4352  084E  00D1               	movwf	((??_fround+2)^(0+128)+1)
  4353  084F  160A  118A  2000  120A  158A  	fcall	stringdir
  4354  0854  00D2               	movwf	((??_fround+2)^(0+128)+2)
  4355  0855  160A  118A  2000  120A  158A  	fcall	stringdir
  4356  085A  00D3               	movwf	((??_fround+2)^(0+128)+3)
  4357  085B  0853               	movf	(??_fround+5)^(0+128),w
  4358  085C  00B7               	movwf	(___flmul@a+3)^(0+128)
  4359  085D  0852               	movf	(??_fround+4)^(0+128),w
  4360  085E  00B6               	movwf	(___flmul@a+2)^(0+128)
  4361  085F  0851               	movf	(??_fround+3)^(0+128),w
  4362  0860  00B5               	movwf	(___flmul@a+1)^(0+128)
  4363  0861  0850               	movf	(??_fround+2)^(0+128),w
  4364  0862  00B4               	movwf	___flmul@a^(0+128)
  4365  0863  120A  158A  21E3  120A  158A  	fcall	___flmul
  4366  0868  0833               	movf	(?___flmul+3)^(0+128),w
  4367  0869  00DC               	movwf	(_fround$831+3)^(0+128)
  4368  086A  0832               	movf	(?___flmul+2)^(0+128),w
  4369  086B  00DB               	movwf	(_fround$831+2)^(0+128)
  4370  086C  0831               	movf	(?___flmul+1)^(0+128),w
  4371  086D  00DA               	movwf	(_fround$831+1)^(0+128)
  4372  086E  0830               	movf	?___flmul^(0+128),w
  4373  086F  00D9               	movwf	_fround$831^(0+128)
  4374                           
  4375                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  4376  0870  300A               	movlw	10
  4377  0871  00CE               	movwf	??_fround^(0+128)
  4378  0872  084E               	movf	??_fround^(0+128),w
  4379  0873  00A7               	movwf	___lbdiv@divisor^(0+128)
  4380  0874  3064               	movlw	100
  4381  0875  00CF               	movwf	(??_fround+1)^(0+128)
  4382  0876  084F               	movf	(??_fround+1)^(0+128),w
  4383  0877  00A0               	movwf	___lbmod@divisor^(0+128)
  4384  0878  085D               	movf	fround@prec^(0+128),w
  4385  0879  160A  158A  2213  120A  158A  	fcall	___lbmod
  4386  087E  160A  158A  21AC  120A  158A  	fcall	___lbdiv
  4387  0883  00D0               	movwf	(??_fround+2)^(0+128)
  4388  0884  3001               	movlw	1
  4389  0885                     u8165:
  4390  0885  1003               	clrc
  4391  0886  0DD0               	rlf	(??_fround+2)^(0+128),f
  4392  0887  3EFF               	addlw	-1
  4393  0888  1D03               	skipz
  4394  0889  2885               	goto	u8165
  4395  088A  1003               	clrc
  4396  088B  0D50               	rlf	(??_fround+2)^(0+128),w
  4397  088C  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  4398  088D  0084               	movwf	4
  4399  088E  160A  118A  2000  120A  158A  	fcall	stringdir
  4400  0893  00D1               	movwf	(??_fround+3)^(0+128)
  4401  0894  160A  118A  2000  120A  158A  	fcall	stringdir
  4402  0899  00D2               	movwf	((??_fround+3)^(0+128)+1)
  4403  089A  160A  118A  2000  120A  158A  	fcall	stringdir
  4404  089F  00D3               	movwf	((??_fround+3)^(0+128)+2)
  4405  08A0  160A  118A  2000  120A  158A  	fcall	stringdir
  4406  08A5  00D4               	movwf	((??_fround+3)^(0+128)+3)
  4407  08A6  0854               	movf	(??_fround+6)^(0+128),w
  4408  08A7  00B3               	movwf	(___flmul@b+3)^(0+128)
  4409  08A8  0853               	movf	(??_fround+5)^(0+128),w
  4410  08A9  00B2               	movwf	(___flmul@b+2)^(0+128)
  4411  08AA  0852               	movf	(??_fround+4)^(0+128),w
  4412  08AB  00B1               	movwf	(___flmul@b+1)^(0+128)
  4413  08AC  0851               	movf	(??_fround+3)^(0+128),w
  4414  08AD  00B0               	movwf	___flmul@b^(0+128)
  4415  08AE  085C               	movf	(_fround$831+3)^(0+128),w
  4416  08AF  00B7               	movwf	(___flmul@a+3)^(0+128)
  4417  08B0  085B               	movf	(_fround$831+2)^(0+128),w
  4418  08B1  00B6               	movwf	(___flmul@a+2)^(0+128)
  4419  08B2  085A               	movf	(_fround$831+1)^(0+128),w
  4420  08B3  00B5               	movwf	(___flmul@a+1)^(0+128)
  4421  08B4  0859               	movf	_fround$831^(0+128),w
  4422  08B5  00B4               	movwf	___flmul@a^(0+128)
  4423  08B6  120A  158A  21E3  120A  158A  	fcall	___flmul
  4424  08BB  0833               	movf	(?___flmul+3)^(0+128),w
  4425  08BC  00D8               	movwf	(_fround$832+3)^(0+128)
  4426  08BD  0832               	movf	(?___flmul+2)^(0+128),w
  4427  08BE  00D7               	movwf	(_fround$832+2)^(0+128)
  4428  08BF  0831               	movf	(?___flmul+1)^(0+128),w
  4429  08C0  00D6               	movwf	(_fround$832+1)^(0+128)
  4430  08C1  0830               	movf	?___flmul^(0+128),w
  4431  08C2  00D5               	movwf	_fround$832^(0+128)
  4432                           
  4433                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  4434  08C3  300A               	movlw	10
  4435  08C4  00CE               	movwf	??_fround^(0+128)
  4436  08C5  084E               	movf	??_fround^(0+128),w
  4437  08C6  00A0               	movwf	___lbmod@divisor^(0+128)
  4438  08C7  085D               	movf	fround@prec^(0+128),w
  4439  08C8  160A  158A  2213  120A  158A  	fcall	___lbmod
  4440  08CD  00CF               	movwf	(??_fround+1)^(0+128)
  4441  08CE  3001               	movlw	1
  4442  08CF                     u8175:
  4443  08CF  1003               	clrc
  4444  08D0  0DCF               	rlf	(??_fround+1)^(0+128),f
  4445  08D1  3EFF               	addlw	-1
  4446  08D2  1D03               	skipz
  4447  08D3  28CF               	goto	u8175
  4448  08D4  1003               	clrc
  4449  08D5  0D4F               	rlf	(??_fround+1)^(0+128),w
  4450  08D6  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4451  08D7  0084               	movwf	4
  4452  08D8  160A  118A  2000  120A  158A  	fcall	stringdir
  4453  08DD  00D0               	movwf	(??_fround+2)^(0+128)
  4454  08DE  160A  118A  2000  120A  158A  	fcall	stringdir
  4455  08E3  00D1               	movwf	((??_fround+2)^(0+128)+1)
  4456  08E4  160A  118A  2000  120A  158A  	fcall	stringdir
  4457  08E9  00D2               	movwf	((??_fround+2)^(0+128)+2)
  4458  08EA  160A  118A  2000  120A  158A  	fcall	stringdir
  4459  08EF  00D3               	movwf	((??_fround+2)^(0+128)+3)
  4460  08F0  0853               	movf	(??_fround+5)^(0+128),w
  4461  08F1  00B3               	movwf	(___flmul@b+3)^(0+128)
  4462  08F2  0852               	movf	(??_fround+4)^(0+128),w
  4463  08F3  00B2               	movwf	(___flmul@b+2)^(0+128)
  4464  08F4  0851               	movf	(??_fround+3)^(0+128),w
  4465  08F5  00B1               	movwf	(___flmul@b+1)^(0+128)
  4466  08F6  0850               	movf	(??_fround+2)^(0+128),w
  4467  08F7  00B0               	movwf	___flmul@b^(0+128)
  4468  08F8  0858               	movf	(_fround$832+3)^(0+128),w
  4469  08F9  00B7               	movwf	(___flmul@a+3)^(0+128)
  4470  08FA  0857               	movf	(_fround$832+2)^(0+128),w
  4471  08FB  00B6               	movwf	(___flmul@a+2)^(0+128)
  4472  08FC  0856               	movf	(_fround$832+1)^(0+128),w
  4473  08FD  00B5               	movwf	(___flmul@a+1)^(0+128)
  4474  08FE  0855               	movf	_fround$832^(0+128),w
  4475  08FF  00B4               	movwf	___flmul@a^(0+128)
  4476  0900  120A  158A  21E3   	fcall	___flmul
  4477  0903  0833               	movf	(?___flmul+3)^(0+128),w
  4478  0904  00CD               	movwf	(?_fround+3)^(0+128)
  4479  0905  0832               	movf	(?___flmul+2)^(0+128),w
  4480  0906  00CC               	movwf	(?_fround+2)^(0+128)
  4481  0907  0831               	movf	(?___flmul+1)^(0+128),w
  4482  0908  00CB               	movwf	(?_fround+1)^(0+128)
  4483  0909  0830               	movf	?___flmul^(0+128),w
  4484  090A  00CA               	movwf	?_fround^(0+128)
  4485  090B  0008               	return
  4486  090C                     l4586:
  4487  090C  300B               	movlw	11
  4488  090D  025D               	subwf	fround@prec^(0+128),w
  4489  090E  1C03               	skipc
  4490  090F  29A3               	goto	l4592
  4491                           
  4492                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4493  0910  303F               	movlw	63
  4494  0911  00B3               	movwf	(___flmul@b+3)^(0+128)
  4495  0912  3000               	movlw	0
  4496  0913  00B2               	movwf	(___flmul@b+2)^(0+128)
  4497  0914  3000               	movlw	0
  4498  0915  00B1               	movwf	(___flmul@b+1)^(0+128)
  4499  0916  3000               	movlw	0
  4500  0917  00B0               	movwf	___flmul@b^(0+128)
  4501  0918  300A               	movlw	10
  4502  0919  00CE               	movwf	??_fround^(0+128)
  4503  091A  084E               	movf	??_fround^(0+128),w
  4504  091B  00A7               	movwf	___lbdiv@divisor^(0+128)
  4505  091C  085D               	movf	fround@prec^(0+128),w
  4506  091D  160A  158A  21AC  120A  158A  	fcall	___lbdiv
  4507  0922  00CF               	movwf	(??_fround+1)^(0+128)
  4508  0923  3001               	movlw	1
  4509  0924                     u8195:
  4510  0924  1003               	clrc
  4511  0925  0DCF               	rlf	(??_fround+1)^(0+128),f
  4512  0926  3EFF               	addlw	-1
  4513  0927  1D03               	skipz
  4514  0928  2924               	goto	u8195
  4515  0929  1003               	clrc
  4516  092A  0D4F               	rlf	(??_fround+1)^(0+128),w
  4517  092B  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  4518  092C  0084               	movwf	4
  4519  092D  160A  118A  2000  120A  158A  	fcall	stringdir
  4520  0932  00D0               	movwf	(??_fround+2)^(0+128)
  4521  0933  160A  118A  2000  120A  158A  	fcall	stringdir
  4522  0938  00D1               	movwf	((??_fround+2)^(0+128)+1)
  4523  0939  160A  118A  2000  120A  158A  	fcall	stringdir
  4524  093E  00D2               	movwf	((??_fround+2)^(0+128)+2)
  4525  093F  160A  118A  2000  120A  158A  	fcall	stringdir
  4526  0944  00D3               	movwf	((??_fround+2)^(0+128)+3)
  4527  0945  0853               	movf	(??_fround+5)^(0+128),w
  4528  0946  00B7               	movwf	(___flmul@a+3)^(0+128)
  4529  0947  0852               	movf	(??_fround+4)^(0+128),w
  4530  0948  00B6               	movwf	(___flmul@a+2)^(0+128)
  4531  0949  0851               	movf	(??_fround+3)^(0+128),w
  4532  094A  00B5               	movwf	(___flmul@a+1)^(0+128)
  4533  094B  0850               	movf	(??_fround+2)^(0+128),w
  4534  094C  00B4               	movwf	___flmul@a^(0+128)
  4535  094D  120A  158A  21E3  120A  158A  	fcall	___flmul
  4536  0952  0833               	movf	(?___flmul+3)^(0+128),w
  4537  0953  00DC               	movwf	(_fround$831+3)^(0+128)
  4538  0954  0832               	movf	(?___flmul+2)^(0+128),w
  4539  0955  00DB               	movwf	(_fround$831+2)^(0+128)
  4540  0956  0831               	movf	(?___flmul+1)^(0+128),w
  4541  0957  00DA               	movwf	(_fround$831+1)^(0+128)
  4542  0958  0830               	movf	?___flmul^(0+128),w
  4543  0959  00D9               	movwf	_fround$831^(0+128)
  4544                           
  4545                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4546  095A  300A               	movlw	10
  4547  095B  00CE               	movwf	??_fround^(0+128)
  4548  095C  084E               	movf	??_fround^(0+128),w
  4549  095D  00A0               	movwf	___lbmod@divisor^(0+128)
  4550  095E  085D               	movf	fround@prec^(0+128),w
  4551  095F  160A  158A  2213  120A  158A  	fcall	___lbmod
  4552  0964  00CF               	movwf	(??_fround+1)^(0+128)
  4553  0965  3001               	movlw	1
  4554  0966                     u8205:
  4555  0966  1003               	clrc
  4556  0967  0DCF               	rlf	(??_fround+1)^(0+128),f
  4557  0968  3EFF               	addlw	-1
  4558  0969  1D03               	skipz
  4559  096A  2966               	goto	u8205
  4560  096B  1003               	clrc
  4561  096C  0D4F               	rlf	(??_fround+1)^(0+128),w
  4562  096D  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4563  096E  0084               	movwf	4
  4564  096F  160A  118A  2000  120A  158A  	fcall	stringdir
  4565  0974  00D0               	movwf	(??_fround+2)^(0+128)
  4566  0975  160A  118A  2000  120A  158A  	fcall	stringdir
  4567  097A  00D1               	movwf	((??_fround+2)^(0+128)+1)
  4568  097B  160A  118A  2000  120A  158A  	fcall	stringdir
  4569  0980  00D2               	movwf	((??_fround+2)^(0+128)+2)
  4570  0981  160A  118A  2000  120A  158A  	fcall	stringdir
  4571  0986  00D3               	movwf	((??_fround+2)^(0+128)+3)
  4572  0987  0853               	movf	(??_fround+5)^(0+128),w
  4573  0988  00B3               	movwf	(___flmul@b+3)^(0+128)
  4574  0989  0852               	movf	(??_fround+4)^(0+128),w
  4575  098A  00B2               	movwf	(___flmul@b+2)^(0+128)
  4576  098B  0851               	movf	(??_fround+3)^(0+128),w
  4577  098C  00B1               	movwf	(___flmul@b+1)^(0+128)
  4578  098D  0850               	movf	(??_fround+2)^(0+128),w
  4579  098E  00B0               	movwf	___flmul@b^(0+128)
  4580  098F  085C               	movf	(_fround$831+3)^(0+128),w
  4581  0990  00B7               	movwf	(___flmul@a+3)^(0+128)
  4582  0991  085B               	movf	(_fround$831+2)^(0+128),w
  4583  0992  00B6               	movwf	(___flmul@a+2)^(0+128)
  4584  0993  085A               	movf	(_fround$831+1)^(0+128),w
  4585  0994  00B5               	movwf	(___flmul@a+1)^(0+128)
  4586  0995  0859               	movf	_fround$831^(0+128),w
  4587  0996  00B4               	movwf	___flmul@a^(0+128)
  4588  0997  120A  158A  21E3   	fcall	___flmul
  4589  099A  0833               	movf	(?___flmul+3)^(0+128),w
  4590  099B  00CD               	movwf	(?_fround+3)^(0+128)
  4591  099C  0832               	movf	(?___flmul+2)^(0+128),w
  4592  099D  00CC               	movwf	(?_fround+2)^(0+128)
  4593  099E  0831               	movf	(?___flmul+1)^(0+128),w
  4594  099F  00CB               	movwf	(?_fround+1)^(0+128)
  4595  09A0  0830               	movf	?___flmul^(0+128),w
  4596  09A1  00CA               	movwf	?_fround^(0+128)
  4597  09A2  0008               	return
  4598  09A3                     l4592:
  4599                           
  4600                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  4601  09A3  303F               	movlw	63
  4602  09A4  00B3               	movwf	(___flmul@b+3)^(0+128)
  4603  09A5  3000               	movlw	0
  4604  09A6  00B2               	movwf	(___flmul@b+2)^(0+128)
  4605  09A7  3000               	movlw	0
  4606  09A8  00B1               	movwf	(___flmul@b+1)^(0+128)
  4607  09A9  3000               	movlw	0
  4608  09AA  00B0               	movwf	___flmul@b^(0+128)
  4609  09AB  085D               	movf	fround@prec^(0+128),w
  4610  09AC  00CE               	movwf	??_fround^(0+128)
  4611  09AD  3001               	movlw	1
  4612  09AE                     u8215:
  4613  09AE  1003               	clrc
  4614  09AF  0DCE               	rlf	??_fround^(0+128),f
  4615  09B0  3EFF               	addlw	-1
  4616  09B1  1D03               	skipz
  4617  09B2  29AE               	goto	u8215
  4618  09B3  1003               	clrc
  4619  09B4  0D4E               	rlf	??_fround^(0+128),w
  4620  09B5  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4621  09B6  0084               	movwf	4
  4622  09B7  160A  118A  2000  120A  158A  	fcall	stringdir
  4623  09BC  00CF               	movwf	(??_fround+1)^(0+128)
  4624  09BD  160A  118A  2000  120A  158A  	fcall	stringdir
  4625  09C2  00D0               	movwf	((??_fround+1)^(0+128)+1)
  4626  09C3  160A  118A  2000  120A  158A  	fcall	stringdir
  4627  09C8  00D1               	movwf	((??_fround+1)^(0+128)+2)
  4628  09C9  160A  118A  2000  120A  158A  	fcall	stringdir
  4629  09CE  00D2               	movwf	((??_fround+1)^(0+128)+3)
  4630  09CF  0852               	movf	(??_fround+4)^(0+128),w
  4631  09D0  00B7               	movwf	(___flmul@a+3)^(0+128)
  4632  09D1  0851               	movf	(??_fround+3)^(0+128),w
  4633  09D2  00B6               	movwf	(___flmul@a+2)^(0+128)
  4634  09D3  0850               	movf	(??_fround+2)^(0+128),w
  4635  09D4  00B5               	movwf	(___flmul@a+1)^(0+128)
  4636  09D5  084F               	movf	(??_fround+1)^(0+128),w
  4637  09D6  00B4               	movwf	___flmul@a^(0+128)
  4638  09D7  120A  158A  21E3   	fcall	___flmul
  4639  09DA  0833               	movf	(?___flmul+3)^(0+128),w
  4640  09DB  00CD               	movwf	(?_fround+3)^(0+128)
  4641  09DC  0832               	movf	(?___flmul+2)^(0+128),w
  4642  09DD  00CC               	movwf	(?_fround+2)^(0+128)
  4643  09DE  0831               	movf	(?___flmul+1)^(0+128),w
  4644  09DF  00CB               	movwf	(?_fround+1)^(0+128)
  4645  09E0  0830               	movf	?___flmul^(0+128),w
  4646  09E1  00CA               	movwf	?_fround^(0+128)
  4647  09E2  0008               	return
  4648  09E3                     __end_of_fround:
  4649                           
  4650                           	psect	text7
  4651  1A13                     __ptext7:	
  4652 ;; *************** function ___lbmod *****************
  4653 ;; Defined at:
  4654 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  dividend        1    wreg     unsigned char 
  4657 ;;  divisor         1    0[BANK1 ] unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  dividend        1    4[BANK1 ] unsigned char 
  4660 ;;  rem             1    6[BANK1 ] unsigned char 
  4661 ;;  counter         1    5[BANK1 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      unsigned char 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 300/900
  4668 ;;		On exit  : 300/100
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4671 ;;      Params:         0       0       1       0       0
  4672 ;;      Locals:         0       0       3       0       0
  4673 ;;      Temps:          0       0       3       0       0
  4674 ;;      Totals:         0       0       7       0       0
  4675 ;;Total ram usage:        7 bytes
  4676 ;; Hardware stack levels used: 1
  4677 ;; Hardware stack levels required when called: 4
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_fround
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685  1A13                     ___lbmod:	
  4686                           ;psect for function ___lbmod
  4687                           
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4691                           ;___lbmod@dividend stored from wreg
  4692  1A13  00A4               	movwf	___lbmod@dividend^(0+128)
  4693  1A14  3008               	movlw	8
  4694  1A15  00A1               	movwf	??___lbmod^(0+128)
  4695  1A16  0821               	movf	??___lbmod^(0+128),w
  4696  1A17  00A5               	movwf	___lbmod@counter^(0+128)
  4697  1A18  01A6               	clrf	___lbmod@rem^(0+128)
  4698  1A19                     l4210:
  4699  1A19  0824               	movf	___lbmod@dividend^(0+128),w
  4700  1A1A  00A1               	movwf	??___lbmod^(0+128)
  4701  1A1B  3007               	movlw	7
  4702  1A1C                     u7285:
  4703  1A1C  1003               	clrc
  4704  1A1D  0CA1               	rrf	??___lbmod^(0+128),f
  4705  1A1E  3EFF               	addlw	-1
  4706  1A1F  1D03               	skipz
  4707  1A20  2A1C               	goto	u7285
  4708  1A21  0826               	movf	___lbmod@rem^(0+128),w
  4709  1A22  00A2               	movwf	(??___lbmod+1)^(0+128)
  4710  1A23  0722               	addwf	(??___lbmod+1)^(0+128),w
  4711  1A24  0421               	iorwf	??___lbmod^(0+128),w
  4712  1A25  00A3               	movwf	(??___lbmod+2)^(0+128)
  4713  1A26  0823               	movf	(??___lbmod+2)^(0+128),w
  4714  1A27  00A6               	movwf	___lbmod@rem^(0+128)
  4715  1A28  1003               	clrc
  4716  1A29  0DA4               	rlf	___lbmod@dividend^(0+128),f
  4717  1A2A  0820               	movf	___lbmod@divisor^(0+128),w
  4718  1A2B  0226               	subwf	___lbmod@rem^(0+128),w
  4719  1A2C  1C03               	skipc
  4720  1A2D  2A30               	goto	l587
  4721  1A2E  0820               	movf	___lbmod@divisor^(0+128),w
  4722  1A2F  02A6               	subwf	___lbmod@rem^(0+128),f
  4723  1A30                     l587:
  4724  1A30  3001               	movlw	1
  4725  1A31  02A5               	subwf	___lbmod@counter^(0+128),f
  4726  1A32  1D03               	btfss	3,2
  4727  1A33  2A19               	goto	l4210
  4728  1A34  0826               	movf	___lbmod@rem^(0+128),w
  4729  1A35  0008               	return
  4730  1A36                     __end_of___lbmod:
  4731                           
  4732                           	psect	text8
  4733  19AC                     __ptext8:	
  4734 ;; *************** function ___lbdiv *****************
  4735 ;; Defined at:
  4736 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  dividend        1    wreg     unsigned char 
  4739 ;;  divisor         1    7[BANK1 ] unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  dividend        1    9[BANK1 ] unsigned char 
  4742 ;;  quotient        1   11[BANK1 ] unsigned char 
  4743 ;;  counter         1   10[BANK1 ] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      unsigned char 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 300/900
  4750 ;;		On exit  : 300/100
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4753 ;;      Params:         0       0       1       0       0
  4754 ;;      Locals:         0       0       3       0       0
  4755 ;;      Temps:          0       0       1       0       0
  4756 ;;      Totals:         0       0       5       0       0
  4757 ;;Total ram usage:        5 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 4
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_fround
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767  19AC                     ___lbdiv:	
  4768                           ;psect for function ___lbdiv
  4769                           
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  4773                           ;___lbdiv@dividend stored from wreg
  4774  19AC  00A9               	movwf	___lbdiv@dividend^(0+128)
  4775  19AD  01AB               	clrf	___lbdiv@quotient^(0+128)
  4776  19AE  0827               	movf	___lbdiv@divisor^(0+128),w
  4777  19AF  1903               	btfsc	3,2
  4778  19B0  29CB               	goto	l4202
  4779  19B1  01AA               	clrf	___lbdiv@counter^(0+128)
  4780  19B2  0AAA               	incf	___lbdiv@counter^(0+128),f
  4781  19B3                     l4190:
  4782  19B3  1BA7               	btfsc	___lbdiv@divisor^(0+128),7
  4783  19B4  29BC               	goto	l4192
  4784  19B5  1003               	clrc
  4785  19B6  0DA7               	rlf	___lbdiv@divisor^(0+128),f
  4786  19B7  3001               	movlw	1
  4787  19B8  00A8               	movwf	??___lbdiv^(0+128)
  4788  19B9  0828               	movf	??___lbdiv^(0+128),w
  4789  19BA  07AA               	addwf	___lbdiv@counter^(0+128),f
  4790  19BB  29B3               	goto	l4190
  4791  19BC                     l4192:
  4792  19BC  1003               	clrc
  4793  19BD  0DAB               	rlf	___lbdiv@quotient^(0+128),f
  4794  19BE  0827               	movf	___lbdiv@divisor^(0+128),w
  4795  19BF  0229               	subwf	___lbdiv@dividend^(0+128),w
  4796  19C0  1C03               	skipc
  4797  19C1  29C6               	goto	L7
  4798  19C2  0827               	movf	___lbdiv@divisor^(0+128),w
  4799  19C3  02A9               	subwf	___lbdiv@dividend^(0+128),f
  4800  19C4  142B               	bsf	___lbdiv@quotient^(0+128),0
  4801  19C5  1003               	clrc
  4802  19C6                     L7:
  4803  19C6  0CA7               	rrf	___lbdiv@divisor^(0+128),f
  4804  19C7  3001               	movlw	1
  4805  19C8  02AA               	subwf	___lbdiv@counter^(0+128),f
  4806  19C9  1D03               	btfss	3,2
  4807  19CA  29BC               	goto	l4192
  4808  19CB                     l4202:
  4809  19CB  082B               	movf	___lbdiv@quotient^(0+128),w
  4810  19CC  0008               	return
  4811  19CD                     __end_of___lbdiv:
  4812                           
  4813                           	psect	text9
  4814  09E3                     __ptext9:	
  4815 ;; *************** function ___flmul *****************
  4816 ;; Defined at:
  4817 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\sprcmul.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  b               4   16[BANK1 ] unsigned char 
  4820 ;;  a               4   20[BANK1 ] unsigned char 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  prod            4   36[BANK1 ] struct .
  4823 ;;  grs             4   32[BANK1 ] unsigned long 
  4824 ;;  temp            2   40[BANK1 ] struct .
  4825 ;;  bexp            1   31[BANK1 ] unsigned char 
  4826 ;;  aexp            1   30[BANK1 ] unsigned char 
  4827 ;;  sign            1   29[BANK1 ] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  4   16[BANK1 ] unsigned char 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 300/900
  4834 ;;		On exit  : 300/100
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         0       0       8       0       0
  4838 ;;      Locals:         0       0      13       0       0
  4839 ;;      Temps:          0       0       5       0       0
  4840 ;;      Totals:         0       0      26       0       0
  4841 ;;Total ram usage:       26 bytes
  4842 ;; Hardware stack levels used: 1
  4843 ;; Hardware stack levels required when called: 5
  4844 ;; This function calls:
  4845 ;;		__Umul8_16
  4846 ;; This function is called by:
  4847 ;;		_fround
  4848 ;;		_scale
  4849 ;;		_sprintf
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853  09E3                     ___flmul:	
  4854                           ;psect for function ___flmul
  4855                           
  4856                           
  4857                           ;incstack = 0
  4858                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4859  09E3  0833               	movf	(___flmul@b^(0+128)+3),w
  4860  09E4  3980               	andlw	128
  4861  09E5  00B8               	movwf	??___flmul^(0+128)
  4862  09E6  0838               	movf	??___flmul^(0+128),w
  4863  09E7  00BD               	movwf	___flmul@sign^(0+128)
  4864  09E8  0833               	movf	(___flmul@b^(0+128)+3),w
  4865  09E9  00B8               	movwf	??___flmul^(0+128)
  4866  09EA  0738               	addwf	??___flmul^(0+128),w
  4867  09EB  00B9               	movwf	(??___flmul+1)^(0+128)
  4868  09EC  0839               	movf	(??___flmul+1)^(0+128),w
  4869  09ED  00BF               	movwf	___flmul@bexp^(0+128)
  4870  09EE  1BB2               	btfsc	(___flmul@b^(0+128)+2),7
  4871  09EF  143F               	bsf	___flmul@bexp^(0+128),0
  4872  09F0  083F               	movf	___flmul@bexp^(0+128),w
  4873  09F1  1903               	btfsc	3,2
  4874  09F2  2A00               	goto	l4432
  4875  09F3  0A3F               	incf	___flmul@bexp^(0+128),w
  4876  09F4  1D03               	btfss	3,2
  4877  09F5  29FE               	goto	l4430
  4878  09F6  3000               	movlw	0
  4879  09F7  00B3               	movwf	(___flmul@b+3)^(0+128)
  4880  09F8  3000               	movlw	0
  4881  09F9  00B2               	movwf	(___flmul@b+2)^(0+128)
  4882  09FA  3000               	movlw	0
  4883  09FB  00B1               	movwf	(___flmul@b+1)^(0+128)
  4884  09FC  3000               	movlw	0
  4885  09FD  00B0               	movwf	___flmul@b^(0+128)
  4886  09FE                     l4430:
  4887  09FE  17B2               	bsf	(___flmul@b^(0+128)+2),7
  4888  09FF  2A08               	goto	l4434
  4889  0A00                     l4432:
  4890  0A00  3000               	movlw	0
  4891  0A01  00B3               	movwf	(___flmul@b+3)^(0+128)
  4892  0A02  3000               	movlw	0
  4893  0A03  00B2               	movwf	(___flmul@b+2)^(0+128)
  4894  0A04  3000               	movlw	0
  4895  0A05  00B1               	movwf	(___flmul@b+1)^(0+128)
  4896  0A06  3000               	movlw	0
  4897  0A07  00B0               	movwf	___flmul@b^(0+128)
  4898  0A08                     l4434:
  4899  0A08  0837               	movf	(___flmul@a^(0+128)+3),w
  4900  0A09  3980               	andlw	128
  4901  0A0A  00B8               	movwf	??___flmul^(0+128)
  4902  0A0B  0838               	movf	??___flmul^(0+128),w
  4903  0A0C  06BD               	xorwf	___flmul@sign^(0+128),f
  4904  0A0D  0837               	movf	(___flmul@a^(0+128)+3),w
  4905  0A0E  00B8               	movwf	??___flmul^(0+128)
  4906  0A0F  0738               	addwf	??___flmul^(0+128),w
  4907  0A10  00B9               	movwf	(??___flmul+1)^(0+128)
  4908  0A11  0839               	movf	(??___flmul+1)^(0+128),w
  4909  0A12  00BE               	movwf	___flmul@aexp^(0+128)
  4910  0A13  1BB6               	btfsc	(___flmul@a^(0+128)+2),7
  4911  0A14  143E               	bsf	___flmul@aexp^(0+128),0
  4912  0A15  083E               	movf	___flmul@aexp^(0+128),w
  4913  0A16  1903               	btfsc	3,2
  4914  0A17  2A25               	goto	l4450
  4915  0A18  0A3E               	incf	___flmul@aexp^(0+128),w
  4916  0A19  1D03               	btfss	3,2
  4917  0A1A  2A23               	goto	l4448
  4918  0A1B  3000               	movlw	0
  4919  0A1C  00B7               	movwf	(___flmul@a+3)^(0+128)
  4920  0A1D  3000               	movlw	0
  4921  0A1E  00B6               	movwf	(___flmul@a+2)^(0+128)
  4922  0A1F  3000               	movlw	0
  4923  0A20  00B5               	movwf	(___flmul@a+1)^(0+128)
  4924  0A21  3000               	movlw	0
  4925  0A22  00B4               	movwf	___flmul@a^(0+128)
  4926  0A23                     l4448:
  4927  0A23  17B6               	bsf	(___flmul@a^(0+128)+2),7
  4928  0A24  2A2D               	goto	l4452
  4929  0A25                     l4450:
  4930  0A25  3000               	movlw	0
  4931  0A26  00B7               	movwf	(___flmul@a+3)^(0+128)
  4932  0A27  3000               	movlw	0
  4933  0A28  00B6               	movwf	(___flmul@a+2)^(0+128)
  4934  0A29  3000               	movlw	0
  4935  0A2A  00B5               	movwf	(___flmul@a+1)^(0+128)
  4936  0A2B  3000               	movlw	0
  4937  0A2C  00B4               	movwf	___flmul@a^(0+128)
  4938  0A2D                     l4452:
  4939  0A2D  083E               	movf	___flmul@aexp^(0+128),w
  4940  0A2E  1D03               	btfss	3,2
  4941  0A2F  083F               	movf	___flmul@bexp^(0+128),w
  4942  0A30  1D03               	btfss	3,2
  4943  0A31  2A3B               	goto	l4460
  4944  0A32  3000               	movlw	0
  4945  0A33  00B3               	movwf	(?___flmul+3)^(0+128)
  4946  0A34  3000               	movlw	0
  4947  0A35  00B2               	movwf	(?___flmul+2)^(0+128)
  4948  0A36  3000               	movlw	0
  4949  0A37  00B1               	movwf	(?___flmul+1)^(0+128)
  4950  0A38  3000               	movlw	0
  4951  0A39  00B0               	movwf	?___flmul^(0+128)
  4952  0A3A  0008               	return
  4953  0A3B                     l4460:
  4954  0A3B  0830               	movf	___flmul@b^(0+128),w
  4955  0A3C  00B8               	movwf	??___flmul^(0+128)
  4956  0A3D  0838               	movf	??___flmul^(0+128),w
  4957  0A3E  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  4958  0A3F  0836               	movf	(___flmul@a^(0+128)+2),w
  4959  0A40  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  4960  0A45  0821               	movf	(?__Umul8_16+1)^(0+128),w
  4961  0A46  00C9               	movwf	(___flmul@temp+1)^(0+128)
  4962  0A47  0820               	movf	?__Umul8_16^(0+128),w
  4963  0A48  00C8               	movwf	___flmul@temp^(0+128)
  4964  0A49  0848               	movf	___flmul@temp^(0+128),w
  4965  0A4A  00B8               	movwf	??___flmul^(0+128)
  4966  0A4B  01B9               	clrf	(??___flmul^(0+128)+1)
  4967  0A4C  01BA               	clrf	(??___flmul^(0+128)+2)
  4968  0A4D  01BB               	clrf	(??___flmul^(0+128)+3)
  4969  0A4E  083B               	movf	(??___flmul+3)^(0+128),w
  4970  0A4F  00C3               	movwf	(___flmul@grs+3)^(0+128)
  4971  0A50  083A               	movf	(??___flmul+2)^(0+128),w
  4972  0A51  00C2               	movwf	(___flmul@grs+2)^(0+128)
  4973  0A52  0839               	movf	(??___flmul+1)^(0+128),w
  4974  0A53  00C1               	movwf	(___flmul@grs+1)^(0+128)
  4975  0A54  0838               	movf	??___flmul^(0+128),w
  4976  0A55  00C0               	movwf	___flmul@grs^(0+128)
  4977  0A56  0849               	movf	(___flmul@temp^(0+128)+1),w
  4978  0A57  00B8               	movwf	??___flmul^(0+128)
  4979  0A58  01B9               	clrf	(??___flmul^(0+128)+1)
  4980  0A59  01BA               	clrf	(??___flmul^(0+128)+2)
  4981  0A5A  01BB               	clrf	(??___flmul^(0+128)+3)
  4982  0A5B  083B               	movf	(??___flmul+3)^(0+128),w
  4983  0A5C  00C7               	movwf	(___flmul@prod+3)^(0+128)
  4984  0A5D  083A               	movf	(??___flmul+2)^(0+128),w
  4985  0A5E  00C6               	movwf	(___flmul@prod+2)^(0+128)
  4986  0A5F  0839               	movf	(??___flmul+1)^(0+128),w
  4987  0A60  00C5               	movwf	(___flmul@prod+1)^(0+128)
  4988  0A61  0838               	movf	??___flmul^(0+128),w
  4989  0A62  00C4               	movwf	___flmul@prod^(0+128)
  4990  0A63  0831               	movf	(___flmul@b^(0+128)+1),w
  4991  0A64  00B8               	movwf	??___flmul^(0+128)
  4992  0A65  0838               	movf	??___flmul^(0+128),w
  4993  0A66  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  4994  0A67  0835               	movf	(___flmul@a^(0+128)+1),w
  4995  0A68  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  4996  0A6D  0821               	movf	(?__Umul8_16+1)^(0+128),w
  4997  0A6E  00C9               	movwf	(___flmul@temp+1)^(0+128)
  4998  0A6F  0820               	movf	?__Umul8_16^(0+128),w
  4999  0A70  00C8               	movwf	___flmul@temp^(0+128)
  5000  0A71  0848               	movf	___flmul@temp^(0+128),w
  5001  0A72  00B8               	movwf	??___flmul^(0+128)
  5002  0A73  01B9               	clrf	(??___flmul^(0+128)+1)
  5003  0A74  01BA               	clrf	(??___flmul^(0+128)+2)
  5004  0A75  01BB               	clrf	(??___flmul^(0+128)+3)
  5005  0A76  0838               	movf	??___flmul^(0+128),w
  5006  0A77  07C0               	addwf	___flmul@grs^(0+128),f
  5007  0A78  0839               	movf	(??___flmul+1)^(0+128),w
  5008  0A79  1103               	clrz
  5009  0A7A  1803               	skipnc
  5010  0A7B  3E01               	addlw	1
  5011  0A7C  1D03               	btfss	3,2
  5012  0A7D  07C1               	addwf	(___flmul@grs+1)^(0+128),f
  5013  0A7E  083A               	movf	(??___flmul+2)^(0+128),w
  5014  0A7F  1103               	clrz
  5015  0A80  1803               	skipnc
  5016  0A81  3E01               	addlw	1
  5017  0A82  1D03               	btfss	3,2
  5018  0A83  07C2               	addwf	(___flmul@grs+2)^(0+128),f
  5019  0A84  083B               	movf	(??___flmul+3)^(0+128),w
  5020  0A85  1103               	clrz
  5021  0A86  1803               	skipnc
  5022  0A87  3E01               	addlw	1
  5023  0A88  1D03               	btfss	3,2
  5024  0A89  07C3               	addwf	(___flmul@grs+3)^(0+128),f
  5025  0A8A  0849               	movf	(___flmul@temp^(0+128)+1),w
  5026  0A8B  00B8               	movwf	??___flmul^(0+128)
  5027  0A8C  01B9               	clrf	(??___flmul^(0+128)+1)
  5028  0A8D  01BA               	clrf	(??___flmul^(0+128)+2)
  5029  0A8E  01BB               	clrf	(??___flmul^(0+128)+3)
  5030  0A8F  0838               	movf	??___flmul^(0+128),w
  5031  0A90  07C4               	addwf	___flmul@prod^(0+128),f
  5032  0A91  0839               	movf	(??___flmul+1)^(0+128),w
  5033  0A92  1103               	clrz
  5034  0A93  1803               	skipnc
  5035  0A94  3E01               	addlw	1
  5036  0A95  1D03               	btfss	3,2
  5037  0A96  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5038  0A97  083A               	movf	(??___flmul+2)^(0+128),w
  5039  0A98  1103               	clrz
  5040  0A99  1803               	skipnc
  5041  0A9A  3E01               	addlw	1
  5042  0A9B  1D03               	btfss	3,2
  5043  0A9C  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5044  0A9D  083B               	movf	(??___flmul+3)^(0+128),w
  5045  0A9E  1103               	clrz
  5046  0A9F  1803               	skipnc
  5047  0AA0  3E01               	addlw	1
  5048  0AA1  1D03               	btfss	3,2
  5049  0AA2  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5050  0AA3  0832               	movf	(___flmul@b^(0+128)+2),w
  5051  0AA4  00B8               	movwf	??___flmul^(0+128)
  5052  0AA5  0838               	movf	??___flmul^(0+128),w
  5053  0AA6  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5054  0AA7  0834               	movf	___flmul@a^(0+128),w
  5055  0AA8  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5056  0AAD  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5057  0AAE  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5058  0AAF  0820               	movf	?__Umul8_16^(0+128),w
  5059  0AB0  00C8               	movwf	___flmul@temp^(0+128)
  5060  0AB1  0848               	movf	___flmul@temp^(0+128),w
  5061  0AB2  00B8               	movwf	??___flmul^(0+128)
  5062  0AB3  01B9               	clrf	(??___flmul^(0+128)+1)
  5063  0AB4  01BA               	clrf	(??___flmul^(0+128)+2)
  5064  0AB5  01BB               	clrf	(??___flmul^(0+128)+3)
  5065  0AB6  0838               	movf	??___flmul^(0+128),w
  5066  0AB7  07C0               	addwf	___flmul@grs^(0+128),f
  5067  0AB8  0839               	movf	(??___flmul+1)^(0+128),w
  5068  0AB9  1103               	clrz
  5069  0ABA  1803               	skipnc
  5070  0ABB  3E01               	addlw	1
  5071  0ABC  1D03               	btfss	3,2
  5072  0ABD  07C1               	addwf	(___flmul@grs+1)^(0+128),f
  5073  0ABE  083A               	movf	(??___flmul+2)^(0+128),w
  5074  0ABF  1103               	clrz
  5075  0AC0  1803               	skipnc
  5076  0AC1  3E01               	addlw	1
  5077  0AC2  1D03               	btfss	3,2
  5078  0AC3  07C2               	addwf	(___flmul@grs+2)^(0+128),f
  5079  0AC4  083B               	movf	(??___flmul+3)^(0+128),w
  5080  0AC5  1103               	clrz
  5081  0AC6  1803               	skipnc
  5082  0AC7  3E01               	addlw	1
  5083  0AC8  1D03               	btfss	3,2
  5084  0AC9  07C3               	addwf	(___flmul@grs+3)^(0+128),f
  5085  0ACA  0849               	movf	(___flmul@temp^(0+128)+1),w
  5086  0ACB  00B8               	movwf	??___flmul^(0+128)
  5087  0ACC  01B9               	clrf	(??___flmul^(0+128)+1)
  5088  0ACD  01BA               	clrf	(??___flmul^(0+128)+2)
  5089  0ACE  01BB               	clrf	(??___flmul^(0+128)+3)
  5090  0ACF  0838               	movf	??___flmul^(0+128),w
  5091  0AD0  07C4               	addwf	___flmul@prod^(0+128),f
  5092  0AD1  0839               	movf	(??___flmul+1)^(0+128),w
  5093  0AD2  1103               	clrz
  5094  0AD3  1803               	skipnc
  5095  0AD4  3E01               	addlw	1
  5096  0AD5  1D03               	btfss	3,2
  5097  0AD6  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5098  0AD7  083A               	movf	(??___flmul+2)^(0+128),w
  5099  0AD8  1103               	clrz
  5100  0AD9  1803               	skipnc
  5101  0ADA  3E01               	addlw	1
  5102  0ADB  1D03               	btfss	3,2
  5103  0ADC  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5104  0ADD  083B               	movf	(??___flmul+3)^(0+128),w
  5105  0ADE  1103               	clrz
  5106  0ADF  1803               	skipnc
  5107  0AE0  3E01               	addlw	1
  5108  0AE1  1D03               	btfss	3,2
  5109  0AE2  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5110  0AE3  3008               	movlw	8
  5111  0AE4  00B8               	movwf	??___flmul^(0+128)
  5112  0AE5                     u7895:
  5113  0AE5  1003               	clrc
  5114  0AE6  0DC0               	rlf	___flmul@grs^(0+128),f
  5115  0AE7  0DC1               	rlf	(___flmul@grs+1)^(0+128),f
  5116  0AE8  0DC2               	rlf	(___flmul@grs+2)^(0+128),f
  5117  0AE9  0DC3               	rlf	(___flmul@grs+3)^(0+128),f
  5118  0AEA  0BB8               	decfsz	??___flmul^(0+128),f
  5119  0AEB  2AE5               	goto	u7895
  5120  0AEC  0831               	movf	(___flmul@b^(0+128)+1),w
  5121  0AED  00B8               	movwf	??___flmul^(0+128)
  5122  0AEE  0838               	movf	??___flmul^(0+128),w
  5123  0AEF  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5124  0AF0  0834               	movf	___flmul@a^(0+128),w
  5125  0AF1  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5126  0AF6  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5127  0AF7  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5128  0AF8  0820               	movf	?__Umul8_16^(0+128),w
  5129  0AF9  00C8               	movwf	___flmul@temp^(0+128)
  5130  0AFA  0848               	movf	___flmul@temp^(0+128),w
  5131  0AFB  00B8               	movwf	??___flmul^(0+128)
  5132  0AFC  0849               	movf	(___flmul@temp+1)^(0+128),w
  5133  0AFD  00B9               	movwf	(??___flmul^(0+128)+1)
  5134  0AFE  01BA               	clrf	(??___flmul^(0+128)+2)
  5135  0AFF  01BB               	clrf	(??___flmul^(0+128)+3)
  5136  0B00  0838               	movf	??___flmul^(0+128),w
  5137  0B01  07C0               	addwf	___flmul@grs^(0+128),f
  5138  0B02  0839               	movf	(??___flmul+1)^(0+128),w
  5139  0B03  1103               	clrz
  5140  0B04  1803               	skipnc
  5141  0B05  3E01               	addlw	1
  5142  0B06  1D03               	btfss	3,2
  5143  0B07  07C1               	addwf	(___flmul@grs+1)^(0+128),f
  5144  0B08  083A               	movf	(??___flmul+2)^(0+128),w
  5145  0B09  1103               	clrz
  5146  0B0A  1803               	skipnc
  5147  0B0B  3E01               	addlw	1
  5148  0B0C  1D03               	btfss	3,2
  5149  0B0D  07C2               	addwf	(___flmul@grs+2)^(0+128),f
  5150  0B0E  083B               	movf	(??___flmul+3)^(0+128),w
  5151  0B0F  1103               	clrz
  5152  0B10  1803               	skipnc
  5153  0B11  3E01               	addlw	1
  5154  0B12  1D03               	btfss	3,2
  5155  0B13  07C3               	addwf	(___flmul@grs+3)^(0+128),f
  5156  0B14  0830               	movf	___flmul@b^(0+128),w
  5157  0B15  00B8               	movwf	??___flmul^(0+128)
  5158  0B16  0838               	movf	??___flmul^(0+128),w
  5159  0B17  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5160  0B18  0835               	movf	(___flmul@a^(0+128)+1),w
  5161  0B19  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5162  0B1E  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5163  0B1F  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5164  0B20  0820               	movf	?__Umul8_16^(0+128),w
  5165  0B21  00C8               	movwf	___flmul@temp^(0+128)
  5166  0B22  0848               	movf	___flmul@temp^(0+128),w
  5167  0B23  00B8               	movwf	??___flmul^(0+128)
  5168  0B24  0849               	movf	(___flmul@temp+1)^(0+128),w
  5169  0B25  00B9               	movwf	(??___flmul^(0+128)+1)
  5170  0B26  01BA               	clrf	(??___flmul^(0+128)+2)
  5171  0B27  01BB               	clrf	(??___flmul^(0+128)+3)
  5172  0B28  0838               	movf	??___flmul^(0+128),w
  5173  0B29  07C0               	addwf	___flmul@grs^(0+128),f
  5174  0B2A  0839               	movf	(??___flmul+1)^(0+128),w
  5175  0B2B  1103               	clrz
  5176  0B2C  1803               	skipnc
  5177  0B2D  3E01               	addlw	1
  5178  0B2E  1D03               	btfss	3,2
  5179  0B2F  07C1               	addwf	(___flmul@grs+1)^(0+128),f
  5180  0B30  083A               	movf	(??___flmul+2)^(0+128),w
  5181  0B31  1103               	clrz
  5182  0B32  1803               	skipnc
  5183  0B33  3E01               	addlw	1
  5184  0B34  1D03               	btfss	3,2
  5185  0B35  07C2               	addwf	(___flmul@grs+2)^(0+128),f
  5186  0B36  083B               	movf	(??___flmul+3)^(0+128),w
  5187  0B37  1103               	clrz
  5188  0B38  1803               	skipnc
  5189  0B39  3E01               	addlw	1
  5190  0B3A  1D03               	btfss	3,2
  5191  0B3B  07C3               	addwf	(___flmul@grs+3)^(0+128),f
  5192  0B3C  3008               	movlw	8
  5193  0B3D  00B8               	movwf	??___flmul^(0+128)
  5194  0B3E                     u7925:
  5195  0B3E  1003               	clrc
  5196  0B3F  0DC0               	rlf	___flmul@grs^(0+128),f
  5197  0B40  0DC1               	rlf	(___flmul@grs+1)^(0+128),f
  5198  0B41  0DC2               	rlf	(___flmul@grs+2)^(0+128),f
  5199  0B42  0DC3               	rlf	(___flmul@grs+3)^(0+128),f
  5200  0B43  0BB8               	decfsz	??___flmul^(0+128),f
  5201  0B44  2B3E               	goto	u7925
  5202  0B45  0830               	movf	___flmul@b^(0+128),w
  5203  0B46  00B8               	movwf	??___flmul^(0+128)
  5204  0B47  0838               	movf	??___flmul^(0+128),w
  5205  0B48  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5206  0B49  0834               	movf	___flmul@a^(0+128),w
  5207  0B4A  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5208  0B4F  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5209  0B50  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5210  0B51  0820               	movf	?__Umul8_16^(0+128),w
  5211  0B52  00C8               	movwf	___flmul@temp^(0+128)
  5212  0B53  0848               	movf	___flmul@temp^(0+128),w
  5213  0B54  00B8               	movwf	??___flmul^(0+128)
  5214  0B55  0849               	movf	(___flmul@temp+1)^(0+128),w
  5215  0B56  00B9               	movwf	(??___flmul^(0+128)+1)
  5216  0B57  01BA               	clrf	(??___flmul^(0+128)+2)
  5217  0B58  01BB               	clrf	(??___flmul^(0+128)+3)
  5218  0B59  0838               	movf	??___flmul^(0+128),w
  5219  0B5A  07C0               	addwf	___flmul@grs^(0+128),f
  5220  0B5B  0839               	movf	(??___flmul+1)^(0+128),w
  5221  0B5C  1103               	clrz
  5222  0B5D  1803               	skipnc
  5223  0B5E  3E01               	addlw	1
  5224  0B5F  1D03               	btfss	3,2
  5225  0B60  07C1               	addwf	(___flmul@grs+1)^(0+128),f
  5226  0B61  083A               	movf	(??___flmul+2)^(0+128),w
  5227  0B62  1103               	clrz
  5228  0B63  1803               	skipnc
  5229  0B64  3E01               	addlw	1
  5230  0B65  1D03               	btfss	3,2
  5231  0B66  07C2               	addwf	(___flmul@grs+2)^(0+128),f
  5232  0B67  083B               	movf	(??___flmul+3)^(0+128),w
  5233  0B68  1103               	clrz
  5234  0B69  1803               	skipnc
  5235  0B6A  3E01               	addlw	1
  5236  0B6B  1D03               	btfss	3,2
  5237  0B6C  07C3               	addwf	(___flmul@grs+3)^(0+128),f
  5238  0B6D  0831               	movf	(___flmul@b^(0+128)+1),w
  5239  0B6E  00B8               	movwf	??___flmul^(0+128)
  5240  0B6F  0838               	movf	??___flmul^(0+128),w
  5241  0B70  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5242  0B71  0836               	movf	(___flmul@a^(0+128)+2),w
  5243  0B72  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5244  0B77  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5245  0B78  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5246  0B79  0820               	movf	?__Umul8_16^(0+128),w
  5247  0B7A  00C8               	movwf	___flmul@temp^(0+128)
  5248  0B7B  0848               	movf	___flmul@temp^(0+128),w
  5249  0B7C  00B8               	movwf	??___flmul^(0+128)
  5250  0B7D  0849               	movf	(___flmul@temp+1)^(0+128),w
  5251  0B7E  00B9               	movwf	(??___flmul^(0+128)+1)
  5252  0B7F  01BA               	clrf	(??___flmul^(0+128)+2)
  5253  0B80  01BB               	clrf	(??___flmul^(0+128)+3)
  5254  0B81  0838               	movf	??___flmul^(0+128),w
  5255  0B82  07C4               	addwf	___flmul@prod^(0+128),f
  5256  0B83  0839               	movf	(??___flmul+1)^(0+128),w
  5257  0B84  1103               	clrz
  5258  0B85  1803               	skipnc
  5259  0B86  3E01               	addlw	1
  5260  0B87  1D03               	btfss	3,2
  5261  0B88  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5262  0B89  083A               	movf	(??___flmul+2)^(0+128),w
  5263  0B8A  1103               	clrz
  5264  0B8B  1803               	skipnc
  5265  0B8C  3E01               	addlw	1
  5266  0B8D  1D03               	btfss	3,2
  5267  0B8E  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5268  0B8F  083B               	movf	(??___flmul+3)^(0+128),w
  5269  0B90  1103               	clrz
  5270  0B91  1803               	skipnc
  5271  0B92  3E01               	addlw	1
  5272  0B93  1D03               	btfss	3,2
  5273  0B94  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5274  0B95  0832               	movf	(___flmul@b^(0+128)+2),w
  5275  0B96  00B8               	movwf	??___flmul^(0+128)
  5276  0B97  0838               	movf	??___flmul^(0+128),w
  5277  0B98  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5278  0B99  0835               	movf	(___flmul@a^(0+128)+1),w
  5279  0B9A  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5280  0B9F  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5281  0BA0  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5282  0BA1  0820               	movf	?__Umul8_16^(0+128),w
  5283  0BA2  00C8               	movwf	___flmul@temp^(0+128)
  5284  0BA3  0848               	movf	___flmul@temp^(0+128),w
  5285  0BA4  00B8               	movwf	??___flmul^(0+128)
  5286  0BA5  0849               	movf	(___flmul@temp+1)^(0+128),w
  5287  0BA6  00B9               	movwf	(??___flmul^(0+128)+1)
  5288  0BA7  01BA               	clrf	(??___flmul^(0+128)+2)
  5289  0BA8  01BB               	clrf	(??___flmul^(0+128)+3)
  5290  0BA9  0838               	movf	??___flmul^(0+128),w
  5291  0BAA  07C4               	addwf	___flmul@prod^(0+128),f
  5292  0BAB  0839               	movf	(??___flmul+1)^(0+128),w
  5293  0BAC  1103               	clrz
  5294  0BAD  1803               	skipnc
  5295  0BAE  3E01               	addlw	1
  5296  0BAF  1D03               	btfss	3,2
  5297  0BB0  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5298  0BB1  083A               	movf	(??___flmul+2)^(0+128),w
  5299  0BB2  1103               	clrz
  5300  0BB3  1803               	skipnc
  5301  0BB4  3E01               	addlw	1
  5302  0BB5  1D03               	btfss	3,2
  5303  0BB6  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5304  0BB7  083B               	movf	(??___flmul+3)^(0+128),w
  5305  0BB8  1103               	clrz
  5306  0BB9  1803               	skipnc
  5307  0BBA  3E01               	addlw	1
  5308  0BBB  1D03               	btfss	3,2
  5309  0BBC  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5310  0BBD  0832               	movf	(___flmul@b^(0+128)+2),w
  5311  0BBE  00B8               	movwf	??___flmul^(0+128)
  5312  0BBF  0838               	movf	??___flmul^(0+128),w
  5313  0BC0  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5314  0BC1  0836               	movf	(___flmul@a^(0+128)+2),w
  5315  0BC2  160A  158A  21F0  120A  158A  	fcall	__Umul8_16
  5316  0BC7  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5317  0BC8  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5318  0BC9  0820               	movf	?__Umul8_16^(0+128),w
  5319  0BCA  00C8               	movwf	___flmul@temp^(0+128)
  5320  0BCB  0848               	movf	___flmul@temp^(0+128),w
  5321  0BCC  00B8               	movwf	??___flmul^(0+128)
  5322  0BCD  0849               	movf	(___flmul@temp+1)^(0+128),w
  5323  0BCE  00B9               	movwf	(??___flmul^(0+128)+1)
  5324  0BCF  01BA               	clrf	(??___flmul^(0+128)+2)
  5325  0BD0  01BB               	clrf	(??___flmul^(0+128)+3)
  5326  0BD1  3008               	movlw	8
  5327  0BD2                     u7965:
  5328  0BD2  1003               	clrc
  5329  0BD3  0DB8               	rlf	??___flmul^(0+128),f
  5330  0BD4  0DB9               	rlf	(??___flmul^(0+128)+1),f
  5331  0BD5  0DBA               	rlf	(??___flmul^(0+128)+2),f
  5332  0BD6  0DBB               	rlf	(??___flmul^(0+128)+3),f
  5333  0BD7  3EFF               	addlw	-1
  5334  0BD8  1D03               	skipz
  5335  0BD9  2BD2               	goto	u7965
  5336  0BDA  0838               	movf	??___flmul^(0+128),w
  5337  0BDB  07C4               	addwf	___flmul@prod^(0+128),f
  5338  0BDC  0839               	movf	(??___flmul+1)^(0+128),w
  5339  0BDD  1103               	clrz
  5340  0BDE  1803               	skipnc
  5341  0BDF  3E01               	addlw	1
  5342  0BE0  1D03               	btfss	3,2
  5343  0BE1  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5344  0BE2  083A               	movf	(??___flmul+2)^(0+128),w
  5345  0BE3  1103               	clrz
  5346  0BE4  1803               	skipnc
  5347  0BE5  3E01               	addlw	1
  5348  0BE6  1D03               	btfss	3,2
  5349  0BE7  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5350  0BE8  083B               	movf	(??___flmul+3)^(0+128),w
  5351  0BE9  1103               	clrz
  5352  0BEA  1803               	skipnc
  5353  0BEB  3E01               	addlw	1
  5354  0BEC  1D03               	btfss	3,2
  5355  0BED  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5356  0BEE  0843               	movf	(___flmul@grs^(0+128)+3),w
  5357  0BEF  00B8               	movwf	??___flmul^(0+128)
  5358  0BF0  01B9               	clrf	(??___flmul^(0+128)+1)
  5359  0BF1  01BA               	clrf	(??___flmul^(0+128)+2)
  5360  0BF2  01BB               	clrf	(??___flmul^(0+128)+3)
  5361  0BF3  0838               	movf	??___flmul^(0+128),w
  5362  0BF4  07C4               	addwf	___flmul@prod^(0+128),f
  5363  0BF5  0839               	movf	(??___flmul+1)^(0+128),w
  5364  0BF6  1103               	clrz
  5365  0BF7  1803               	skipnc
  5366  0BF8  3E01               	addlw	1
  5367  0BF9  1D03               	btfss	3,2
  5368  0BFA  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5369  0BFB  083A               	movf	(??___flmul+2)^(0+128),w
  5370  0BFC  1103               	clrz
  5371  0BFD  1803               	skipnc
  5372  0BFE  3E01               	addlw	1
  5373  0BFF  1D03               	btfss	3,2
  5374  0C00  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5375  0C01  083B               	movf	(??___flmul+3)^(0+128),w
  5376  0C02  1103               	clrz
  5377  0C03  1803               	skipnc
  5378  0C04  3E01               	addlw	1
  5379  0C05  1D03               	btfss	3,2
  5380  0C06  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5381  0C07  3008               	movlw	8
  5382  0C08  00B8               	movwf	??___flmul^(0+128)
  5383  0C09                     u7995:
  5384  0C09  1003               	clrc
  5385  0C0A  0DC0               	rlf	___flmul@grs^(0+128),f
  5386  0C0B  0DC1               	rlf	(___flmul@grs+1)^(0+128),f
  5387  0C0C  0DC2               	rlf	(___flmul@grs+2)^(0+128),f
  5388  0C0D  0DC3               	rlf	(___flmul@grs+3)^(0+128),f
  5389  0C0E  0BB8               	decfsz	??___flmul^(0+128),f
  5390  0C0F  2C09               	goto	u7995
  5391  0C10  083F               	movf	___flmul@bexp^(0+128),w
  5392  0C11  073E               	addwf	___flmul@aexp^(0+128),w
  5393  0C12  00B8               	movwf	??___flmul^(0+128)
  5394  0C13  01B9               	clrf	(??___flmul^(0+128)+1)
  5395  0C14  0DB9               	rlf	(??___flmul+1)^(0+128),f
  5396  0C15  0838               	movf	??___flmul^(0+128),w
  5397  0C16  3E82               	addlw	130
  5398  0C17  00C8               	movwf	___flmul@temp^(0+128)
  5399  0C18  0839               	movf	(??___flmul+1)^(0+128),w
  5400  0C19  1803               	skipnc
  5401  0C1A  3E01               	addlw	1
  5402  0C1B  3EFF               	addlw	255
  5403  0C1C  00C9               	movwf	(___flmul@temp+1)^(0+128)
  5404  0C1D                     l4512:
  5405  0C1D  1BC6               	btfsc	(___flmul@prod+2)^(0+128),7
  5406  0C1E  2C3A               	goto	l4514
  5407  0C1F  3001               	movlw	1
  5408  0C20  00B8               	movwf	??___flmul^(0+128)
  5409  0C21                     u8005:
  5410  0C21  1003               	clrc
  5411  0C22  0DC4               	rlf	___flmul@prod^(0+128),f
  5412  0C23  0DC5               	rlf	(___flmul@prod+1)^(0+128),f
  5413  0C24  0DC6               	rlf	(___flmul@prod+2)^(0+128),f
  5414  0C25  0DC7               	rlf	(___flmul@prod+3)^(0+128),f
  5415  0C26  0BB8               	decfsz	??___flmul^(0+128),f
  5416  0C27  2C21               	goto	u8005
  5417  0C28  1BC3               	btfsc	(___flmul@grs+3)^(0+128),7
  5418  0C29  1444               	bsf	___flmul@prod^(0+128),0
  5419  0C2A  3001               	movlw	1
  5420  0C2B  00B8               	movwf	??___flmul^(0+128)
  5421  0C2C                     u8025:
  5422  0C2C  1003               	clrc
  5423  0C2D  0DC0               	rlf	___flmul@grs^(0+128),f
  5424  0C2E  0DC1               	rlf	(___flmul@grs+1)^(0+128),f
  5425  0C2F  0DC2               	rlf	(___flmul@grs+2)^(0+128),f
  5426  0C30  0DC3               	rlf	(___flmul@grs+3)^(0+128),f
  5427  0C31  0BB8               	decfsz	??___flmul^(0+128),f
  5428  0C32  2C2C               	goto	u8025
  5429  0C33  30FF               	movlw	255
  5430  0C34  07C8               	addwf	___flmul@temp^(0+128),f
  5431  0C35  1803               	skipnc
  5432  0C36  0AC9               	incf	(___flmul@temp+1)^(0+128),f
  5433  0C37  30FF               	movlw	255
  5434  0C38  07C9               	addwf	(___flmul@temp+1)^(0+128),f
  5435  0C39  2C1D               	goto	l4512
  5436  0C3A                     l4514:
  5437  0C3A  01BE               	clrf	___flmul@aexp^(0+128)
  5438  0C3B  1FC3               	btfss	(___flmul@grs+3)^(0+128),7
  5439  0C3C  2C53               	goto	l4524
  5440  0C3D  30FF               	movlw	255
  5441  0C3E  0540               	andwf	___flmul@grs^(0+128),w
  5442  0C3F  00B8               	movwf	??___flmul^(0+128)
  5443  0C40  30FF               	movlw	255
  5444  0C41  0541               	andwf	(___flmul@grs+1)^(0+128),w
  5445  0C42  00B9               	movwf	(??___flmul^(0+128)+1)
  5446  0C43  30FF               	movlw	255
  5447  0C44  0542               	andwf	(___flmul@grs+2)^(0+128),w
  5448  0C45  00BA               	movwf	(??___flmul^(0+128)+2)
  5449  0C46  307F               	movlw	127
  5450  0C47  0543               	andwf	(___flmul@grs+3)^(0+128),w
  5451  0C48  00BB               	movwf	(??___flmul^(0+128)+3)
  5452  0C49  083B               	movf	(??___flmul+3)^(0+128),w
  5453  0C4A  043A               	iorwf	(??___flmul+2)^(0+128),w
  5454  0C4B  0439               	iorwf	(??___flmul+1)^(0+128),w
  5455  0C4C  0438               	iorwf	??___flmul^(0+128),w
  5456  0C4D  1903               	skipnz
  5457  0C4E  1844               	btfsc	___flmul@prod^(0+128),0
  5458  0C4F  2C51               	goto	l4520
  5459  0C50  2C53               	goto	l4524
  5460  0C51                     l4520:
  5461  0C51  01BE               	clrf	___flmul@aexp^(0+128)
  5462  0C52  0ABE               	incf	___flmul@aexp^(0+128),f
  5463  0C53                     l4524:
  5464  0C53  083E               	movf	___flmul@aexp^(0+128),w
  5465  0C54  1903               	btfsc	3,2
  5466  0C55  2C85               	goto	l4534
  5467  0C56  3001               	movlw	1
  5468  0C57  07C4               	addwf	___flmul@prod^(0+128),f
  5469  0C58  3000               	movlw	0
  5470  0C59  1803               	skipnc
  5471  0C5A  3001               	movlw	1
  5472  0C5B  07C5               	addwf	(___flmul@prod+1)^(0+128),f
  5473  0C5C  3000               	movlw	0
  5474  0C5D  1803               	skipnc
  5475  0C5E  3001               	movlw	1
  5476  0C5F  07C6               	addwf	(___flmul@prod+2)^(0+128),f
  5477  0C60  3000               	movlw	0
  5478  0C61  1803               	skipnc
  5479  0C62  3001               	movlw	1
  5480  0C63  07C7               	addwf	(___flmul@prod+3)^(0+128),f
  5481  0C64  1C47               	btfss	(___flmul@prod+3)^(0+128),0
  5482  0C65  2C85               	goto	l4534
  5483  0C66  0844               	movf	___flmul@prod^(0+128),w
  5484  0C67  00B8               	movwf	??___flmul^(0+128)
  5485  0C68  0845               	movf	(___flmul@prod+1)^(0+128),w
  5486  0C69  00B9               	movwf	(??___flmul^(0+128)+1)
  5487  0C6A  0846               	movf	(___flmul@prod+2)^(0+128),w
  5488  0C6B  00BA               	movwf	(??___flmul^(0+128)+2)
  5489  0C6C  0847               	movf	(___flmul@prod+3)^(0+128),w
  5490  0C6D  00BB               	movwf	(??___flmul^(0+128)+3)
  5491  0C6E  3001               	movlw	1
  5492  0C6F  00BC               	movwf	(??___flmul+4)^(0+128)
  5493  0C70                     u8095:
  5494  0C70  0D3B               	rlf	(??___flmul^(0+128)+3),w
  5495  0C71  0CBB               	rrf	(??___flmul^(0+128)+3),f
  5496  0C72  0CBA               	rrf	(??___flmul^(0+128)+2),f
  5497  0C73  0CB9               	rrf	(??___flmul^(0+128)+1),f
  5498  0C74  0CB8               	rrf	??___flmul^(0+128),f
  5499  0C75  0BBC               	decfsz	(??___flmul+4)^(0+128),f
  5500  0C76  2C70               	goto	u8095
  5501  0C77  083B               	movf	(??___flmul+3)^(0+128),w
  5502  0C78  00C7               	movwf	(___flmul@prod+3)^(0+128)
  5503  0C79  083A               	movf	(??___flmul+2)^(0+128),w
  5504  0C7A  00C6               	movwf	(___flmul@prod+2)^(0+128)
  5505  0C7B  0839               	movf	(??___flmul+1)^(0+128),w
  5506  0C7C  00C5               	movwf	(___flmul@prod+1)^(0+128)
  5507  0C7D  0838               	movf	??___flmul^(0+128),w
  5508  0C7E  00C4               	movwf	___flmul@prod^(0+128)
  5509  0C7F  3001               	movlw	1
  5510  0C80  07C8               	addwf	___flmul@temp^(0+128),f
  5511  0C81  1803               	skipnc
  5512  0C82  0AC9               	incf	(___flmul@temp+1)^(0+128),f
  5513  0C83  3000               	movlw	0
  5514  0C84  07C9               	addwf	(___flmul@temp+1)^(0+128),f
  5515  0C85                     l4534:
  5516  0C85  0849               	movf	(___flmul@temp+1)^(0+128),w
  5517  0C86  3A80               	xorlw	128
  5518  0C87  00FF               	movwf	127
  5519  0C88  3080               	movlw	128
  5520  0C89  027F               	subwf	127,w
  5521  0C8A  1D03               	skipz
  5522  0C8B  2C8E               	goto	u8105
  5523  0C8C  30FF               	movlw	255
  5524  0C8D  0248               	subwf	___flmul@temp^(0+128),w
  5525  0C8E                     u8105:
  5526  0C8E  1C03               	skipc
  5527  0C8F  2C9B               	goto	l4538
  5528  0C90  307F               	movlw	127
  5529  0C91  1683               	bsf	3,5	;RP0=1, select bank1
  5530  0C92  1303               	bcf	3,6	;RP1=0, select bank1
  5531  0C93  00C7               	movwf	(___flmul@prod+3)^(0+128)
  5532  0C94  3080               	movlw	128
  5533  0C95  00C6               	movwf	(___flmul@prod+2)^(0+128)
  5534  0C96  3000               	movlw	0
  5535  0C97  00C5               	movwf	(___flmul@prod+1)^(0+128)
  5536  0C98  3000               	movlw	0
  5537  0C99  00C4               	movwf	___flmul@prod^(0+128)
  5538  0C9A  2CCB               	goto	l778
  5539  0C9B                     l4538:
  5540  0C9B  1683               	bsf	3,5	;RP0=1, select bank1
  5541  0C9C  1303               	bcf	3,6	;RP1=0, select bank1
  5542  0C9D  0849               	movf	(___flmul@temp+1)^(0+128),w
  5543  0C9E  3A80               	xorlw	128
  5544  0C9F  00FF               	movwf	127
  5545  0CA0  3080               	movlw	128
  5546  0CA1  027F               	subwf	127,w
  5547  0CA2  1D03               	skipz
  5548  0CA3  2CA6               	goto	u8115
  5549  0CA4  3001               	movlw	1
  5550  0CA5  0248               	subwf	___flmul@temp^(0+128),w
  5551  0CA6                     u8115:
  5552  0CA6  1803               	skipnc
  5553  0CA7  2CB4               	goto	l4544
  5554  0CA8  3000               	movlw	0
  5555  0CA9  1683               	bsf	3,5	;RP0=1, select bank1
  5556  0CAA  1303               	bcf	3,6	;RP1=0, select bank1
  5557  0CAB  00C7               	movwf	(___flmul@prod+3)^(0+128)
  5558  0CAC  3000               	movlw	0
  5559  0CAD  00C6               	movwf	(___flmul@prod+2)^(0+128)
  5560  0CAE  3000               	movlw	0
  5561  0CAF  00C5               	movwf	(___flmul@prod+1)^(0+128)
  5562  0CB0  3000               	movlw	0
  5563  0CB1  00C4               	movwf	___flmul@prod^(0+128)
  5564  0CB2  01BD               	clrf	___flmul@sign^(0+128)
  5565  0CB3  2CCB               	goto	l778
  5566  0CB4                     l4544:
  5567  0CB4  1683               	bsf	3,5	;RP0=1, select bank1
  5568  0CB5  1303               	bcf	3,6	;RP1=0, select bank1
  5569  0CB6  0848               	movf	___flmul@temp^(0+128),w
  5570  0CB7  00B8               	movwf	??___flmul^(0+128)
  5571  0CB8  0838               	movf	??___flmul^(0+128),w
  5572  0CB9  00BF               	movwf	___flmul@bexp^(0+128)
  5573  0CBA  30FF               	movlw	255
  5574  0CBB  05C4               	andwf	___flmul@prod^(0+128),f
  5575  0CBC  30FF               	movlw	255
  5576  0CBD  05C5               	andwf	(___flmul@prod+1)^(0+128),f
  5577  0CBE  307F               	movlw	127
  5578  0CBF  05C6               	andwf	(___flmul@prod+2)^(0+128),f
  5579  0CC0  3000               	movlw	0
  5580  0CC1  05C7               	andwf	(___flmul@prod+3)^(0+128),f
  5581  0CC2  183F               	btfsc	___flmul@bexp^(0+128),0
  5582  0CC3  17C6               	bsf	(___flmul@prod^(0+128)+2),7
  5583  0CC4  083F               	movf	___flmul@bexp^(0+128),w
  5584  0CC5  00B8               	movwf	??___flmul^(0+128)
  5585  0CC6  1003               	clrc
  5586  0CC7  0C38               	rrf	??___flmul^(0+128),w
  5587  0CC8  00B9               	movwf	(??___flmul+1)^(0+128)
  5588  0CC9  0839               	movf	(??___flmul+1)^(0+128),w
  5589  0CCA  00C7               	movwf	(___flmul@prod^(0+128)+3)
  5590  0CCB                     l778:
  5591  0CCB  083D               	movf	___flmul@sign^(0+128),w
  5592  0CCC  00B8               	movwf	??___flmul^(0+128)
  5593  0CCD  0838               	movf	??___flmul^(0+128),w
  5594  0CCE  04C7               	iorwf	(___flmul@prod^(0+128)+3),f
  5595  0CCF  0847               	movf	(___flmul@prod+3)^(0+128),w
  5596  0CD0  00B3               	movwf	(?___flmul+3)^(0+128)
  5597  0CD1  0846               	movf	(___flmul@prod+2)^(0+128),w
  5598  0CD2  00B2               	movwf	(?___flmul+2)^(0+128)
  5599  0CD3  0845               	movf	(___flmul@prod+1)^(0+128),w
  5600  0CD4  00B1               	movwf	(?___flmul+1)^(0+128)
  5601  0CD5  0844               	movf	___flmul@prod^(0+128),w
  5602  0CD6  00B0               	movwf	?___flmul^(0+128)
  5603  0CD7  0008               	return
  5604  0CD8                     __end_of___flmul:
  5605                           
  5606                           	psect	text10
  5607  19F0                     __ptext10:	
  5608 ;; *************** function __Umul8_16 *****************
  5609 ;; Defined at:
  5610 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul8_16.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  multiplier      1    wreg     unsigned char 
  5613 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  multiplier      1    8[BANK1 ] unsigned char 
  5616 ;;  word_mpld       2    6[BANK1 ] unsigned int 
  5617 ;;  product         2    4[BANK1 ] unsigned int 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2    0[BANK1 ] unsigned int 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, status,0
  5622 ;; Tracked objects:
  5623 ;;		On entry : 300/900
  5624 ;;		On exit  : 300/100
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5627 ;;      Params:         0       0       2       0       0
  5628 ;;      Locals:         0       0       5       0       0
  5629 ;;      Temps:          0       0       2       0       0
  5630 ;;      Totals:         0       0       9       0       0
  5631 ;;Total ram usage:        9 bytes
  5632 ;; Hardware stack levels used: 1
  5633 ;; Hardware stack levels required when called: 4
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		___flmul
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641  19F0                     __Umul8_16:	
  5642                           ;psect for function __Umul8_16
  5643                           
  5644                           
  5645                           ;incstack = 0
  5646                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5647                           ;__Umul8_16@multiplier stored from wreg
  5648  19F0  00A8               	movwf	__Umul8_16@multiplier^(0+128)
  5649  19F1  01A4               	clrf	__Umul8_16@product^(0+128)
  5650  19F2  01A5               	clrf	(__Umul8_16@product+1)^(0+128)
  5651  19F3  0820               	movf	__Umul8_16@multiplicand^(0+128),w
  5652  19F4  00A2               	movwf	??__Umul8_16^(0+128)
  5653  19F5  01A3               	clrf	(??__Umul8_16^(0+128)+1)
  5654  19F6  0822               	movf	??__Umul8_16^(0+128),w
  5655  19F7  00A6               	movwf	__Umul8_16@word_mpld^(0+128)
  5656  19F8  0823               	movf	(??__Umul8_16+1)^(0+128),w
  5657  19F9  00A7               	movwf	(__Umul8_16@word_mpld+1)^(0+128)
  5658  19FA                     l4078:
  5659  19FA  1C28               	btfss	__Umul8_16@multiplier^(0+128),0
  5660  19FB  2A02               	goto	l785
  5661  19FC  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5662  19FD  07A4               	addwf	__Umul8_16@product^(0+128),f
  5663  19FE  1803               	skipnc
  5664  19FF  0AA5               	incf	(__Umul8_16@product+1)^(0+128),f
  5665  1A00  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5666  1A01  07A5               	addwf	(__Umul8_16@product+1)^(0+128),f
  5667  1A02                     l785:
  5668  1A02  3001               	movlw	1
  5669  1A03                     u7025:
  5670  1A03  1003               	clrc
  5671  1A04  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5672  1A05  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5673  1A06  3EFF               	addlw	-1
  5674  1A07  1D03               	skipz
  5675  1A08  2A03               	goto	u7025
  5676  1A09  1003               	clrc
  5677  1A0A  0CA8               	rrf	__Umul8_16@multiplier^(0+128),f
  5678  1A0B  0828               	movf	__Umul8_16@multiplier^(0+128),w
  5679  1A0C  1D03               	btfss	3,2
  5680  1A0D  29FA               	goto	l4078
  5681  1A0E  0825               	movf	(__Umul8_16@product+1)^(0+128),w
  5682  1A0F  00A1               	movwf	(?__Umul8_16+1)^(0+128)
  5683  1A10  0824               	movf	__Umul8_16@product^(0+128),w
  5684  1A11  00A0               	movwf	?__Umul8_16^(0+128)
  5685  1A12  0008               	return
  5686  1A13                     __end_of__Umul8_16:
  5687                           
  5688                           	psect	text11
  5689  0752                     __ptext11:	
  5690 ;; *************** function __tdiv_to_l_ *****************
  5691 ;; Defined at:
  5692 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdivl.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  f1              4    0[BANK1 ] float 
  5695 ;;  f2              4    4[BANK1 ] float 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  quot            4   12[BANK1 ] unsigned long 
  5698 ;;  exp1            1   17[BANK1 ] unsigned char 
  5699 ;;  cntr            1   16[BANK1 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  4    0[BANK1 ] unsigned long 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, status,0
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 300/100
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5709 ;;      Params:         0       0       8       0       0
  5710 ;;      Locals:         0       0       6       0       0
  5711 ;;      Temps:          0       0       4       0       0
  5712 ;;      Totals:         0       0      18       0       0
  5713 ;;Total ram usage:       18 bytes
  5714 ;; Hardware stack levels used: 1
  5715 ;; Hardware stack levels required when called: 4
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_sprintf
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723  0752                     __tdiv_to_l_:	
  5724                           ;psect for function __tdiv_to_l_
  5725                           
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5729  0752  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0753  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0754  0820               	movf	__tdiv_to_l_@f1^(0+128),w
  5732  0755  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5733  0756  0821               	movf	(__tdiv_to_l_@f1+1)^(0+128),w
  5734  0757  00A9               	movwf	(??__tdiv_to_l_^(0+128)+1)
  5735  0758  0822               	movf	(__tdiv_to_l_@f1+2)^(0+128),w
  5736  0759  00AA               	movwf	(??__tdiv_to_l_^(0+128)+2)
  5737  075A  1003               	clrc
  5738  075B  0D29               	rlf	(??__tdiv_to_l_^(0+128)+1),w
  5739  075C  0D2A               	rlf	(??__tdiv_to_l_^(0+128)+2),w
  5740  075D  00AB               	movwf	(??__tdiv_to_l_+3)^(0+128)
  5741  075E  082B               	movf	(??__tdiv_to_l_+3)^(0+128),w
  5742  075F  00B1               	movwf	__tdiv_to_l_@exp1^(0+128)
  5743  0760  0831               	movf	__tdiv_to_l_@exp1^(0+128),w
  5744  0761  1D03               	btfss	3,2
  5745  0762  2F6C               	goto	l4654
  5746  0763                     l4650:
  5747  0763  3000               	movlw	0
  5748  0764  00A3               	movwf	(?__tdiv_to_l_+3)^(0+128)
  5749  0765  3000               	movlw	0
  5750  0766  00A2               	movwf	(?__tdiv_to_l_+2)^(0+128)
  5751  0767  3000               	movlw	0
  5752  0768  00A1               	movwf	(?__tdiv_to_l_+1)^(0+128)
  5753  0769  3000               	movlw	0
  5754  076A  00A0               	movwf	?__tdiv_to_l_^(0+128)
  5755  076B  0008               	return
  5756  076C                     l4654:
  5757  076C  0824               	movf	__tdiv_to_l_@f2^(0+128),w
  5758  076D  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5759  076E  0825               	movf	(__tdiv_to_l_@f2+1)^(0+128),w
  5760  076F  00A9               	movwf	(??__tdiv_to_l_^(0+128)+1)
  5761  0770  0826               	movf	(__tdiv_to_l_@f2+2)^(0+128),w
  5762  0771  00AA               	movwf	(??__tdiv_to_l_^(0+128)+2)
  5763  0772  1003               	clrc
  5764  0773  0D29               	rlf	(??__tdiv_to_l_^(0+128)+1),w
  5765  0774  0D2A               	rlf	(??__tdiv_to_l_^(0+128)+2),w
  5766  0775  00AB               	movwf	(??__tdiv_to_l_+3)^(0+128)
  5767  0776  082B               	movf	(??__tdiv_to_l_+3)^(0+128),w
  5768  0777  00B0               	movwf	__tdiv_to_l_@cntr^(0+128)
  5769  0778  0830               	movf	__tdiv_to_l_@cntr^(0+128),w
  5770  0779  1903               	btfsc	3,2
  5771  077A  2F63               	goto	l4650
  5772  077B  17A1               	bsf	(__tdiv_to_l_@f1^(0+128)+1),7
  5773  077C  30FF               	movlw	255
  5774  077D  05A0               	andwf	__tdiv_to_l_@f1^(0+128),f
  5775  077E  30FF               	movlw	255
  5776  077F  05A1               	andwf	(__tdiv_to_l_@f1+1)^(0+128),f
  5777  0780  3000               	movlw	0
  5778  0781  05A2               	andwf	(__tdiv_to_l_@f1+2)^(0+128),f
  5779  0782  17A5               	bsf	(__tdiv_to_l_@f2^(0+128)+1),7
  5780  0783  30FF               	movlw	255
  5781  0784  05A4               	andwf	__tdiv_to_l_@f2^(0+128),f
  5782  0785  30FF               	movlw	255
  5783  0786  05A5               	andwf	(__tdiv_to_l_@f2+1)^(0+128),f
  5784  0787  3000               	movlw	0
  5785  0788  05A6               	andwf	(__tdiv_to_l_@f2+2)^(0+128),f
  5786  0789  3000               	movlw	0
  5787  078A  00AF               	movwf	(__tdiv_to_l_@quot+3)^(0+128)
  5788  078B  3000               	movlw	0
  5789  078C  00AE               	movwf	(__tdiv_to_l_@quot+2)^(0+128)
  5790  078D  3000               	movlw	0
  5791  078E  00AD               	movwf	(__tdiv_to_l_@quot+1)^(0+128)
  5792  078F  3000               	movlw	0
  5793  0790  00AC               	movwf	__tdiv_to_l_@quot^(0+128)
  5794  0791  307F               	movlw	127
  5795  0792  02B1               	subwf	__tdiv_to_l_@exp1^(0+128),f
  5796  0793  3098               	movlw	152
  5797  0794  0730               	addwf	__tdiv_to_l_@cntr^(0+128),w
  5798  0795  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5799  0796  0828               	movf	??__tdiv_to_l_^(0+128),w
  5800  0797  02B1               	subwf	__tdiv_to_l_@exp1^(0+128),f
  5801  0798  3018               	movlw	24
  5802  0799  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5803  079A  0828               	movf	??__tdiv_to_l_^(0+128),w
  5804  079B  00B0               	movwf	__tdiv_to_l_@cntr^(0+128)
  5805  079C                     l4668:
  5806  079C  3001               	movlw	1
  5807  079D  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5808  079E                     u8435:
  5809  079E  1003               	clrc
  5810  079F  0DAC               	rlf	__tdiv_to_l_@quot^(0+128),f
  5811  07A0  0DAD               	rlf	(__tdiv_to_l_@quot+1)^(0+128),f
  5812  07A1  0DAE               	rlf	(__tdiv_to_l_@quot+2)^(0+128),f
  5813  07A2  0DAF               	rlf	(__tdiv_to_l_@quot+3)^(0+128),f
  5814  07A3  0BA8               	decfsz	??__tdiv_to_l_^(0+128),f
  5815  07A4  2F9E               	goto	u8435
  5816  07A5  0826               	movf	(__tdiv_to_l_@f2+2)^(0+128),w
  5817  07A6  0222               	subwf	(__tdiv_to_l_@f1+2)^(0+128),w
  5818  07A7  1D03               	skipz
  5819  07A8  2FAF               	goto	u8445
  5820  07A9  0825               	movf	(__tdiv_to_l_@f2+1)^(0+128),w
  5821  07AA  0221               	subwf	(__tdiv_to_l_@f1+1)^(0+128),w
  5822  07AB  1D03               	skipz
  5823  07AC  2FAF               	goto	u8445
  5824  07AD  0824               	movf	__tdiv_to_l_@f2^(0+128),w
  5825  07AE  0220               	subwf	__tdiv_to_l_@f1^(0+128),w
  5826  07AF                     u8445:
  5827  07AF  1C03               	skipc
  5828  07B0  2FBC               	goto	l4676
  5829  07B1  0824               	movf	__tdiv_to_l_@f2^(0+128),w
  5830  07B2  02A0               	subwf	__tdiv_to_l_@f1^(0+128),f
  5831  07B3  0825               	movf	(__tdiv_to_l_@f2+1)^(0+128),w
  5832  07B4  1C03               	skipc
  5833  07B5  0F25               	incfsz	(__tdiv_to_l_@f2+1)^(0+128),w
  5834  07B6  02A1               	subwf	(__tdiv_to_l_@f1+1)^(0+128),f
  5835  07B7  0826               	movf	(__tdiv_to_l_@f2+2)^(0+128),w
  5836  07B8  1C03               	skipc
  5837  07B9  0A26               	incf	(__tdiv_to_l_@f2+2)^(0+128),w
  5838  07BA  02A2               	subwf	(__tdiv_to_l_@f1+2)^(0+128),f
  5839  07BB  142C               	bsf	__tdiv_to_l_@quot^(0+128),0
  5840  07BC                     l4676:
  5841  07BC  3001               	movlw	1
  5842  07BD                     u8455:
  5843  07BD  1003               	clrc
  5844  07BE  0DA0               	rlf	__tdiv_to_l_@f1^(0+128),f
  5845  07BF  0DA1               	rlf	(__tdiv_to_l_@f1+1)^(0+128),f
  5846  07C0  0DA2               	rlf	(__tdiv_to_l_@f1+2)^(0+128),f
  5847  07C1  3EFF               	addlw	-1
  5848  07C2  1D03               	skipz
  5849  07C3  2FBD               	goto	u8455
  5850  07C4  3001               	movlw	1
  5851  07C5  02B0               	subwf	__tdiv_to_l_@cntr^(0+128),f
  5852  07C6  1D03               	btfss	3,2
  5853  07C7  2F9C               	goto	l4668
  5854  07C8  1FB1               	btfss	__tdiv_to_l_@exp1^(0+128),7
  5855  07C9  2FDF               	goto	l4688
  5856  07CA  0831               	movf	__tdiv_to_l_@exp1^(0+128),w
  5857  07CB  3A80               	xorlw	128
  5858  07CC  3E97               	addlw	151
  5859  07CD  1C03               	btfss	3,0
  5860  07CE  2F63               	goto	l4650
  5861  07CF                     l4686:
  5862  07CF  3001               	movlw	1
  5863  07D0                     u8495:
  5864  07D0  1003               	clrc
  5865  07D1  0CAF               	rrf	(__tdiv_to_l_@quot+3)^(0+128),f
  5866  07D2  0CAE               	rrf	(__tdiv_to_l_@quot+2)^(0+128),f
  5867  07D3  0CAD               	rrf	(__tdiv_to_l_@quot+1)^(0+128),f
  5868  07D4  0CAC               	rrf	__tdiv_to_l_@quot^(0+128),f
  5869  07D5  3EFF               	addlw	-1
  5870  07D6  1D03               	skipz
  5871  07D7  2FD0               	goto	u8495
  5872  07D8  3001               	movlw	1
  5873  07D9  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5874  07DA  0828               	movf	??__tdiv_to_l_^(0+128),w
  5875  07DB  07B1               	addwf	__tdiv_to_l_@exp1^(0+128),f
  5876  07DC  1903               	btfsc	3,2
  5877  07DD  2FF2               	goto	l4696
  5878  07DE  2FCF               	goto	l4686
  5879  07DF                     l4688:
  5880  07DF  3018               	movlw	24
  5881  07E0  0231               	subwf	__tdiv_to_l_@exp1^(0+128),w
  5882  07E1  1803               	btfsc	3,0
  5883  07E2  2F63               	goto	l4650
  5884  07E3                     l571:
  5885  07E3  0831               	movf	__tdiv_to_l_@exp1^(0+128),w
  5886  07E4  1903               	btfsc	3,2
  5887  07E5  2FF2               	goto	l4696
  5888  07E6  3001               	movlw	1
  5889  07E7  00A8               	movwf	??__tdiv_to_l_^(0+128)
  5890  07E8                     u8525:
  5891  07E8  1003               	clrc
  5892  07E9  0DAC               	rlf	__tdiv_to_l_@quot^(0+128),f
  5893  07EA  0DAD               	rlf	(__tdiv_to_l_@quot+1)^(0+128),f
  5894  07EB  0DAE               	rlf	(__tdiv_to_l_@quot+2)^(0+128),f
  5895  07EC  0DAF               	rlf	(__tdiv_to_l_@quot+3)^(0+128),f
  5896  07ED  0BA8               	decfsz	??__tdiv_to_l_^(0+128),f
  5897  07EE  2FE8               	goto	u8525
  5898  07EF  3001               	movlw	1
  5899  07F0  02B1               	subwf	__tdiv_to_l_@exp1^(0+128),f
  5900  07F1  2FE3               	goto	l571
  5901  07F2                     l4696:
  5902  07F2  082F               	movf	(__tdiv_to_l_@quot+3)^(0+128),w
  5903  07F3  00A3               	movwf	(?__tdiv_to_l_+3)^(0+128)
  5904  07F4  082E               	movf	(__tdiv_to_l_@quot+2)^(0+128),w
  5905  07F5  00A2               	movwf	(?__tdiv_to_l_+2)^(0+128)
  5906  07F6  082D               	movf	(__tdiv_to_l_@quot+1)^(0+128),w
  5907  07F7  00A1               	movwf	(?__tdiv_to_l_+1)^(0+128)
  5908  07F8  082C               	movf	__tdiv_to_l_@quot^(0+128),w
  5909  07F9  00A0               	movwf	?__tdiv_to_l_^(0+128)
  5910  07FA  0008               	return
  5911  07FB                     __end_of__tdiv_to_l_:
  5912                           
  5913                           	psect	text12
  5914  10BD                     __ptext12:	
  5915 ;; *************** function __div_to_l_ *****************
  5916 ;; Defined at:
  5917 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fldivl.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  f1              4    0[BANK1 ] unsigned long 
  5920 ;;  f2              4    4[BANK1 ] unsigned long 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  quot            4    9[BANK1 ] unsigned long 
  5923 ;;  exp1            1   14[BANK1 ] unsigned char 
  5924 ;;  cntr            1   13[BANK1 ] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  4    0[BANK1 ] unsigned long 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 300/900
  5931 ;;		On exit  : 300/100
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5934 ;;      Params:         0       0       8       0       0
  5935 ;;      Locals:         0       0       6       0       0
  5936 ;;      Temps:          0       0       1       0       0
  5937 ;;      Totals:         0       0      15       0       0
  5938 ;;Total ram usage:       15 bytes
  5939 ;; Hardware stack levels used: 1
  5940 ;; Hardware stack levels required when called: 4
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_sprintf
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948  10BD                     __div_to_l_:	
  5949                           ;psect for function __div_to_l_
  5950                           
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in __div_to_l_: [wreg+status,2+status,0]
  5954  10BD  1003               	clrc
  5955  10BE  0D22               	rlf	(__div_to_l_@f1+2)^(0+128),w
  5956  10BF  0D23               	rlf	(__div_to_l_@f1+3)^(0+128),w
  5957  10C0  00A8               	movwf	??__div_to_l_^(0+128)
  5958  10C1  0828               	movf	??__div_to_l_^(0+128),w
  5959  10C2  00AE               	movwf	__div_to_l_@exp1^(0+128)
  5960  10C3  082E               	movf	__div_to_l_@exp1^(0+128),w
  5961  10C4  1D03               	btfss	3,2
  5962  10C5  28CF               	goto	l4706
  5963  10C6                     l4702:
  5964  10C6  3000               	movlw	0
  5965  10C7  00A3               	movwf	(?__div_to_l_+3)^(0+128)
  5966  10C8  3000               	movlw	0
  5967  10C9  00A2               	movwf	(?__div_to_l_+2)^(0+128)
  5968  10CA  3000               	movlw	0
  5969  10CB  00A1               	movwf	(?__div_to_l_+1)^(0+128)
  5970  10CC  3000               	movlw	0
  5971  10CD  00A0               	movwf	?__div_to_l_^(0+128)
  5972  10CE  0008               	return
  5973  10CF                     l4706:
  5974  10CF  1003               	clrc
  5975  10D0  0D26               	rlf	(__div_to_l_@f2+2)^(0+128),w
  5976  10D1  0D27               	rlf	(__div_to_l_@f2+3)^(0+128),w
  5977  10D2  00A8               	movwf	??__div_to_l_^(0+128)
  5978  10D3  0828               	movf	??__div_to_l_^(0+128),w
  5979  10D4  00AD               	movwf	__div_to_l_@cntr^(0+128)
  5980  10D5  082D               	movf	__div_to_l_@cntr^(0+128),w
  5981  10D6  1903               	btfsc	3,2
  5982  10D7  28C6               	goto	l4702
  5983  10D8  17A2               	bsf	(__div_to_l_@f1^(0+128)+2),7
  5984  10D9  30FF               	movlw	255
  5985  10DA  05A0               	andwf	__div_to_l_@f1^(0+128),f
  5986  10DB  30FF               	movlw	255
  5987  10DC  05A1               	andwf	(__div_to_l_@f1+1)^(0+128),f
  5988  10DD  30FF               	movlw	255
  5989  10DE  05A2               	andwf	(__div_to_l_@f1+2)^(0+128),f
  5990  10DF  3000               	movlw	0
  5991  10E0  05A3               	andwf	(__div_to_l_@f1+3)^(0+128),f
  5992  10E1  17A6               	bsf	(__div_to_l_@f2^(0+128)+2),7
  5993  10E2  30FF               	movlw	255
  5994  10E3  05A4               	andwf	__div_to_l_@f2^(0+128),f
  5995  10E4  30FF               	movlw	255
  5996  10E5  05A5               	andwf	(__div_to_l_@f2+1)^(0+128),f
  5997  10E6  30FF               	movlw	255
  5998  10E7  05A6               	andwf	(__div_to_l_@f2+2)^(0+128),f
  5999  10E8  3000               	movlw	0
  6000  10E9  05A7               	andwf	(__div_to_l_@f2+3)^(0+128),f
  6001  10EA  3000               	movlw	0
  6002  10EB  00AC               	movwf	(__div_to_l_@quot+3)^(0+128)
  6003  10EC  3000               	movlw	0
  6004  10ED  00AB               	movwf	(__div_to_l_@quot+2)^(0+128)
  6005  10EE  3000               	movlw	0
  6006  10EF  00AA               	movwf	(__div_to_l_@quot+1)^(0+128)
  6007  10F0  3000               	movlw	0
  6008  10F1  00A9               	movwf	__div_to_l_@quot^(0+128)
  6009  10F2  307F               	movlw	127
  6010  10F3  02AE               	subwf	__div_to_l_@exp1^(0+128),f
  6011  10F4  30A0               	movlw	160
  6012  10F5  072D               	addwf	__div_to_l_@cntr^(0+128),w
  6013  10F6  00A8               	movwf	??__div_to_l_^(0+128)
  6014  10F7  0828               	movf	??__div_to_l_^(0+128),w
  6015  10F8  02AE               	subwf	__div_to_l_@exp1^(0+128),f
  6016  10F9  3020               	movlw	32
  6017  10FA  00A8               	movwf	??__div_to_l_^(0+128)
  6018  10FB  0828               	movf	??__div_to_l_^(0+128),w
  6019  10FC  00AD               	movwf	__div_to_l_@cntr^(0+128)
  6020  10FD                     l4720:
  6021  10FD  3001               	movlw	1
  6022  10FE  00A8               	movwf	??__div_to_l_^(0+128)
  6023  10FF                     u8565:
  6024  10FF  1003               	clrc
  6025  1100  0DA9               	rlf	__div_to_l_@quot^(0+128),f
  6026  1101  0DAA               	rlf	(__div_to_l_@quot+1)^(0+128),f
  6027  1102  0DAB               	rlf	(__div_to_l_@quot+2)^(0+128),f
  6028  1103  0DAC               	rlf	(__div_to_l_@quot+3)^(0+128),f
  6029  1104  0BA8               	decfsz	??__div_to_l_^(0+128),f
  6030  1105  28FF               	goto	u8565
  6031  1106  0827               	movf	(__div_to_l_@f2+3)^(0+128),w
  6032  1107  0223               	subwf	(__div_to_l_@f1+3)^(0+128),w
  6033  1108  1D03               	skipz
  6034  1109  2914               	goto	u8575
  6035  110A  0826               	movf	(__div_to_l_@f2+2)^(0+128),w
  6036  110B  0222               	subwf	(__div_to_l_@f1+2)^(0+128),w
  6037  110C  1D03               	skipz
  6038  110D  2914               	goto	u8575
  6039  110E  0825               	movf	(__div_to_l_@f2+1)^(0+128),w
  6040  110F  0221               	subwf	(__div_to_l_@f1+1)^(0+128),w
  6041  1110  1D03               	skipz
  6042  1111  2914               	goto	u8575
  6043  1112  0824               	movf	__div_to_l_@f2^(0+128),w
  6044  1113  0220               	subwf	__div_to_l_@f1^(0+128),w
  6045  1114                     u8575:
  6046  1114  1C03               	skipc
  6047  1115  2925               	goto	l4728
  6048  1116  0824               	movf	__div_to_l_@f2^(0+128),w
  6049  1117  02A0               	subwf	__div_to_l_@f1^(0+128),f
  6050  1118  0825               	movf	(__div_to_l_@f2+1)^(0+128),w
  6051  1119  1C03               	skipc
  6052  111A  0F25               	incfsz	(__div_to_l_@f2+1)^(0+128),w
  6053  111B  02A1               	subwf	(__div_to_l_@f1+1)^(0+128),f
  6054  111C  0826               	movf	(__div_to_l_@f2+2)^(0+128),w
  6055  111D  1C03               	skipc
  6056  111E  0F26               	incfsz	(__div_to_l_@f2+2)^(0+128),w
  6057  111F  02A2               	subwf	(__div_to_l_@f1+2)^(0+128),f
  6058  1120  0827               	movf	(__div_to_l_@f2+3)^(0+128),w
  6059  1121  1C03               	skipc
  6060  1122  0F27               	incfsz	(__div_to_l_@f2+3)^(0+128),w
  6061  1123  02A3               	subwf	(__div_to_l_@f1+3)^(0+128),f
  6062  1124  1429               	bsf	__div_to_l_@quot^(0+128),0
  6063  1125                     l4728:
  6064  1125  3001               	movlw	1
  6065  1126  00A8               	movwf	??__div_to_l_^(0+128)
  6066  1127                     u8585:
  6067  1127  1003               	clrc
  6068  1128  0DA0               	rlf	__div_to_l_@f1^(0+128),f
  6069  1129  0DA1               	rlf	(__div_to_l_@f1+1)^(0+128),f
  6070  112A  0DA2               	rlf	(__div_to_l_@f1+2)^(0+128),f
  6071  112B  0DA3               	rlf	(__div_to_l_@f1+3)^(0+128),f
  6072  112C  0BA8               	decfsz	??__div_to_l_^(0+128),f
  6073  112D  2927               	goto	u8585
  6074  112E  3001               	movlw	1
  6075  112F  02AD               	subwf	__div_to_l_@cntr^(0+128),f
  6076  1130  1D03               	btfss	3,2
  6077  1131  28FD               	goto	l4720
  6078  1132  1FAE               	btfss	__div_to_l_@exp1^(0+128),7
  6079  1133  2949               	goto	l4740
  6080  1134  082E               	movf	__div_to_l_@exp1^(0+128),w
  6081  1135  3A80               	xorlw	128
  6082  1136  3E9F               	addlw	159
  6083  1137  1C03               	btfss	3,0
  6084  1138  28C6               	goto	l4702
  6085  1139                     l4738:
  6086  1139  3001               	movlw	1
  6087  113A                     u8625:
  6088  113A  1003               	clrc
  6089  113B  0CAC               	rrf	(__div_to_l_@quot+3)^(0+128),f
  6090  113C  0CAB               	rrf	(__div_to_l_@quot+2)^(0+128),f
  6091  113D  0CAA               	rrf	(__div_to_l_@quot+1)^(0+128),f
  6092  113E  0CA9               	rrf	__div_to_l_@quot^(0+128),f
  6093  113F  3EFF               	addlw	-1
  6094  1140  1D03               	skipz
  6095  1141  293A               	goto	u8625
  6096  1142  3001               	movlw	1
  6097  1143  00A8               	movwf	??__div_to_l_^(0+128)
  6098  1144  0828               	movf	??__div_to_l_^(0+128),w
  6099  1145  07AE               	addwf	__div_to_l_@exp1^(0+128),f
  6100  1146  1903               	btfsc	3,2
  6101  1147  295C               	goto	l4748
  6102  1148  2939               	goto	l4738
  6103  1149                     l4740:
  6104  1149  3020               	movlw	32
  6105  114A  022E               	subwf	__div_to_l_@exp1^(0+128),w
  6106  114B  1803               	btfsc	3,0
  6107  114C  28C6               	goto	l4702
  6108  114D                     l524:
  6109  114D  082E               	movf	__div_to_l_@exp1^(0+128),w
  6110  114E  1903               	btfsc	3,2
  6111  114F  295C               	goto	l4748
  6112  1150  3001               	movlw	1
  6113  1151  00A8               	movwf	??__div_to_l_^(0+128)
  6114  1152                     u8655:
  6115  1152  1003               	clrc
  6116  1153  0DA9               	rlf	__div_to_l_@quot^(0+128),f
  6117  1154  0DAA               	rlf	(__div_to_l_@quot+1)^(0+128),f
  6118  1155  0DAB               	rlf	(__div_to_l_@quot+2)^(0+128),f
  6119  1156  0DAC               	rlf	(__div_to_l_@quot+3)^(0+128),f
  6120  1157  0BA8               	decfsz	??__div_to_l_^(0+128),f
  6121  1158  2952               	goto	u8655
  6122  1159  3001               	movlw	1
  6123  115A  02AE               	subwf	__div_to_l_@exp1^(0+128),f
  6124  115B  294D               	goto	l524
  6125  115C                     l4748:
  6126  115C  082C               	movf	(__div_to_l_@quot+3)^(0+128),w
  6127  115D  00A3               	movwf	(?__div_to_l_+3)^(0+128)
  6128  115E  082B               	movf	(__div_to_l_@quot+2)^(0+128),w
  6129  115F  00A2               	movwf	(?__div_to_l_+2)^(0+128)
  6130  1160  082A               	movf	(__div_to_l_@quot+1)^(0+128),w
  6131  1161  00A1               	movwf	(?__div_to_l_+1)^(0+128)
  6132  1162  0829               	movf	__div_to_l_@quot^(0+128),w
  6133  1163  00A0               	movwf	?__div_to_l_^(0+128)
  6134  1164  0008               	return
  6135  1165                     __end_of__div_to_l_:
  6136                           
  6137                           	psect	text13
  6138  1F5D                     __ptext13:	
  6139 ;; *************** function ___xxtofl *****************
  6140 ;; Defined at:
  6141 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\xxtofl.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  sign            1    wreg     unsigned char 
  6144 ;;  val             4    0[BANK1 ] long 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  sign            1    8[BANK1 ] unsigned char 
  6147 ;;  arg             4   10[BANK1 ] unsigned long 
  6148 ;;  exp             1    9[BANK1 ] unsigned char 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  4    0[BANK1 ] unsigned char 
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, status,0
  6153 ;; Tracked objects:
  6154 ;;		On entry : 300/900
  6155 ;;		On exit  : 300/100
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6158 ;;      Params:         0       0       4       0       0
  6159 ;;      Locals:         0       0       6       0       0
  6160 ;;      Temps:          0       0       4       0       0
  6161 ;;      Totals:         0       0      14       0       0
  6162 ;;Total ram usage:       14 bytes
  6163 ;; Hardware stack levels used: 1
  6164 ;; Hardware stack levels required when called: 4
  6165 ;; This function calls:
  6166 ;;		Nothing
  6167 ;; This function is called by:
  6168 ;;		_sprintf
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172  1F5D                     ___xxtofl:	
  6173                           ;psect for function ___xxtofl
  6174                           
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  6178                           ;___xxtofl@sign stored from wreg
  6179  1F5D  00A8               	movwf	___xxtofl@sign^(0+128)
  6180  1F5E  0828               	movf	___xxtofl@sign^(0+128),w
  6181  1F5F  1D03               	btfss	3,2
  6182  1F60  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  6183  1F61  2F72               	goto	l4842
  6184  1F62  0920               	comf	___xxtofl@val^(0+128),w
  6185  1F63  00AA               	movwf	___xxtofl@arg^(0+128)
  6186  1F64  0921               	comf	(___xxtofl@val^(0+128)+1),w
  6187  1F65  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  6188  1F66  0922               	comf	(___xxtofl@val^(0+128)+2),w
  6189  1F67  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  6190  1F68  0923               	comf	(___xxtofl@val^(0+128)+3),w
  6191  1F69  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  6192  1F6A  0AAA               	incf	___xxtofl@arg^(0+128),f
  6193  1F6B  1903               	skipnz
  6194  1F6C  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  6195  1F6D  1903               	skipnz
  6196  1F6E  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  6197  1F6F  1903               	skipnz
  6198  1F70  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  6199  1F71  2F7A               	goto	l810
  6200  1F72                     l4842:
  6201  1F72  0823               	movf	(___xxtofl@val+3)^(0+128),w
  6202  1F73  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  6203  1F74  0822               	movf	(___xxtofl@val+2)^(0+128),w
  6204  1F75  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  6205  1F76  0821               	movf	(___xxtofl@val+1)^(0+128),w
  6206  1F77  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  6207  1F78  0820               	movf	___xxtofl@val^(0+128),w
  6208  1F79  00AA               	movwf	___xxtofl@arg^(0+128)
  6209  1F7A                     l810:
  6210  1F7A  0823               	movf	(___xxtofl@val+3)^(0+128),w
  6211  1F7B  0422               	iorwf	(___xxtofl@val+2)^(0+128),w
  6212  1F7C  0421               	iorwf	(___xxtofl@val+1)^(0+128),w
  6213  1F7D  0420               	iorwf	___xxtofl@val^(0+128),w
  6214  1F7E  1D03               	skipz
  6215  1F7F  2F89               	goto	l4848
  6216  1F80  3000               	movlw	0
  6217  1F81  00A3               	movwf	(?___xxtofl+3)^(0+128)
  6218  1F82  3000               	movlw	0
  6219  1F83  00A2               	movwf	(?___xxtofl+2)^(0+128)
  6220  1F84  3000               	movlw	0
  6221  1F85  00A1               	movwf	(?___xxtofl+1)^(0+128)
  6222  1F86  3000               	movlw	0
  6223  1F87  00A0               	movwf	?___xxtofl^(0+128)
  6224  1F88  0008               	return
  6225  1F89                     l4848:
  6226  1F89  3096               	movlw	150
  6227  1F8A  00A4               	movwf	??___xxtofl^(0+128)
  6228  1F8B  0824               	movf	??___xxtofl^(0+128),w
  6229  1F8C  00A9               	movwf	___xxtofl@exp^(0+128)
  6230  1F8D                     l4852:
  6231  1F8D  30FE               	movlw	254
  6232  1F8E  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  6233  1F8F  1903               	btfsc	3,2
  6234  1F90  2FBA               	goto	l816
  6235  1F91  3001               	movlw	1
  6236  1F92  00A4               	movwf	??___xxtofl^(0+128)
  6237  1F93  0824               	movf	??___xxtofl^(0+128),w
  6238  1F94  07A9               	addwf	___xxtofl@exp^(0+128),f
  6239  1F95  3001               	movlw	1
  6240  1F96                     u8925:
  6241  1F96  1003               	clrc
  6242  1F97  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  6243  1F98  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  6244  1F99  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  6245  1F9A  0CAA               	rrf	___xxtofl@arg^(0+128),f
  6246  1F9B  3EFF               	addlw	-1
  6247  1F9C  1D03               	skipz
  6248  1F9D  2F96               	goto	u8925
  6249  1F9E  2F8D               	goto	l4852
  6250  1F9F                     l4854:
  6251  1F9F  3001               	movlw	1
  6252  1FA0  00A4               	movwf	??___xxtofl^(0+128)
  6253  1FA1  0824               	movf	??___xxtofl^(0+128),w
  6254  1FA2  07A9               	addwf	___xxtofl@exp^(0+128),f
  6255  1FA3  3001               	movlw	1
  6256  1FA4  07AA               	addwf	___xxtofl@arg^(0+128),f
  6257  1FA5  3000               	movlw	0
  6258  1FA6  1803               	skipnc
  6259  1FA7  3001               	movlw	1
  6260  1FA8  07AB               	addwf	(___xxtofl@arg+1)^(0+128),f
  6261  1FA9  3000               	movlw	0
  6262  1FAA  1803               	skipnc
  6263  1FAB  3001               	movlw	1
  6264  1FAC  07AC               	addwf	(___xxtofl@arg+2)^(0+128),f
  6265  1FAD  3000               	movlw	0
  6266  1FAE  1803               	skipnc
  6267  1FAF  3001               	movlw	1
  6268  1FB0  07AD               	addwf	(___xxtofl@arg+3)^(0+128),f
  6269  1FB1  3001               	movlw	1
  6270  1FB2                     u8945:
  6271  1FB2  1003               	clrc
  6272  1FB3  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  6273  1FB4  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  6274  1FB5  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  6275  1FB6  0CAA               	rrf	___xxtofl@arg^(0+128),f
  6276  1FB7  3EFF               	addlw	-1
  6277  1FB8  1D03               	skipz
  6278  1FB9  2FB2               	goto	u8945
  6279  1FBA                     l816:
  6280  1FBA  30FF               	movlw	255
  6281  1FBB  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  6282  1FBC  1903               	btfsc	3,2
  6283  1FBD  2FCE               	goto	l4862
  6284  1FBE  2F9F               	goto	l4854
  6285  1FBF                     l4864:
  6286  1FBF  3002               	movlw	2
  6287  1FC0  0229               	subwf	___xxtofl@exp^(0+128),w
  6288  1FC1  1C03               	btfss	3,0
  6289  1FC2  2FD0               	goto	l823
  6290  1FC3  3001               	movlw	1
  6291  1FC4  02A9               	subwf	___xxtofl@exp^(0+128),f
  6292  1FC5  3001               	movlw	1
  6293  1FC6  00A4               	movwf	??___xxtofl^(0+128)
  6294  1FC7                     u8965:
  6295  1FC7  1003               	clrc
  6296  1FC8  0DAA               	rlf	___xxtofl@arg^(0+128),f
  6297  1FC9  0DAB               	rlf	(___xxtofl@arg+1)^(0+128),f
  6298  1FCA  0DAC               	rlf	(___xxtofl@arg+2)^(0+128),f
  6299  1FCB  0DAD               	rlf	(___xxtofl@arg+3)^(0+128),f
  6300  1FCC  0BA4               	decfsz	??___xxtofl^(0+128),f
  6301  1FCD  2FC7               	goto	u8965
  6302  1FCE                     l4862:
  6303  1FCE  1FAC               	btfss	(___xxtofl@arg+2)^(0+128),7
  6304  1FCF  2FBF               	goto	l4864
  6305  1FD0                     l823:
  6306  1FD0  1829               	btfsc	___xxtofl@exp^(0+128),0
  6307  1FD1  2FDA               	goto	l824
  6308  1FD2  30FF               	movlw	255
  6309  1FD3  05AA               	andwf	___xxtofl@arg^(0+128),f
  6310  1FD4  30FF               	movlw	255
  6311  1FD5  05AB               	andwf	(___xxtofl@arg+1)^(0+128),f
  6312  1FD6  307F               	movlw	127
  6313  1FD7  05AC               	andwf	(___xxtofl@arg+2)^(0+128),f
  6314  1FD8  30FF               	movlw	255
  6315  1FD9  05AD               	andwf	(___xxtofl@arg+3)^(0+128),f
  6316  1FDA                     l824:
  6317  1FDA  1003               	clrc
  6318  1FDB  0CA9               	rrf	___xxtofl@exp^(0+128),f
  6319  1FDC  0829               	movf	___xxtofl@exp^(0+128),w
  6320  1FDD  00A4               	movwf	??___xxtofl^(0+128)
  6321  1FDE  01A5               	clrf	(??___xxtofl^(0+128)+1)
  6322  1FDF  01A6               	clrf	(??___xxtofl^(0+128)+2)
  6323  1FE0  01A7               	clrf	(??___xxtofl^(0+128)+3)
  6324  1FE1  3018               	movlw	24
  6325  1FE2                     u9005:
  6326  1FE2  1003               	clrc
  6327  1FE3  0DA4               	rlf	??___xxtofl^(0+128),f
  6328  1FE4  0DA5               	rlf	(??___xxtofl^(0+128)+1),f
  6329  1FE5  0DA6               	rlf	(??___xxtofl^(0+128)+2),f
  6330  1FE6  0DA7               	rlf	(??___xxtofl^(0+128)+3),f
  6331  1FE7  3EFF               	addlw	-1
  6332  1FE8  1D03               	skipz
  6333  1FE9  2FE2               	goto	u9005
  6334  1FEA  0824               	movf	??___xxtofl^(0+128),w
  6335  1FEB  04AA               	iorwf	___xxtofl@arg^(0+128),f
  6336  1FEC  0825               	movf	(??___xxtofl+1)^(0+128),w
  6337  1FED  04AB               	iorwf	(___xxtofl@arg+1)^(0+128),f
  6338  1FEE  0826               	movf	(??___xxtofl+2)^(0+128),w
  6339  1FEF  04AC               	iorwf	(___xxtofl@arg+2)^(0+128),f
  6340  1FF0  0827               	movf	(??___xxtofl+3)^(0+128),w
  6341  1FF1  04AD               	iorwf	(___xxtofl@arg+3)^(0+128),f
  6342  1FF2  0828               	movf	___xxtofl@sign^(0+128),w
  6343  1FF3  1D03               	btfss	3,2
  6344  1FF4  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  6345  1FF5  2FF7               	goto	l4876
  6346  1FF6  17AD               	bsf	(___xxtofl@arg^(0+128)+3),7
  6347  1FF7                     l4876:
  6348  1FF7  082D               	movf	(___xxtofl@arg+3)^(0+128),w
  6349  1FF8  00A3               	movwf	(?___xxtofl+3)^(0+128)
  6350  1FF9  082C               	movf	(___xxtofl@arg+2)^(0+128),w
  6351  1FFA  00A2               	movwf	(?___xxtofl+2)^(0+128)
  6352  1FFB  082B               	movf	(___xxtofl@arg+1)^(0+128),w
  6353  1FFC  00A1               	movwf	(?___xxtofl+1)^(0+128)
  6354  1FFD  082A               	movf	___xxtofl@arg^(0+128),w
  6355  1FFE  00A0               	movwf	?___xxtofl^(0+128)
  6356  1FFF  0008               	return
  6357  2000                     __end_of___xxtofl:
  6358                           
  6359                           	psect	text14
  6360  198B                     __ptext14:	
  6361 ;; *************** function ___wmul *****************
  6362 ;; Defined at:
  6363 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  multiplier      2    0[BANK1 ] unsigned int 
  6366 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  product         2    4[BANK1 ] unsigned int 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2    0[BANK1 ] unsigned int 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 300/100
  6375 ;;		On exit  : 300/100
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6378 ;;      Params:         0       0       4       0       0
  6379 ;;      Locals:         0       0       2       0       0
  6380 ;;      Temps:          0       0       0       0       0
  6381 ;;      Totals:         0       0       6       0       0
  6382 ;;Total ram usage:        6 bytes
  6383 ;; Hardware stack levels used: 1
  6384 ;; Hardware stack levels required when called: 4
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_sprintf
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392  198B                     ___wmul:	
  6393                           ;psect for function ___wmul
  6394                           
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6398  198B  01A4               	clrf	___wmul@product^(0+128)
  6399  198C  01A5               	clrf	(___wmul@product+1)^(0+128)
  6400  198D                     l4754:
  6401  198D  1C20               	btfss	___wmul@multiplier^(0+128),0
  6402  198E  2995               	goto	l343
  6403  198F  0822               	movf	___wmul@multiplicand^(0+128),w
  6404  1990  07A4               	addwf	___wmul@product^(0+128),f
  6405  1991  1803               	skipnc
  6406  1992  0AA5               	incf	(___wmul@product+1)^(0+128),f
  6407  1993  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  6408  1994  07A5               	addwf	(___wmul@product+1)^(0+128),f
  6409  1995                     l343:
  6410  1995  3001               	movlw	1
  6411  1996                     u8685:
  6412  1996  1003               	clrc
  6413  1997  0DA2               	rlf	___wmul@multiplicand^(0+128),f
  6414  1998  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6415  1999  3EFF               	addlw	-1
  6416  199A  1D03               	skipz
  6417  199B  2996               	goto	u8685
  6418  199C  3001               	movlw	1
  6419  199D                     u8695:
  6420  199D  1003               	clrc
  6421  199E  0CA1               	rrf	(___wmul@multiplier+1)^(0+128),f
  6422  199F  0CA0               	rrf	___wmul@multiplier^(0+128),f
  6423  19A0  3EFF               	addlw	-1
  6424  19A1  1D03               	skipz
  6425  19A2  299D               	goto	u8695
  6426  19A3  0820               	movf	___wmul@multiplier^(0+128),w
  6427  19A4  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6428  19A5  1D03               	btfss	3,2
  6429  19A6  298D               	goto	l4754
  6430  19A7  0825               	movf	(___wmul@product+1)^(0+128),w
  6431  19A8  00A1               	movwf	(?___wmul+1)^(0+128)
  6432  19A9  0824               	movf	___wmul@product^(0+128),w
  6433  19AA  00A0               	movwf	?___wmul^(0+128)
  6434  19AB  0008               	return
  6435  19AC                     __end_of___wmul:
  6436                           
  6437                           	psect	text15
  6438  1C60                     __ptext15:	
  6439 ;; *************** function ___llmod *****************
  6440 ;; Defined at:
  6441 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\llmod.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  divisor         4   14[BANK1 ] unsigned long 
  6444 ;;  dividend        4   18[BANK1 ] unsigned long 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  counter         1   23[BANK1 ] unsigned char 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  4   14[BANK1 ] unsigned long 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 300/900
  6453 ;;		On exit  : 300/100
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6456 ;;      Params:         0       0       8       0       0
  6457 ;;      Locals:         0       0       1       0       0
  6458 ;;      Temps:          0       0       1       0       0
  6459 ;;      Totals:         0       0      10       0       0
  6460 ;;Total ram usage:       10 bytes
  6461 ;; Hardware stack levels used: 1
  6462 ;; Hardware stack levels required when called: 4
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_sprintf
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470  1C60                     ___llmod:	
  6471                           ;psect for function ___llmod
  6472                           
  6473                           
  6474                           ;incstack = 0
  6475                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6476  1C60  0831               	movf	(___llmod@divisor+3)^(0+128),w
  6477  1C61  0430               	iorwf	(___llmod@divisor+2)^(0+128),w
  6478  1C62  042F               	iorwf	(___llmod@divisor+1)^(0+128),w
  6479  1C63  042E               	iorwf	___llmod@divisor^(0+128),w
  6480  1C64  1903               	skipnz
  6481  1C65  2CA3               	goto	l3324
  6482  1C66  01B7               	clrf	___llmod@counter^(0+128)
  6483  1C67  0AB7               	incf	___llmod@counter^(0+128),f
  6484  1C68                     l3314:
  6485  1C68  1BB1               	btfsc	(___llmod@divisor+3)^(0+128),7
  6486  1C69  2C78               	goto	l3316
  6487  1C6A  3001               	movlw	1
  6488  1C6B  00B6               	movwf	??___llmod^(0+128)
  6489  1C6C                     u5575:
  6490  1C6C  1003               	clrc
  6491  1C6D  0DAE               	rlf	___llmod@divisor^(0+128),f
  6492  1C6E  0DAF               	rlf	(___llmod@divisor+1)^(0+128),f
  6493  1C6F  0DB0               	rlf	(___llmod@divisor+2)^(0+128),f
  6494  1C70  0DB1               	rlf	(___llmod@divisor+3)^(0+128),f
  6495  1C71  0BB6               	decfsz	??___llmod^(0+128),f
  6496  1C72  2C6C               	goto	u5575
  6497  1C73  3001               	movlw	1
  6498  1C74  00B6               	movwf	??___llmod^(0+128)
  6499  1C75  0836               	movf	??___llmod^(0+128),w
  6500  1C76  07B7               	addwf	___llmod@counter^(0+128),f
  6501  1C77  2C68               	goto	l3314
  6502  1C78                     l3316:
  6503  1C78  0831               	movf	(___llmod@divisor+3)^(0+128),w
  6504  1C79  0235               	subwf	(___llmod@dividend+3)^(0+128),w
  6505  1C7A  1D03               	skipz
  6506  1C7B  2C86               	goto	u5595
  6507  1C7C  0830               	movf	(___llmod@divisor+2)^(0+128),w
  6508  1C7D  0234               	subwf	(___llmod@dividend+2)^(0+128),w
  6509  1C7E  1D03               	skipz
  6510  1C7F  2C86               	goto	u5595
  6511  1C80  082F               	movf	(___llmod@divisor+1)^(0+128),w
  6512  1C81  0233               	subwf	(___llmod@dividend+1)^(0+128),w
  6513  1C82  1D03               	skipz
  6514  1C83  2C86               	goto	u5595
  6515  1C84  082E               	movf	___llmod@divisor^(0+128),w
  6516  1C85  0232               	subwf	___llmod@dividend^(0+128),w
  6517  1C86                     u5595:
  6518  1C86  1C03               	skipc
  6519  1C87  2C96               	goto	l3320
  6520  1C88  082E               	movf	___llmod@divisor^(0+128),w
  6521  1C89  02B2               	subwf	___llmod@dividend^(0+128),f
  6522  1C8A  082F               	movf	(___llmod@divisor+1)^(0+128),w
  6523  1C8B  1C03               	skipc
  6524  1C8C  0F2F               	incfsz	(___llmod@divisor+1)^(0+128),w
  6525  1C8D  02B3               	subwf	(___llmod@dividend+1)^(0+128),f
  6526  1C8E  0830               	movf	(___llmod@divisor+2)^(0+128),w
  6527  1C8F  1C03               	skipc
  6528  1C90  0F30               	incfsz	(___llmod@divisor+2)^(0+128),w
  6529  1C91  02B4               	subwf	(___llmod@dividend+2)^(0+128),f
  6530  1C92  0831               	movf	(___llmod@divisor+3)^(0+128),w
  6531  1C93  1C03               	skipc
  6532  1C94  0F31               	incfsz	(___llmod@divisor+3)^(0+128),w
  6533  1C95  02B5               	subwf	(___llmod@dividend+3)^(0+128),f
  6534  1C96                     l3320:
  6535  1C96  3001               	movlw	1
  6536  1C97                     u5605:
  6537  1C97  1003               	clrc
  6538  1C98  0CB1               	rrf	(___llmod@divisor+3)^(0+128),f
  6539  1C99  0CB0               	rrf	(___llmod@divisor+2)^(0+128),f
  6540  1C9A  0CAF               	rrf	(___llmod@divisor+1)^(0+128),f
  6541  1C9B  0CAE               	rrf	___llmod@divisor^(0+128),f
  6542  1C9C  3EFF               	addlw	-1
  6543  1C9D  1D03               	skipz
  6544  1C9E  2C97               	goto	u5605
  6545  1C9F  3001               	movlw	1
  6546  1CA0  02B7               	subwf	___llmod@counter^(0+128),f
  6547  1CA1  1D03               	btfss	3,2
  6548  1CA2  2C78               	goto	l3316
  6549  1CA3                     l3324:
  6550  1CA3  0835               	movf	(___llmod@dividend+3)^(0+128),w
  6551  1CA4  00B1               	movwf	(?___llmod+3)^(0+128)
  6552  1CA5  0834               	movf	(___llmod@dividend+2)^(0+128),w
  6553  1CA6  00B0               	movwf	(?___llmod+2)^(0+128)
  6554  1CA7  0833               	movf	(___llmod@dividend+1)^(0+128),w
  6555  1CA8  00AF               	movwf	(?___llmod+1)^(0+128)
  6556  1CA9  0832               	movf	___llmod@dividend^(0+128),w
  6557  1CAA  00AE               	movwf	?___llmod^(0+128)
  6558  1CAB  0008               	return
  6559  1CAC                     __end_of___llmod:
  6560                           
  6561                           	psect	text16
  6562  1D5E                     __ptext16:	
  6563 ;; *************** function ___lldiv *****************
  6564 ;; Defined at:
  6565 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  divisor         4    0[BANK1 ] unsigned long 
  6568 ;;  dividend        4    4[BANK1 ] unsigned long 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  quotient        4    9[BANK1 ] unsigned long 
  6571 ;;  counter         1   13[BANK1 ] unsigned char 
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  4    0[BANK1 ] unsigned long 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2, status,0
  6576 ;; Tracked objects:
  6577 ;;		On entry : 300/900
  6578 ;;		On exit  : 300/100
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6581 ;;      Params:         0       0       8       0       0
  6582 ;;      Locals:         0       0       5       0       0
  6583 ;;      Temps:          0       0       1       0       0
  6584 ;;      Totals:         0       0      14       0       0
  6585 ;;Total ram usage:       14 bytes
  6586 ;; Hardware stack levels used: 1
  6587 ;; Hardware stack levels required when called: 4
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_sprintf
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595  1D5E                     ___lldiv:	
  6596                           ;psect for function ___lldiv
  6597                           
  6598                           
  6599                           ;incstack = 0
  6600                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6601  1D5E  3000               	movlw	0
  6602  1D5F  00AC               	movwf	(___lldiv@quotient+3)^(0+128)
  6603  1D60  3000               	movlw	0
  6604  1D61  00AB               	movwf	(___lldiv@quotient+2)^(0+128)
  6605  1D62  3000               	movlw	0
  6606  1D63  00AA               	movwf	(___lldiv@quotient+1)^(0+128)
  6607  1D64  3000               	movlw	0
  6608  1D65  00A9               	movwf	___lldiv@quotient^(0+128)
  6609  1D66  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  6610  1D67  0422               	iorwf	(___lldiv@divisor+2)^(0+128),w
  6611  1D68  0421               	iorwf	(___lldiv@divisor+1)^(0+128),w
  6612  1D69  0420               	iorwf	___lldiv@divisor^(0+128),w
  6613  1D6A  1903               	skipnz
  6614  1D6B  2DB3               	goto	l4786
  6615  1D6C  01AD               	clrf	___lldiv@counter^(0+128)
  6616  1D6D  0AAD               	incf	___lldiv@counter^(0+128),f
  6617  1D6E                     l4772:
  6618  1D6E  1BA3               	btfsc	(___lldiv@divisor+3)^(0+128),7
  6619  1D6F  2D7E               	goto	l4774
  6620  1D70  3001               	movlw	1
  6621  1D71  00A8               	movwf	??___lldiv^(0+128)
  6622  1D72                     u8725:
  6623  1D72  1003               	clrc
  6624  1D73  0DA0               	rlf	___lldiv@divisor^(0+128),f
  6625  1D74  0DA1               	rlf	(___lldiv@divisor+1)^(0+128),f
  6626  1D75  0DA2               	rlf	(___lldiv@divisor+2)^(0+128),f
  6627  1D76  0DA3               	rlf	(___lldiv@divisor+3)^(0+128),f
  6628  1D77  0BA8               	decfsz	??___lldiv^(0+128),f
  6629  1D78  2D72               	goto	u8725
  6630  1D79  3001               	movlw	1
  6631  1D7A  00A8               	movwf	??___lldiv^(0+128)
  6632  1D7B  0828               	movf	??___lldiv^(0+128),w
  6633  1D7C  07AD               	addwf	___lldiv@counter^(0+128),f
  6634  1D7D  2D6E               	goto	l4772
  6635  1D7E                     l4774:
  6636  1D7E  3001               	movlw	1
  6637  1D7F  00A8               	movwf	??___lldiv^(0+128)
  6638  1D80                     u8745:
  6639  1D80  1003               	clrc
  6640  1D81  0DA9               	rlf	___lldiv@quotient^(0+128),f
  6641  1D82  0DAA               	rlf	(___lldiv@quotient+1)^(0+128),f
  6642  1D83  0DAB               	rlf	(___lldiv@quotient+2)^(0+128),f
  6643  1D84  0DAC               	rlf	(___lldiv@quotient+3)^(0+128),f
  6644  1D85  0BA8               	decfsz	??___lldiv^(0+128),f
  6645  1D86  2D80               	goto	u8745
  6646  1D87  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  6647  1D88  0227               	subwf	(___lldiv@dividend+3)^(0+128),w
  6648  1D89  1D03               	skipz
  6649  1D8A  2D95               	goto	u8755
  6650  1D8B  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  6651  1D8C  0226               	subwf	(___lldiv@dividend+2)^(0+128),w
  6652  1D8D  1D03               	skipz
  6653  1D8E  2D95               	goto	u8755
  6654  1D8F  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  6655  1D90  0225               	subwf	(___lldiv@dividend+1)^(0+128),w
  6656  1D91  1D03               	skipz
  6657  1D92  2D95               	goto	u8755
  6658  1D93  0820               	movf	___lldiv@divisor^(0+128),w
  6659  1D94  0224               	subwf	___lldiv@dividend^(0+128),w
  6660  1D95                     u8755:
  6661  1D95  1C03               	skipc
  6662  1D96  2DA6               	goto	l4782
  6663  1D97  0820               	movf	___lldiv@divisor^(0+128),w
  6664  1D98  02A4               	subwf	___lldiv@dividend^(0+128),f
  6665  1D99  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  6666  1D9A  1C03               	skipc
  6667  1D9B  0F21               	incfsz	(___lldiv@divisor+1)^(0+128),w
  6668  1D9C  02A5               	subwf	(___lldiv@dividend+1)^(0+128),f
  6669  1D9D  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  6670  1D9E  1C03               	skipc
  6671  1D9F  0F22               	incfsz	(___lldiv@divisor+2)^(0+128),w
  6672  1DA0  02A6               	subwf	(___lldiv@dividend+2)^(0+128),f
  6673  1DA1  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  6674  1DA2  1C03               	skipc
  6675  1DA3  0F23               	incfsz	(___lldiv@divisor+3)^(0+128),w
  6676  1DA4  02A7               	subwf	(___lldiv@dividend+3)^(0+128),f
  6677  1DA5  1429               	bsf	___lldiv@quotient^(0+128),0
  6678  1DA6                     l4782:
  6679  1DA6  3001               	movlw	1
  6680  1DA7                     u8765:
  6681  1DA7  1003               	clrc
  6682  1DA8  0CA3               	rrf	(___lldiv@divisor+3)^(0+128),f
  6683  1DA9  0CA2               	rrf	(___lldiv@divisor+2)^(0+128),f
  6684  1DAA  0CA1               	rrf	(___lldiv@divisor+1)^(0+128),f
  6685  1DAB  0CA0               	rrf	___lldiv@divisor^(0+128),f
  6686  1DAC  3EFF               	addlw	-1
  6687  1DAD  1D03               	skipz
  6688  1DAE  2DA7               	goto	u8765
  6689  1DAF  3001               	movlw	1
  6690  1DB0  02AD               	subwf	___lldiv@counter^(0+128),f
  6691  1DB1  1D03               	btfss	3,2
  6692  1DB2  2D7E               	goto	l4774
  6693  1DB3                     l4786:
  6694  1DB3  082C               	movf	(___lldiv@quotient+3)^(0+128),w
  6695  1DB4  00A3               	movwf	(?___lldiv+3)^(0+128)
  6696  1DB5  082B               	movf	(___lldiv@quotient+2)^(0+128),w
  6697  1DB6  00A2               	movwf	(?___lldiv+2)^(0+128)
  6698  1DB7  082A               	movf	(___lldiv@quotient+1)^(0+128),w
  6699  1DB8  00A1               	movwf	(?___lldiv+1)^(0+128)
  6700  1DB9  0829               	movf	___lldiv@quotient^(0+128),w
  6701  1DBA  00A0               	movwf	?___lldiv^(0+128)
  6702  1DBB  0008               	return
  6703  1DBC                     __end_of___lldiv:
  6704                           
  6705                           	psect	text17
  6706  1DBC                     __ptext17:	
  6707 ;; *************** function ___fltol *****************
  6708 ;; Defined at:
  6709 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fltol.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  f1              4   61[BANK1 ] unsigned long 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  exp1            1   71[BANK1 ] unsigned char 
  6714 ;;  sign1           1   70[BANK1 ] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  4   61[BANK1 ] long 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0
  6719 ;; Tracked objects:
  6720 ;;		On entry : 300/900
  6721 ;;		On exit  : 300/100
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6724 ;;      Params:         0       0       4       0       0
  6725 ;;      Locals:         0       0       2       0       0
  6726 ;;      Temps:          0       0       5       0       0
  6727 ;;      Totals:         0       0      11       0       0
  6728 ;;Total ram usage:       11 bytes
  6729 ;; Hardware stack levels used: 1
  6730 ;; Hardware stack levels required when called: 4
  6731 ;; This function calls:
  6732 ;;		Nothing
  6733 ;; This function is called by:
  6734 ;;		_sprintf
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738  1DBC                     ___fltol:	
  6739                           ;psect for function ___fltol
  6740                           
  6741                           
  6742                           ;incstack = 0
  6743                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6744  1DBC  1003               	clrc
  6745  1DBD  0D5F               	rlf	(___fltol@f1+2)^(0+128),w
  6746  1DBE  0D60               	rlf	(___fltol@f1+3)^(0+128),w
  6747  1DBF  00E1               	movwf	??___fltol^(0+128)
  6748  1DC0  0861               	movf	??___fltol^(0+128),w
  6749  1DC1  00E7               	movwf	___fltol@exp1^(0+128)
  6750  1DC2  0867               	movf	___fltol@exp1^(0+128),w
  6751  1DC3  1D03               	btfss	3,2
  6752  1DC4  2DCE               	goto	l3278
  6753  1DC5                     l3274:
  6754  1DC5  3000               	movlw	0
  6755  1DC6  00E0               	movwf	(?___fltol+3)^(0+128)
  6756  1DC7  3000               	movlw	0
  6757  1DC8  00DF               	movwf	(?___fltol+2)^(0+128)
  6758  1DC9  3000               	movlw	0
  6759  1DCA  00DE               	movwf	(?___fltol+1)^(0+128)
  6760  1DCB  3000               	movlw	0
  6761  1DCC  00DD               	movwf	?___fltol^(0+128)
  6762  1DCD  0008               	return
  6763  1DCE                     l3278:
  6764  1DCE  085D               	movf	___fltol@f1^(0+128),w
  6765  1DCF  00E1               	movwf	??___fltol^(0+128)
  6766  1DD0  085E               	movf	(___fltol@f1+1)^(0+128),w
  6767  1DD1  00E2               	movwf	(??___fltol^(0+128)+1)
  6768  1DD2  085F               	movf	(___fltol@f1+2)^(0+128),w
  6769  1DD3  00E3               	movwf	(??___fltol^(0+128)+2)
  6770  1DD4  0860               	movf	(___fltol@f1+3)^(0+128),w
  6771  1DD5  00E4               	movwf	(??___fltol^(0+128)+3)
  6772  1DD6  301F               	movlw	31
  6773  1DD7                     u5475:
  6774  1DD7  1003               	clrc
  6775  1DD8  0CE4               	rrf	(??___fltol^(0+128)+3),f
  6776  1DD9  0CE3               	rrf	(??___fltol^(0+128)+2),f
  6777  1DDA  0CE2               	rrf	(??___fltol^(0+128)+1),f
  6778  1DDB  0CE1               	rrf	??___fltol^(0+128),f
  6779  1DDC  3EFF               	addlw	-1
  6780  1DDD  1D03               	skipz
  6781  1DDE  2DD7               	goto	u5475
  6782  1DDF  0861               	movf	??___fltol^(0+128),w
  6783  1DE0  00E5               	movwf	(??___fltol+4)^(0+128)
  6784  1DE1  0865               	movf	(??___fltol+4)^(0+128),w
  6785  1DE2  00E6               	movwf	___fltol@sign1^(0+128)
  6786  1DE3  17DF               	bsf	(___fltol@f1^(0+128)+2),7
  6787  1DE4  30FF               	movlw	255
  6788  1DE5  05DD               	andwf	___fltol@f1^(0+128),f
  6789  1DE6  30FF               	movlw	255
  6790  1DE7  05DE               	andwf	(___fltol@f1+1)^(0+128),f
  6791  1DE8  30FF               	movlw	255
  6792  1DE9  05DF               	andwf	(___fltol@f1+2)^(0+128),f
  6793  1DEA  3000               	movlw	0
  6794  1DEB  05E0               	andwf	(___fltol@f1+3)^(0+128),f
  6795  1DEC  3096               	movlw	150
  6796  1DED  02E7               	subwf	___fltol@exp1^(0+128),f
  6797  1DEE  1FE7               	btfss	___fltol@exp1^(0+128),7
  6798  1DEF  2E05               	goto	l3296
  6799  1DF0  0867               	movf	___fltol@exp1^(0+128),w
  6800  1DF1  3A80               	xorlw	128
  6801  1DF2  3E97               	addlw	151
  6802  1DF3  1C03               	btfss	3,0
  6803  1DF4  2DC5               	goto	l3274
  6804  1DF5                     l3294:
  6805  1DF5  3001               	movlw	1
  6806  1DF6                     u5505:
  6807  1DF6  1003               	clrc
  6808  1DF7  0CE0               	rrf	(___fltol@f1+3)^(0+128),f
  6809  1DF8  0CDF               	rrf	(___fltol@f1+2)^(0+128),f
  6810  1DF9  0CDE               	rrf	(___fltol@f1+1)^(0+128),f
  6811  1DFA  0CDD               	rrf	___fltol@f1^(0+128),f
  6812  1DFB  3EFF               	addlw	-1
  6813  1DFC  1D03               	skipz
  6814  1DFD  2DF6               	goto	u5505
  6815  1DFE  3001               	movlw	1
  6816  1DFF  00E1               	movwf	??___fltol^(0+128)
  6817  1E00  0861               	movf	??___fltol^(0+128),w
  6818  1E01  07E7               	addwf	___fltol@exp1^(0+128),f
  6819  1E02  1903               	btfsc	3,2
  6820  1E03  2E18               	goto	l3304
  6821  1E04  2DF5               	goto	l3294
  6822  1E05                     l3296:
  6823  1E05  3020               	movlw	32
  6824  1E06  0267               	subwf	___fltol@exp1^(0+128),w
  6825  1E07  1803               	btfsc	3,0
  6826  1E08  2DC5               	goto	l3274
  6827  1E09                     l553:
  6828  1E09  0867               	movf	___fltol@exp1^(0+128),w
  6829  1E0A  1903               	btfsc	3,2
  6830  1E0B  2E18               	goto	l3304
  6831  1E0C  3001               	movlw	1
  6832  1E0D  00E1               	movwf	??___fltol^(0+128)
  6833  1E0E                     u5535:
  6834  1E0E  1003               	clrc
  6835  1E0F  0DDD               	rlf	___fltol@f1^(0+128),f
  6836  1E10  0DDE               	rlf	(___fltol@f1+1)^(0+128),f
  6837  1E11  0DDF               	rlf	(___fltol@f1+2)^(0+128),f
  6838  1E12  0DE0               	rlf	(___fltol@f1+3)^(0+128),f
  6839  1E13  0BE1               	decfsz	??___fltol^(0+128),f
  6840  1E14  2E0E               	goto	u5535
  6841  1E15  3001               	movlw	1
  6842  1E16  02E7               	subwf	___fltol@exp1^(0+128),f
  6843  1E17  2E09               	goto	l553
  6844  1E18                     l3304:
  6845  1E18  0866               	movf	___fltol@sign1^(0+128),w
  6846  1E19  1903               	btfsc	3,2
  6847  1E1A  0008               	return
  6848  1E1B  09DD               	comf	___fltol@f1^(0+128),f
  6849  1E1C  09DE               	comf	(___fltol@f1+1)^(0+128),f
  6850  1E1D  09DF               	comf	(___fltol@f1+2)^(0+128),f
  6851  1E1E  09E0               	comf	(___fltol@f1+3)^(0+128),f
  6852  1E1F  0ADD               	incf	___fltol@f1^(0+128),f
  6853  1E20  1903               	skipnz
  6854  1E21  0ADE               	incf	(___fltol@f1+1)^(0+128),f
  6855  1E22  1903               	skipnz
  6856  1E23  0ADF               	incf	(___fltol@f1+2)^(0+128),f
  6857  1E24  1903               	skipnz
  6858  1E25  0AE0               	incf	(___fltol@f1+3)^(0+128),f
  6859  1E26  0008               	return
  6860  1E27                     __end_of___fltol:
  6861                           
  6862                           	psect	text18
  6863  1AE8                     __ptext18:	
  6864 ;; *************** function ___flsub *****************
  6865 ;; Defined at:
  6866 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\sprcadd.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  a               4    4[BANK3 ] long 
  6869 ;;  b               4    8[BANK3 ] long 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  4    4[BANK3 ] long 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 300/B00
  6878 ;;		On exit  : 300/300
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6881 ;;      Params:         0       0       0       8       0
  6882 ;;      Locals:         0       0       0       0       0
  6883 ;;      Temps:          0       0       0       0       0
  6884 ;;      Totals:         0       0       0       8       0
  6885 ;;Total ram usage:        8 bytes
  6886 ;; Hardware stack levels used: 1
  6887 ;; Hardware stack levels required when called: 5
  6888 ;; This function calls:
  6889 ;;		___fladd
  6890 ;; This function is called by:
  6891 ;;		_sprintf
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895  1AE8                     ___flsub:	
  6896                           ;psect for function ___flsub
  6897                           
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in ___flsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6901  1AE8  3080               	movlw	128
  6902  1AE9  0697               	xorwf	(___flsub@a+3)^(0+384),f
  6903  1AEA  081B               	movf	(___flsub@b+3)^(0+384),w
  6904  1AEB  1303               	bcf	3,6	;RP1=0, select bank1
  6905  1AEC  00E1               	movwf	(___fladd@b+3)^(0+128)
  6906  1AED  1703               	bsf	3,6	;RP1=1, select bank3
  6907  1AEE  081A               	movf	(___flsub@b+2)^(0+384),w
  6908  1AEF  1303               	bcf	3,6	;RP1=0, select bank1
  6909  1AF0  00E0               	movwf	(___fladd@b+2)^(0+128)
  6910  1AF1  1703               	bsf	3,6	;RP1=1, select bank3
  6911  1AF2  0819               	movf	(___flsub@b+1)^(0+384),w
  6912  1AF3  1303               	bcf	3,6	;RP1=0, select bank1
  6913  1AF4  00DF               	movwf	(___fladd@b+1)^(0+128)
  6914  1AF5  1703               	bsf	3,6	;RP1=1, select bank3
  6915  1AF6  0818               	movf	___flsub@b^(0+384),w
  6916  1AF7  1303               	bcf	3,6	;RP1=0, select bank1
  6917  1AF8  00DE               	movwf	___fladd@b^(0+128)
  6918  1AF9  1703               	bsf	3,6	;RP1=1, select bank3
  6919  1AFA  0817               	movf	(___flsub@a+3)^(0+384),w
  6920  1AFB  1303               	bcf	3,6	;RP1=0, select bank1
  6921  1AFC  00E5               	movwf	(___fladd@a+3)^(0+128)
  6922  1AFD  1703               	bsf	3,6	;RP1=1, select bank3
  6923  1AFE  0816               	movf	(___flsub@a+2)^(0+384),w
  6924  1AFF  1303               	bcf	3,6	;RP1=0, select bank1
  6925  1B00  00E4               	movwf	(___fladd@a+2)^(0+128)
  6926  1B01  1703               	bsf	3,6	;RP1=1, select bank3
  6927  1B02  0815               	movf	(___flsub@a+1)^(0+384),w
  6928  1B03  1303               	bcf	3,6	;RP1=0, select bank1
  6929  1B04  00E3               	movwf	(___fladd@a+1)^(0+128)
  6930  1B05  1703               	bsf	3,6	;RP1=1, select bank3
  6931  1B06  0814               	movf	___flsub@a^(0+384),w
  6932  1B07  1303               	bcf	3,6	;RP1=0, select bank1
  6933  1B08  00E2               	movwf	___fladd@a^(0+128)
  6934  1B09  160A  118A  227A   	fcall	___fladd
  6935  1B0C  1303               	bcf	3,6	;RP1=0, select bank1
  6936  1B0D  0861               	movf	(?___fladd+3)^(0+128),w
  6937  1B0E  1703               	bsf	3,6	;RP1=1, select bank3
  6938  1B0F  0097               	movwf	(?___flsub+3)^(0+384)
  6939  1B10  1303               	bcf	3,6	;RP1=0, select bank1
  6940  1B11  0860               	movf	(?___fladd+2)^(0+128),w
  6941  1B12  1703               	bsf	3,6	;RP1=1, select bank3
  6942  1B13  0096               	movwf	(?___flsub+2)^(0+384)
  6943  1B14  1303               	bcf	3,6	;RP1=0, select bank1
  6944  1B15  085F               	movf	(?___fladd+1)^(0+128),w
  6945  1B16  1703               	bsf	3,6	;RP1=1, select bank3
  6946  1B17  0095               	movwf	(?___flsub+1)^(0+384)
  6947  1B18  1303               	bcf	3,6	;RP1=0, select bank1
  6948  1B19  085E               	movf	?___fladd^(0+128),w
  6949  1B1A  1703               	bsf	3,6	;RP1=1, select bank3
  6950  1B1B  0094               	movwf	?___flsub^(0+384)
  6951  1B1C  0008               	return
  6952  1B1D                     __end_of___flsub:
  6953                           
  6954                           	psect	text19
  6955  127A                     __ptext19:	
  6956 ;; *************** function ___fladd *****************
  6957 ;; Defined at:
  6958 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\sprcadd.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  b               4   62[BANK1 ] long 
  6961 ;;  a               4   66[BANK1 ] long 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;  grs             1    3[BANK3 ] unsigned char 
  6964 ;;  bexp            1    2[BANK3 ] unsigned char 
  6965 ;;  aexp            1    1[BANK3 ] unsigned char 
  6966 ;;  signs           1    0[BANK3 ] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  4   62[BANK1 ] unsigned char 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, btemp+1
  6971 ;; Tracked objects:
  6972 ;;		On entry : 300/900
  6973 ;;		On exit  : 100/100
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6976 ;;      Params:         0       0       8       0       0
  6977 ;;      Locals:         0       0       0       4       0
  6978 ;;      Temps:          0       0       8       0       0
  6979 ;;      Totals:         0       0      16       4       0
  6980 ;;Total ram usage:       20 bytes
  6981 ;; Hardware stack levels used: 1
  6982 ;; Hardware stack levels required when called: 4
  6983 ;; This function calls:
  6984 ;;		Nothing
  6985 ;; This function is called by:
  6986 ;;		_sprintf
  6987 ;;		___flsub
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991  127A                     ___fladd:	
  6992                           ;psect for function ___fladd
  6993                           
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  6997  127A  0861               	movf	(___fladd@b^(0+128)+3),w
  6998  127B  3980               	andlw	128
  6999  127C  00E6               	movwf	??___fladd^(0+128)
  7000  127D  0866               	movf	??___fladd^(0+128),w
  7001  127E  1703               	bsf	3,6	;RP1=1, select bank3
  7002  127F  0090               	movwf	___fladd@signs^(0+384)
  7003  1280  1303               	bcf	3,6	;RP1=0, select bank1
  7004  1281  0861               	movf	(___fladd@b^(0+128)+3),w
  7005  1282  00E6               	movwf	??___fladd^(0+128)
  7006  1283  0766               	addwf	??___fladd^(0+128),w
  7007  1284  00E7               	movwf	(??___fladd+1)^(0+128)
  7008  1285  0867               	movf	(??___fladd+1)^(0+128),w
  7009  1286  1703               	bsf	3,6	;RP1=1, select bank3
  7010  1287  0092               	movwf	___fladd@bexp^(0+384)
  7011  1288  1303               	bcf	3,6	;RP1=0, select bank1
  7012  1289  1FE0               	btfss	(___fladd@b^(0+128)+2),7
  7013  128A  2A8D               	goto	l4230
  7014  128B  1703               	bsf	3,6	;RP1=1, select bank3
  7015  128C  1412               	bsf	___fladd@bexp^(0+384),0
  7016  128D                     l4230:
  7017  128D  1703               	bsf	3,6	;RP1=1, select bank3
  7018  128E  0812               	movf	___fladd@bexp^(0+384),w
  7019  128F  1903               	btfsc	3,2
  7020  1290  2AA1               	goto	l4240
  7021  1291  0A12               	incf	___fladd@bexp^(0+384),w
  7022  1292  1D03               	btfss	3,2
  7023  1293  2A9D               	goto	l4236
  7024  1294  3000               	movlw	0
  7025  1295  1303               	bcf	3,6	;RP1=0, select bank1
  7026  1296  00E1               	movwf	(___fladd@b+3)^(0+128)
  7027  1297  3000               	movlw	0
  7028  1298  00E0               	movwf	(___fladd@b+2)^(0+128)
  7029  1299  3000               	movlw	0
  7030  129A  00DF               	movwf	(___fladd@b+1)^(0+128)
  7031  129B  3000               	movlw	0
  7032  129C  00DE               	movwf	___fladd@b^(0+128)
  7033  129D                     l4236:
  7034  129D  1303               	bcf	3,6	;RP1=0, select bank1
  7035  129E  17E0               	bsf	(___fladd@b^(0+128)+2),7
  7036  129F  01E1               	clrf	(___fladd@b^(0+128)+3)
  7037  12A0  2AAA               	goto	l4242
  7038  12A1                     l4240:
  7039  12A1  3000               	movlw	0
  7040  12A2  1303               	bcf	3,6	;RP1=0, select bank1
  7041  12A3  00E1               	movwf	(___fladd@b+3)^(0+128)
  7042  12A4  3000               	movlw	0
  7043  12A5  00E0               	movwf	(___fladd@b+2)^(0+128)
  7044  12A6  3000               	movlw	0
  7045  12A7  00DF               	movwf	(___fladd@b+1)^(0+128)
  7046  12A8  3000               	movlw	0
  7047  12A9  00DE               	movwf	___fladd@b^(0+128)
  7048  12AA                     l4242:
  7049  12AA  0865               	movf	(___fladd@a^(0+128)+3),w
  7050  12AB  3980               	andlw	128
  7051  12AC  00E6               	movwf	??___fladd^(0+128)
  7052  12AD  0866               	movf	??___fladd^(0+128),w
  7053  12AE  1703               	bsf	3,6	;RP1=1, select bank3
  7054  12AF  0091               	movwf	___fladd@aexp^(0+384)
  7055  12B0  0811               	movf	___fladd@aexp^(0+384),w
  7056  12B1  0610               	xorwf	___fladd@signs^(0+384),w
  7057  12B2  1D03               	btfss	3,2
  7058  12B3  1710               	bsf	___fladd@signs^(0+384),6
  7059  12B4  1303               	bcf	3,6	;RP1=0, select bank1
  7060  12B5  0865               	movf	(___fladd@a^(0+128)+3),w
  7061  12B6  00E6               	movwf	??___fladd^(0+128)
  7062  12B7  0766               	addwf	??___fladd^(0+128),w
  7063  12B8  00E7               	movwf	(??___fladd+1)^(0+128)
  7064  12B9  0867               	movf	(??___fladd+1)^(0+128),w
  7065  12BA  1703               	bsf	3,6	;RP1=1, select bank3
  7066  12BB  0091               	movwf	___fladd@aexp^(0+384)
  7067  12BC  1303               	bcf	3,6	;RP1=0, select bank1
  7068  12BD  1FE4               	btfss	(___fladd@a^(0+128)+2),7
  7069  12BE  2AC1               	goto	l4254
  7070  12BF  1703               	bsf	3,6	;RP1=1, select bank3
  7071  12C0  1411               	bsf	___fladd@aexp^(0+384),0
  7072  12C1                     l4254:
  7073  12C1  1703               	bsf	3,6	;RP1=1, select bank3
  7074  12C2  0811               	movf	___fladd@aexp^(0+384),w
  7075  12C3  1903               	btfsc	3,2
  7076  12C4  2AD5               	goto	l4264
  7077  12C5  0A11               	incf	___fladd@aexp^(0+384),w
  7078  12C6  1D03               	btfss	3,2
  7079  12C7  2AD1               	goto	l4260
  7080  12C8  3000               	movlw	0
  7081  12C9  1303               	bcf	3,6	;RP1=0, select bank1
  7082  12CA  00E5               	movwf	(___fladd@a+3)^(0+128)
  7083  12CB  3000               	movlw	0
  7084  12CC  00E4               	movwf	(___fladd@a+2)^(0+128)
  7085  12CD  3000               	movlw	0
  7086  12CE  00E3               	movwf	(___fladd@a+1)^(0+128)
  7087  12CF  3000               	movlw	0
  7088  12D0  00E2               	movwf	___fladd@a^(0+128)
  7089  12D1                     l4260:
  7090  12D1  1303               	bcf	3,6	;RP1=0, select bank1
  7091  12D2  17E4               	bsf	(___fladd@a^(0+128)+2),7
  7092  12D3  01E5               	clrf	(___fladd@a^(0+128)+3)
  7093  12D4  2ADE               	goto	l670
  7094  12D5                     l4264:
  7095  12D5  3000               	movlw	0
  7096  12D6  1303               	bcf	3,6	;RP1=0, select bank1
  7097  12D7  00E5               	movwf	(___fladd@a+3)^(0+128)
  7098  12D8  3000               	movlw	0
  7099  12D9  00E4               	movwf	(___fladd@a+2)^(0+128)
  7100  12DA  3000               	movlw	0
  7101  12DB  00E3               	movwf	(___fladd@a+1)^(0+128)
  7102  12DC  3000               	movlw	0
  7103  12DD  00E2               	movwf	___fladd@a^(0+128)
  7104  12DE                     l670:
  7105  12DE  1703               	bsf	3,6	;RP1=1, select bank3
  7106  12DF  0812               	movf	___fladd@bexp^(0+384),w
  7107  12E0  0211               	subwf	___fladd@aexp^(0+384),w
  7108  12E1  1803               	skipnc
  7109  12E2  2B3E               	goto	l4300
  7110  12E3  1F10               	btfss	___fladd@signs^(0+384),6
  7111  12E4  2AEB               	goto	l4270
  7112  12E5  3080               	movlw	128
  7113  12E6  1303               	bcf	3,6	;RP1=0, select bank1
  7114  12E7  00E6               	movwf	??___fladd^(0+128)
  7115  12E8  0866               	movf	??___fladd^(0+128),w
  7116  12E9  1703               	bsf	3,6	;RP1=1, select bank3
  7117  12EA  0690               	xorwf	___fladd@signs^(0+384),f
  7118  12EB                     l4270:
  7119  12EB  0812               	movf	___fladd@bexp^(0+384),w
  7120  12EC  1303               	bcf	3,6	;RP1=0, select bank1
  7121  12ED  00E6               	movwf	??___fladd^(0+128)
  7122  12EE  0866               	movf	??___fladd^(0+128),w
  7123  12EF  1703               	bsf	3,6	;RP1=1, select bank3
  7124  12F0  0093               	movwf	___fladd@grs^(0+384)
  7125  12F1  0811               	movf	___fladd@aexp^(0+384),w
  7126  12F2  1303               	bcf	3,6	;RP1=0, select bank1
  7127  12F3  00E6               	movwf	??___fladd^(0+128)
  7128  12F4  0866               	movf	??___fladd^(0+128),w
  7129  12F5  1703               	bsf	3,6	;RP1=1, select bank3
  7130  12F6  0092               	movwf	___fladd@bexp^(0+384)
  7131  12F7  0813               	movf	___fladd@grs^(0+384),w
  7132  12F8  1303               	bcf	3,6	;RP1=0, select bank1
  7133  12F9  00E6               	movwf	??___fladd^(0+128)
  7134  12FA  0866               	movf	??___fladd^(0+128),w
  7135  12FB  1703               	bsf	3,6	;RP1=1, select bank3
  7136  12FC  0091               	movwf	___fladd@aexp^(0+384)
  7137  12FD  1303               	bcf	3,6	;RP1=0, select bank1
  7138  12FE  085E               	movf	___fladd@b^(0+128),w
  7139  12FF  00E6               	movwf	??___fladd^(0+128)
  7140  1300  0866               	movf	??___fladd^(0+128),w
  7141  1301  1703               	bsf	3,6	;RP1=1, select bank3
  7142  1302  0093               	movwf	___fladd@grs^(0+384)
  7143  1303  1303               	bcf	3,6	;RP1=0, select bank1
  7144  1304  0862               	movf	___fladd@a^(0+128),w
  7145  1305  00E6               	movwf	??___fladd^(0+128)
  7146  1306  0866               	movf	??___fladd^(0+128),w
  7147  1307  00DE               	movwf	___fladd@b^(0+128)
  7148  1308  1703               	bsf	3,6	;RP1=1, select bank3
  7149  1309  0813               	movf	___fladd@grs^(0+384),w
  7150  130A  1303               	bcf	3,6	;RP1=0, select bank1
  7151  130B  00E6               	movwf	??___fladd^(0+128)
  7152  130C  0866               	movf	??___fladd^(0+128),w
  7153  130D  00E2               	movwf	___fladd@a^(0+128)
  7154  130E  085F               	movf	(___fladd@b^(0+128)+1),w
  7155  130F  00E6               	movwf	??___fladd^(0+128)
  7156  1310  0866               	movf	??___fladd^(0+128),w
  7157  1311  1703               	bsf	3,6	;RP1=1, select bank3
  7158  1312  0093               	movwf	___fladd@grs^(0+384)
  7159  1313  1303               	bcf	3,6	;RP1=0, select bank1
  7160  1314  0863               	movf	(___fladd@a^(0+128)+1),w
  7161  1315  00E6               	movwf	??___fladd^(0+128)
  7162  1316  0866               	movf	??___fladd^(0+128),w
  7163  1317  00DF               	movwf	(___fladd@b^(0+128)+1)
  7164  1318  1703               	bsf	3,6	;RP1=1, select bank3
  7165  1319  0813               	movf	___fladd@grs^(0+384),w
  7166  131A  1303               	bcf	3,6	;RP1=0, select bank1
  7167  131B  00E6               	movwf	??___fladd^(0+128)
  7168  131C  0866               	movf	??___fladd^(0+128),w
  7169  131D  00E3               	movwf	(___fladd@a^(0+128)+1)
  7170  131E  0860               	movf	(___fladd@b^(0+128)+2),w
  7171  131F  00E6               	movwf	??___fladd^(0+128)
  7172  1320  0866               	movf	??___fladd^(0+128),w
  7173  1321  1703               	bsf	3,6	;RP1=1, select bank3
  7174  1322  0093               	movwf	___fladd@grs^(0+384)
  7175  1323  1303               	bcf	3,6	;RP1=0, select bank1
  7176  1324  0864               	movf	(___fladd@a^(0+128)+2),w
  7177  1325  00E6               	movwf	??___fladd^(0+128)
  7178  1326  0866               	movf	??___fladd^(0+128),w
  7179  1327  00E0               	movwf	(___fladd@b^(0+128)+2)
  7180  1328  1703               	bsf	3,6	;RP1=1, select bank3
  7181  1329  0813               	movf	___fladd@grs^(0+384),w
  7182  132A  1303               	bcf	3,6	;RP1=0, select bank1
  7183  132B  00E6               	movwf	??___fladd^(0+128)
  7184  132C  0866               	movf	??___fladd^(0+128),w
  7185  132D  00E4               	movwf	(___fladd@a^(0+128)+2)
  7186  132E  0861               	movf	(___fladd@b^(0+128)+3),w
  7187  132F  00E6               	movwf	??___fladd^(0+128)
  7188  1330  0866               	movf	??___fladd^(0+128),w
  7189  1331  1703               	bsf	3,6	;RP1=1, select bank3
  7190  1332  0093               	movwf	___fladd@grs^(0+384)
  7191  1333  1303               	bcf	3,6	;RP1=0, select bank1
  7192  1334  0865               	movf	(___fladd@a^(0+128)+3),w
  7193  1335  00E6               	movwf	??___fladd^(0+128)
  7194  1336  0866               	movf	??___fladd^(0+128),w
  7195  1337  00E1               	movwf	(___fladd@b^(0+128)+3)
  7196  1338  1703               	bsf	3,6	;RP1=1, select bank3
  7197  1339  0813               	movf	___fladd@grs^(0+384),w
  7198  133A  1303               	bcf	3,6	;RP1=0, select bank1
  7199  133B  00E6               	movwf	??___fladd^(0+128)
  7200  133C  0866               	movf	??___fladd^(0+128),w
  7201  133D  00E5               	movwf	(___fladd@a^(0+128)+3)
  7202  133E                     l4300:
  7203  133E  1703               	bsf	3,6	;RP1=1, select bank3
  7204  133F  0193               	clrf	___fladd@grs^(0+384)
  7205  1340  0811               	movf	___fladd@aexp^(0+384),w
  7206  1341  1303               	bcf	3,6	;RP1=0, select bank1
  7207  1342  00E6               	movwf	??___fladd^(0+128)
  7208  1343  01E7               	clrf	(??___fladd^(0+128)+1)
  7209  1344  0867               	movf	(??___fladd+1)^(0+128),w
  7210  1345  00E9               	movwf	((??___fladd+2)^(0+128)+1)
  7211  1346  1703               	bsf	3,6	;RP1=1, select bank3
  7212  1347  0812               	movf	___fladd@bexp^(0+384),w
  7213  1348  1303               	bcf	3,6	;RP1=0, select bank1
  7214  1349  0266               	subwf	??___fladd^(0+128),w
  7215  134A  00E8               	movwf	(??___fladd+2)^(0+128)
  7216  134B  1C03               	skipc
  7217  134C  03E9               	decf	((??___fladd+2)^(0+128)+1),f
  7218  134D  0869               	movf	(??___fladd+3)^(0+128),w
  7219  134E  3A80               	xorlw	128
  7220  134F  00FF               	movwf	127
  7221  1350  3080               	movlw	128
  7222  1351  027F               	subwf	127,w
  7223  1352  1D03               	skipz
  7224  1353  2B56               	goto	u7405
  7225  1354  301A               	movlw	26
  7226  1355  0268               	subwf	(??___fladd+2)^(0+128),w
  7227  1356                     u7405:
  7228  1356  1C03               	skipc
  7229  1357  2B9B               	goto	l4318
  7230  1358  1683               	bsf	3,5	;RP0=1, select bank1
  7231  1359  1303               	bcf	3,6	;RP1=0, select bank1
  7232  135A  0861               	movf	(___fladd@b+3)^(0+128),w
  7233  135B  0460               	iorwf	(___fladd@b+2)^(0+128),w
  7234  135C  045F               	iorwf	(___fladd@b+1)^(0+128),w
  7235  135D  045E               	iorwf	___fladd@b^(0+128),w
  7236  135E  1903               	btfsc	3,2
  7237  135F  2B62               	goto	u7410
  7238  1360  3001               	movlw	1
  7239  1361  2B63               	goto	u7420
  7240  1362                     u7410:
  7241  1362  3000               	movlw	0
  7242  1363                     u7420:
  7243  1363  00E6               	movwf	??___fladd^(0+128)
  7244  1364  0866               	movf	??___fladd^(0+128),w
  7245  1365  1703               	bsf	3,6	;RP1=1, select bank3
  7246  1366  0093               	movwf	___fladd@grs^(0+384)
  7247  1367  3000               	movlw	0
  7248  1368  1303               	bcf	3,6	;RP1=0, select bank1
  7249  1369  00E1               	movwf	(___fladd@b+3)^(0+128)
  7250  136A  3000               	movlw	0
  7251  136B  00E0               	movwf	(___fladd@b+2)^(0+128)
  7252  136C  3000               	movlw	0
  7253  136D  00DF               	movwf	(___fladd@b+1)^(0+128)
  7254  136E  3000               	movlw	0
  7255  136F  00DE               	movwf	___fladd@b^(0+128)
  7256  1370  1703               	bsf	3,6	;RP1=1, select bank3
  7257  1371  0811               	movf	___fladd@aexp^(0+384),w
  7258  1372  1303               	bcf	3,6	;RP1=0, select bank1
  7259  1373  00E6               	movwf	??___fladd^(0+128)
  7260  1374  0866               	movf	??___fladd^(0+128),w
  7261  1375  1703               	bsf	3,6	;RP1=1, select bank3
  7262  1376  0092               	movwf	___fladd@bexp^(0+384)
  7263  1377  2BA1               	goto	l674
  7264  1378                     l676:
  7265  1378  1C13               	btfss	___fladd@grs^(0+384),0
  7266  1379  2B85               	goto	l4308
  7267  137A  0813               	movf	___fladd@grs^(0+384),w
  7268  137B  1303               	bcf	3,6	;RP1=0, select bank1
  7269  137C  00E6               	movwf	??___fladd^(0+128)
  7270  137D  1003               	clrc
  7271  137E  0C66               	rrf	??___fladd^(0+128),w
  7272  137F  3801               	iorlw	1
  7273  1380  00E7               	movwf	(??___fladd+1)^(0+128)
  7274  1381  0867               	movf	(??___fladd+1)^(0+128),w
  7275  1382  1703               	bsf	3,6	;RP1=1, select bank3
  7276  1383  0093               	movwf	___fladd@grs^(0+384)
  7277  1384  2B87               	goto	l4310
  7278  1385                     l4308:
  7279  1385  1003               	clrc
  7280  1386  0C93               	rrf	___fladd@grs^(0+384),f
  7281  1387                     l4310:
  7282  1387  1303               	bcf	3,6	;RP1=0, select bank1
  7283  1388  1C5E               	btfss	___fladd@b^(0+128),0
  7284  1389  2B8C               	goto	l4314
  7285  138A  1703               	bsf	3,6	;RP1=1, select bank3
  7286  138B  1793               	bsf	___fladd@grs^(0+384),7
  7287  138C                     l4314:
  7288  138C  3001               	movlw	1
  7289  138D  1303               	bcf	3,6	;RP1=0, select bank1
  7290  138E  00E6               	movwf	??___fladd^(0+128)
  7291  138F                     u7455:
  7292  138F  0D61               	rlf	(___fladd@b+3)^(0+128),w
  7293  1390  0CE1               	rrf	(___fladd@b+3)^(0+128),f
  7294  1391  0CE0               	rrf	(___fladd@b+2)^(0+128),f
  7295  1392  0CDF               	rrf	(___fladd@b+1)^(0+128),f
  7296  1393  0CDE               	rrf	___fladd@b^(0+128),f
  7297  1394  0BE6               	decfsz	(??___fladd^(0+128))& (0+127),f
  7298  1395  2B8F               	goto	u7455
  7299  1396  3001               	movlw	1
  7300  1397  00E6               	movwf	??___fladd^(0+128)
  7301  1398  0866               	movf	??___fladd^(0+128),w
  7302  1399  1703               	bsf	3,6	;RP1=1, select bank3
  7303  139A  0792               	addwf	___fladd@bexp^(0+384),f
  7304  139B                     l4318:
  7305  139B  1683               	bsf	3,5	;RP0=1, select bank3
  7306  139C  1703               	bsf	3,6	;RP1=1, select bank3
  7307  139D  0811               	movf	___fladd@aexp^(0+384),w
  7308  139E  0212               	subwf	___fladd@bexp^(0+384),w
  7309  139F  1C03               	skipc
  7310  13A0  2B78               	goto	l676
  7311  13A1                     l674:
  7312  13A1  1B10               	btfsc	___fladd@signs^(0+384),6
  7313  13A2  2BEC               	goto	l4344
  7314  13A3  0812               	movf	___fladd@bexp^(0+384),w
  7315  13A4  1D03               	btfss	3,2
  7316  13A5  2BB0               	goto	l4326
  7317  13A6  3000               	movlw	0
  7318  13A7  1303               	bcf	3,6	;RP1=0, select bank1
  7319  13A8  00E1               	movwf	(?___fladd+3)^(0+128)
  7320  13A9  3000               	movlw	0
  7321  13AA  00E0               	movwf	(?___fladd+2)^(0+128)
  7322  13AB  3000               	movlw	0
  7323  13AC  00DF               	movwf	(?___fladd+1)^(0+128)
  7324  13AD  3000               	movlw	0
  7325  13AE  00DE               	movwf	?___fladd^(0+128)
  7326  13AF  0008               	return
  7327  13B0                     l4326:
  7328  13B0  1303               	bcf	3,6	;RP1=0, select bank1
  7329  13B1  0862               	movf	___fladd@a^(0+128),w
  7330  13B2  07DE               	addwf	___fladd@b^(0+128),f
  7331  13B3  0863               	movf	(___fladd@a+1)^(0+128),w
  7332  13B4  1103               	clrz
  7333  13B5  1803               	skipnc
  7334  13B6  3E01               	addlw	1
  7335  13B7  1D03               	btfss	3,2
  7336  13B8  07DF               	addwf	(___fladd@b+1)^(0+128),f
  7337  13B9  0864               	movf	(___fladd@a+2)^(0+128),w
  7338  13BA  1103               	clrz
  7339  13BB  1803               	skipnc
  7340  13BC  3E01               	addlw	1
  7341  13BD  1D03               	btfss	3,2
  7342  13BE  07E0               	addwf	(___fladd@b+2)^(0+128),f
  7343  13BF  0865               	movf	(___fladd@a+3)^(0+128),w
  7344  13C0  1103               	clrz
  7345  13C1  1803               	skipnc
  7346  13C2  3E01               	addlw	1
  7347  13C3  1D03               	btfss	3,2
  7348  13C4  07E1               	addwf	(___fladd@b+3)^(0+128),f
  7349  13C5  1C61               	btfss	(___fladd@b+3)^(0+128),0
  7350  13C6  2C99               	goto	l4378
  7351  13C7  1703               	bsf	3,6	;RP1=1, select bank3
  7352  13C8  1C13               	btfss	___fladd@grs^(0+384),0
  7353  13C9  2BD5               	goto	l4334
  7354  13CA  0813               	movf	___fladd@grs^(0+384),w
  7355  13CB  1303               	bcf	3,6	;RP1=0, select bank1
  7356  13CC  00E6               	movwf	??___fladd^(0+128)
  7357  13CD  1003               	clrc
  7358  13CE  0C66               	rrf	??___fladd^(0+128),w
  7359  13CF  3801               	iorlw	1
  7360  13D0  00E7               	movwf	(??___fladd+1)^(0+128)
  7361  13D1  0867               	movf	(??___fladd+1)^(0+128),w
  7362  13D2  1703               	bsf	3,6	;RP1=1, select bank3
  7363  13D3  0093               	movwf	___fladd@grs^(0+384)
  7364  13D4  2BD7               	goto	l4336
  7365  13D5                     l4334:
  7366  13D5  1003               	clrc
  7367  13D6  0C93               	rrf	___fladd@grs^(0+384),f
  7368  13D7                     l4336:
  7369  13D7  1303               	bcf	3,6	;RP1=0, select bank1
  7370  13D8  1C5E               	btfss	___fladd@b^(0+128),0
  7371  13D9  2BDC               	goto	l4340
  7372  13DA  1703               	bsf	3,6	;RP1=1, select bank3
  7373  13DB  1793               	bsf	___fladd@grs^(0+384),7
  7374  13DC                     l4340:
  7375  13DC  3001               	movlw	1
  7376  13DD  1303               	bcf	3,6	;RP1=0, select bank1
  7377  13DE  00E6               	movwf	??___fladd^(0+128)
  7378  13DF                     u7535:
  7379  13DF  0D61               	rlf	(___fladd@b+3)^(0+128),w
  7380  13E0  0CE1               	rrf	(___fladd@b+3)^(0+128),f
  7381  13E1  0CE0               	rrf	(___fladd@b+2)^(0+128),f
  7382  13E2  0CDF               	rrf	(___fladd@b+1)^(0+128),f
  7383  13E3  0CDE               	rrf	___fladd@b^(0+128),f
  7384  13E4  0BE6               	decfsz	(??___fladd^(0+128))& (0+127),f
  7385  13E5  2BDF               	goto	u7535
  7386  13E6  3001               	movlw	1
  7387  13E7  00E6               	movwf	??___fladd^(0+128)
  7388  13E8  0866               	movf	??___fladd^(0+128),w
  7389  13E9  1703               	bsf	3,6	;RP1=1, select bank3
  7390  13EA  0792               	addwf	___fladd@bexp^(0+384),f
  7391  13EB  2C99               	goto	l4378
  7392  13EC                     l4344:
  7393  13EC  1303               	bcf	3,6	;RP1=0, select bank1
  7394  13ED  0861               	movf	(___fladd@b+3)^(0+128),w
  7395  13EE  3A80               	xorlw	128
  7396  13EF  00FF               	movwf	127
  7397  13F0  0865               	movf	(___fladd@a+3)^(0+128),w
  7398  13F1  3A80               	xorlw	128
  7399  13F2  027F               	subwf	127,w
  7400  13F3  1D03               	skipz
  7401  13F4  2BFF               	goto	u7543
  7402  13F5  0864               	movf	(___fladd@a+2)^(0+128),w
  7403  13F6  0260               	subwf	(___fladd@b+2)^(0+128),w
  7404  13F7  1D03               	skipz
  7405  13F8  2BFF               	goto	u7543
  7406  13F9  0863               	movf	(___fladd@a+1)^(0+128),w
  7407  13FA  025F               	subwf	(___fladd@b+1)^(0+128),w
  7408  13FB  1D03               	skipz
  7409  13FC  2BFF               	goto	u7543
  7410  13FD  0862               	movf	___fladd@a^(0+128),w
  7411  13FE  025E               	subwf	___fladd@b^(0+128),w
  7412  13FF                     u7543:
  7413  13FF  1803               	skipnc
  7414  1400  2C59               	goto	l4354
  7415  1401  30FF               	movlw	255
  7416  1402  00E6               	movwf	??___fladd^(0+128)
  7417  1403  30FF               	movlw	255
  7418  1404  00E7               	movwf	(??___fladd^(0+128)+1)
  7419  1405  30FF               	movlw	255
  7420  1406  00E8               	movwf	(??___fladd^(0+128)+2)
  7421  1407  30FF               	movlw	255
  7422  1408  00E9               	movwf	(??___fladd^(0+128)+3)
  7423  1409  0862               	movf	___fladd@a^(0+128),w
  7424  140A  00EA               	movwf	(??___fladd+4)^(0+128)
  7425  140B  0863               	movf	(___fladd@a+1)^(0+128),w
  7426  140C  00EB               	movwf	((??___fladd+4)^(0+128)+1)
  7427  140D  0864               	movf	(___fladd@a+2)^(0+128),w
  7428  140E  00EC               	movwf	((??___fladd+4)^(0+128)+2)
  7429  140F  0865               	movf	(___fladd@a+3)^(0+128),w
  7430  1410  00ED               	movwf	((??___fladd+4)^(0+128)+3)
  7431  1411  085E               	movf	___fladd@b^(0+128),w
  7432  1412  02EA               	subwf	(??___fladd+4)^(0+128),f
  7433  1413  085F               	movf	(___fladd@b+1)^(0+128),w
  7434  1414  1C03               	skipc
  7435  1415  0F5F               	incfsz	(___fladd@b+1)^(0+128),w
  7436  1416  2C18               	goto	u7551
  7437  1417  2C19               	goto	u7552
  7438  1418                     u7551:
  7439  1418  02EB               	subwf	((??___fladd+4)^(0+128)+1),f
  7440  1419                     u7552:
  7441  1419  0860               	movf	(___fladd@b+2)^(0+128),w
  7442  141A  1C03               	skipc
  7443  141B  0F60               	incfsz	(___fladd@b+2)^(0+128),w
  7444  141C  2C1E               	goto	u7553
  7445  141D  2C1F               	goto	u7554
  7446  141E                     u7553:
  7447  141E  02EC               	subwf	((??___fladd+4)^(0+128)+2),f
  7448  141F                     u7554:
  7449  141F  0861               	movf	(___fladd@b+3)^(0+128),w
  7450  1420  1C03               	skipc
  7451  1421  0F61               	incfsz	(___fladd@b+3)^(0+128),w
  7452  1422  2C24               	goto	u7555
  7453  1423  2C25               	goto	u7556
  7454  1424                     u7555:
  7455  1424  02ED               	subwf	((??___fladd+4)^(0+128)+3),f
  7456  1425                     u7556:
  7457  1425  086A               	movf	(??___fladd+4)^(0+128),w
  7458  1426  07E6               	addwf	??___fladd^(0+128),f
  7459  1427  086B               	movf	(??___fladd+5)^(0+128),w
  7460  1428  1803               	skipnc
  7461  1429  0F6B               	incfsz	(??___fladd+5)^(0+128),w
  7462  142A  2C2C               	goto	u7560
  7463  142B  2C2D               	goto	u7561
  7464  142C                     u7560:
  7465  142C  07E7               	addwf	(??___fladd^(0+128)+1),f
  7466  142D                     u7561:
  7467  142D  086C               	movf	(??___fladd+6)^(0+128),w
  7468  142E  1803               	skipnc
  7469  142F  0F6C               	incfsz	(??___fladd+6)^(0+128),w
  7470  1430  2C32               	goto	u7562
  7471  1431  2C33               	goto	u7563
  7472  1432                     u7562:
  7473  1432  07E8               	addwf	(??___fladd^(0+128)+2),f
  7474  1433                     u7563:
  7475  1433  086D               	movf	(??___fladd+7)^(0+128),w
  7476  1434  1803               	skipnc
  7477  1435  0A6D               	incf	(??___fladd+7)^(0+128),w
  7478  1436  07E9               	addwf	(??___fladd^(0+128)+3),f
  7479  1437  0869               	movf	(??___fladd+3)^(0+128),w
  7480  1438  00E1               	movwf	(___fladd@b+3)^(0+128)
  7481  1439  0868               	movf	(??___fladd+2)^(0+128),w
  7482  143A  00E0               	movwf	(___fladd@b+2)^(0+128)
  7483  143B  0867               	movf	(??___fladd+1)^(0+128),w
  7484  143C  00DF               	movwf	(___fladd@b+1)^(0+128)
  7485  143D  0866               	movf	??___fladd^(0+128),w
  7486  143E  00DE               	movwf	___fladd@b^(0+128)
  7487  143F  3080               	movlw	128
  7488  1440  00E6               	movwf	??___fladd^(0+128)
  7489  1441  0866               	movf	??___fladd^(0+128),w
  7490  1442  1703               	bsf	3,6	;RP1=1, select bank3
  7491  1443  0690               	xorwf	___fladd@signs^(0+384),f
  7492  1444  0993               	comf	___fladd@grs^(0+384),f
  7493  1445  0A93               	incf	___fladd@grs^(0+384),f
  7494  1446  0813               	movf	___fladd@grs^(0+384),w
  7495  1447  1D03               	btfss	3,2
  7496  1448  2C67               	goto	l691
  7497  1449  3001               	movlw	1
  7498  144A  1303               	bcf	3,6	;RP1=0, select bank1
  7499  144B  07DE               	addwf	___fladd@b^(0+128),f
  7500  144C  3000               	movlw	0
  7501  144D  1803               	skipnc
  7502  144E  3001               	movlw	1
  7503  144F  07DF               	addwf	(___fladd@b+1)^(0+128),f
  7504  1450  3000               	movlw	0
  7505  1451  1803               	skipnc
  7506  1452  3001               	movlw	1
  7507  1453  07E0               	addwf	(___fladd@b+2)^(0+128),f
  7508  1454  3000               	movlw	0
  7509  1455  1803               	skipnc
  7510  1456  3001               	movlw	1
  7511  1457  07E1               	addwf	(___fladd@b+3)^(0+128),f
  7512  1458  2C67               	goto	l691
  7513  1459                     l4354:
  7514  1459  0862               	movf	___fladd@a^(0+128),w
  7515  145A  02DE               	subwf	___fladd@b^(0+128),f
  7516  145B  0863               	movf	(___fladd@a+1)^(0+128),w
  7517  145C  1C03               	skipc
  7518  145D  0F63               	incfsz	(___fladd@a+1)^(0+128),w
  7519  145E  02DF               	subwf	(___fladd@b+1)^(0+128),f
  7520  145F  0864               	movf	(___fladd@a+2)^(0+128),w
  7521  1460  1C03               	skipc
  7522  1461  0F64               	incfsz	(___fladd@a+2)^(0+128),w
  7523  1462  02E0               	subwf	(___fladd@b+2)^(0+128),f
  7524  1463  0865               	movf	(___fladd@a+3)^(0+128),w
  7525  1464  1C03               	skipc
  7526  1465  0F65               	incfsz	(___fladd@a+3)^(0+128),w
  7527  1466  02E1               	subwf	(___fladd@b+3)^(0+128),f
  7528  1467                     l691:
  7529  1467  1303               	bcf	3,6	;RP1=0, select bank1
  7530  1468  0861               	movf	(___fladd@b+3)^(0+128),w
  7531  1469  0460               	iorwf	(___fladd@b+2)^(0+128),w
  7532  146A  045F               	iorwf	(___fladd@b+1)^(0+128),w
  7533  146B  045E               	iorwf	___fladd@b^(0+128),w
  7534  146C  1D03               	skipz
  7535  146D  2C96               	goto	l4376
  7536  146E  1703               	bsf	3,6	;RP1=1, select bank3
  7537  146F  0813               	movf	___fladd@grs^(0+384),w
  7538  1470  1D03               	btfss	3,2
  7539  1471  2C96               	goto	l4376
  7540  1472  3000               	movlw	0
  7541  1473  1303               	bcf	3,6	;RP1=0, select bank1
  7542  1474  00E1               	movwf	(?___fladd+3)^(0+128)
  7543  1475  3000               	movlw	0
  7544  1476  00E0               	movwf	(?___fladd+2)^(0+128)
  7545  1477  3000               	movlw	0
  7546  1478  00DF               	movwf	(?___fladd+1)^(0+128)
  7547  1479  3000               	movlw	0
  7548  147A  00DE               	movwf	?___fladd^(0+128)
  7549  147B  0008               	return
  7550  147C                     l4362:
  7551  147C  3001               	movlw	1
  7552  147D  00E6               	movwf	??___fladd^(0+128)
  7553  147E                     u7605:
  7554  147E  1003               	clrc
  7555  147F  0DDE               	rlf	___fladd@b^(0+128),f
  7556  1480  0DDF               	rlf	(___fladd@b+1)^(0+128),f
  7557  1481  0DE0               	rlf	(___fladd@b+2)^(0+128),f
  7558  1482  0DE1               	rlf	(___fladd@b+3)^(0+128),f
  7559  1483  0BE6               	decfsz	??___fladd^(0+128),f
  7560  1484  2C7E               	goto	u7605
  7561  1485  1703               	bsf	3,6	;RP1=1, select bank3
  7562  1486  1F93               	btfss	___fladd@grs^(0+384),7
  7563  1487  2C8A               	goto	l695
  7564  1488  1303               	bcf	3,6	;RP1=0, select bank1
  7565  1489  145E               	bsf	___fladd@b^(0+128),0
  7566  148A                     l695:
  7567  148A  1703               	bsf	3,6	;RP1=1, select bank3
  7568  148B  1C13               	btfss	___fladd@grs^(0+384),0
  7569  148C  2C8F               	goto	l4370
  7570  148D  1403               	setc
  7571  148E  2C90               	goto	L8
  7572  148F                     l4370:
  7573  148F  1003               	clrc
  7574  1490                     L8:
  7575  1490  0D93               	rlf	___fladd@grs^(0+384),f
  7576  1491  0812               	movf	___fladd@bexp^(0+384),w
  7577  1492  1903               	btfsc	3,2
  7578  1493  2C96               	goto	l4376
  7579  1494  3001               	movlw	1
  7580  1495  0292               	subwf	___fladd@bexp^(0+384),f
  7581  1496                     l4376:
  7582  1496  1303               	bcf	3,6	;RP1=0, select bank1
  7583  1497  1FE0               	btfss	(___fladd@b+2)^(0+128),7
  7584  1498  2C7C               	goto	l4362
  7585  1499                     l4378:
  7586  1499  1703               	bsf	3,6	;RP1=1, select bank3
  7587  149A  0191               	clrf	___fladd@aexp^(0+384)
  7588  149B  1F93               	btfss	___fladd@grs^(0+384),7
  7589  149C  2CA7               	goto	l4388
  7590  149D  0813               	movf	___fladd@grs^(0+384),w
  7591  149E  397F               	andlw	127
  7592  149F  1D03               	btfss	3,2
  7593  14A0  2CA4               	goto	l4384
  7594  14A1  1303               	bcf	3,6	;RP1=0, select bank1
  7595  14A2  1C5E               	btfss	___fladd@b^(0+128),0
  7596  14A3  2CA7               	goto	l4388
  7597  14A4                     l4384:
  7598  14A4  1703               	bsf	3,6	;RP1=1, select bank3
  7599  14A5  0191               	clrf	___fladd@aexp^(0+384)
  7600  14A6  0A91               	incf	___fladd@aexp^(0+384),f
  7601  14A7                     l4388:
  7602  14A7  1703               	bsf	3,6	;RP1=1, select bank3
  7603  14A8  0811               	movf	___fladd@aexp^(0+384),w
  7604  14A9  1903               	btfsc	3,2
  7605  14AA  2CDF               	goto	l704
  7606  14AB  3001               	movlw	1
  7607  14AC  1303               	bcf	3,6	;RP1=0, select bank1
  7608  14AD  07DE               	addwf	___fladd@b^(0+128),f
  7609  14AE  3000               	movlw	0
  7610  14AF  1803               	skipnc
  7611  14B0  3001               	movlw	1
  7612  14B1  07DF               	addwf	(___fladd@b+1)^(0+128),f
  7613  14B2  3000               	movlw	0
  7614  14B3  1803               	skipnc
  7615  14B4  3001               	movlw	1
  7616  14B5  07E0               	addwf	(___fladd@b+2)^(0+128),f
  7617  14B6  3000               	movlw	0
  7618  14B7  1803               	skipnc
  7619  14B8  3001               	movlw	1
  7620  14B9  07E1               	addwf	(___fladd@b+3)^(0+128),f
  7621  14BA  1C61               	btfss	(___fladd@b+3)^(0+128),0
  7622  14BB  2CDF               	goto	l704
  7623  14BC  085E               	movf	___fladd@b^(0+128),w
  7624  14BD  00E6               	movwf	??___fladd^(0+128)
  7625  14BE  085F               	movf	(___fladd@b+1)^(0+128),w
  7626  14BF  00E7               	movwf	(??___fladd^(0+128)+1)
  7627  14C0  0860               	movf	(___fladd@b+2)^(0+128),w
  7628  14C1  00E8               	movwf	(??___fladd^(0+128)+2)
  7629  14C2  0861               	movf	(___fladd@b+3)^(0+128),w
  7630  14C3  00E9               	movwf	(??___fladd^(0+128)+3)
  7631  14C4  3001               	movlw	1
  7632  14C5  00EA               	movwf	(??___fladd+4)^(0+128)
  7633  14C6                     u7705:
  7634  14C6  0D69               	rlf	(??___fladd^(0+128)+3),w
  7635  14C7  0CE9               	rrf	(??___fladd^(0+128)+3),f
  7636  14C8  0CE8               	rrf	(??___fladd^(0+128)+2),f
  7637  14C9  0CE7               	rrf	(??___fladd^(0+128)+1),f
  7638  14CA  0CE6               	rrf	??___fladd^(0+128),f
  7639  14CB  0BEA               	decfsz	(??___fladd+4)^(0+128),f
  7640  14CC  2CC6               	goto	u7705
  7641  14CD  0869               	movf	(??___fladd+3)^(0+128),w
  7642  14CE  00E1               	movwf	(___fladd@b+3)^(0+128)
  7643  14CF  0868               	movf	(??___fladd+2)^(0+128),w
  7644  14D0  00E0               	movwf	(___fladd@b+2)^(0+128)
  7645  14D1  0867               	movf	(??___fladd+1)^(0+128),w
  7646  14D2  00DF               	movwf	(___fladd@b+1)^(0+128)
  7647  14D3  0866               	movf	??___fladd^(0+128),w
  7648  14D4  00DE               	movwf	___fladd@b^(0+128)
  7649  14D5  1703               	bsf	3,6	;RP1=1, select bank3
  7650  14D6  0A12               	incf	___fladd@bexp^(0+384),w
  7651  14D7  1903               	btfsc	3,2
  7652  14D8  2CDF               	goto	l704
  7653  14D9  3001               	movlw	1
  7654  14DA  1303               	bcf	3,6	;RP1=0, select bank1
  7655  14DB  00E6               	movwf	??___fladd^(0+128)
  7656  14DC  0866               	movf	??___fladd^(0+128),w
  7657  14DD  1703               	bsf	3,6	;RP1=1, select bank3
  7658  14DE  0792               	addwf	___fladd@bexp^(0+384),f
  7659  14DF                     l704:
  7660  14DF  1703               	bsf	3,6	;RP1=1, select bank3
  7661  14E0  0A12               	incf	___fladd@bexp^(0+384),w
  7662  14E1  1D03               	btfss	3,2
  7663  14E2  0812               	movf	___fladd@bexp^(0+384),w
  7664  14E3  1D03               	btfss	3,2
  7665  14E4  2CF2               	goto	l4406
  7666  14E5  3000               	movlw	0
  7667  14E6  1303               	bcf	3,6	;RP1=0, select bank1
  7668  14E7  00E1               	movwf	(___fladd@b+3)^(0+128)
  7669  14E8  3000               	movlw	0
  7670  14E9  00E0               	movwf	(___fladd@b+2)^(0+128)
  7671  14EA  3000               	movlw	0
  7672  14EB  00DF               	movwf	(___fladd@b+1)^(0+128)
  7673  14EC  3000               	movlw	0
  7674  14ED  00DE               	movwf	___fladd@b^(0+128)
  7675  14EE  1703               	bsf	3,6	;RP1=1, select bank3
  7676  14EF  0812               	movf	___fladd@bexp^(0+384),w
  7677  14F0  1903               	btfsc	3,2
  7678  14F1  0190               	clrf	___fladd@signs^(0+384)
  7679  14F2                     l4406:
  7680  14F2  1C12               	btfss	___fladd@bexp^(0+384),0
  7681  14F3  2CF7               	goto	l4410
  7682  14F4  1303               	bcf	3,6	;RP1=0, select bank1
  7683  14F5  17E0               	bsf	(___fladd@b^(0+128)+2),7
  7684  14F6  2CFC               	goto	l712
  7685  14F7                     l4410:
  7686  14F7  307F               	movlw	127
  7687  14F8  1303               	bcf	3,6	;RP1=0, select bank1
  7688  14F9  00E6               	movwf	??___fladd^(0+128)
  7689  14FA  0866               	movf	??___fladd^(0+128),w
  7690  14FB  05E0               	andwf	(___fladd@b^(0+128)+2),f
  7691  14FC                     l712:
  7692  14FC  1703               	bsf	3,6	;RP1=1, select bank3
  7693  14FD  0812               	movf	___fladd@bexp^(0+384),w
  7694  14FE  1303               	bcf	3,6	;RP1=0, select bank1
  7695  14FF  00E6               	movwf	??___fladd^(0+128)
  7696  1500  1003               	clrc
  7697  1501  0C66               	rrf	??___fladd^(0+128),w
  7698  1502  00E7               	movwf	(??___fladd+1)^(0+128)
  7699  1503  0867               	movf	(??___fladd+1)^(0+128),w
  7700  1504  00E1               	movwf	(___fladd@b^(0+128)+3)
  7701  1505  1703               	bsf	3,6	;RP1=1, select bank3
  7702  1506  1F90               	btfss	___fladd@signs^(0+384),7
  7703  1507  0008               	return
  7704  1508  1303               	bcf	3,6	;RP1=0, select bank1
  7705  1509  17E1               	bsf	(___fladd@b^(0+128)+3),7
  7706  150A  0008               	return
  7707  150B                     __end_of___fladd:
  7708                           
  7709                           	psect	text20
  7710  1969                     __ptext20:	
  7711 ;; *************** function ___flneg *****************
  7712 ;; Defined at:
  7713 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\flneg.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  f1              4    0[BANK1 ] unsigned char 
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  4    0[BANK1 ] unsigned char 
  7720 ;; Registers used:
  7721 ;;		wreg
  7722 ;; Tracked objects:
  7723 ;;		On entry : 300/900
  7724 ;;		On exit  : 300/100
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7727 ;;      Params:         0       0       4       0       0
  7728 ;;      Locals:         0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0
  7730 ;;      Totals:         0       0       4       0       0
  7731 ;;Total ram usage:        4 bytes
  7732 ;; Hardware stack levels used: 1
  7733 ;; Hardware stack levels required when called: 4
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_sprintf
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741  1969                     ___flneg:	
  7742                           ;psect for function ___flneg
  7743                           
  7744                           
  7745                           ;incstack = 0
  7746                           ; Regs used in ___flneg: [wreg]
  7747  1969  0823               	movf	(___flneg@f1+3)^(0+128),w
  7748  196A  0422               	iorwf	(___flneg@f1+2)^(0+128),w
  7749  196B  0421               	iorwf	(___flneg@f1+1)^(0+128),w
  7750  196C  0420               	iorwf	___flneg@f1^(0+128),w
  7751  196D  1903               	skipnz
  7752  196E  0008               	return
  7753  196F  3080               	movlw	128
  7754  1970  06A3               	xorwf	(___flneg@f1+3)^(0+128),f
  7755  1971  0008               	return
  7756  1972                     __end_of___flneg:
  7757                           
  7758                           	psect	text21
  7759  1E27                     __ptext21:	
  7760 ;; *************** function ___flge *****************
  7761 ;; Defined at:
  7762 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\flge.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;  ff1             4    0[BANK1 ] unsigned char 
  7765 ;;  ff2             4    4[BANK1 ] unsigned char 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;		None
  7768 ;; Return value:  Size  Location     Type
  7769 ;;		None               void
  7770 ;; Registers used:
  7771 ;;		wreg, status,2, status,0
  7772 ;; Tracked objects:
  7773 ;;		On entry : 300/900
  7774 ;;		On exit  : 300/100
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7777 ;;      Params:         0       0       8       0       0
  7778 ;;      Locals:         0       0       0       0       0
  7779 ;;      Temps:          0       0       4       0       0
  7780 ;;      Totals:         0       0      12       0       0
  7781 ;;Total ram usage:       12 bytes
  7782 ;; Hardware stack levels used: 1
  7783 ;; Hardware stack levels required when called: 4
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		_sprintf
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791  1E27                     ___flge:	
  7792                           ;psect for function ___flge
  7793                           
  7794                           
  7795                           ;incstack = 0
  7796                           ; Regs used in ___flge: [wreg+status,2+status,0]
  7797  1E27  3000               	movlw	0
  7798  1E28  0520               	andwf	___flge@ff1^(0+128),w
  7799  1E29  00A8               	movwf	??___flge^(0+128)
  7800  1E2A  3000               	movlw	0
  7801  1E2B  0521               	andwf	(___flge@ff1+1)^(0+128),w
  7802  1E2C  00A9               	movwf	(??___flge^(0+128)+1)
  7803  1E2D  3080               	movlw	128
  7804  1E2E  0522               	andwf	(___flge@ff1+2)^(0+128),w
  7805  1E2F  00AA               	movwf	(??___flge^(0+128)+2)
  7806  1E30  307F               	movlw	127
  7807  1E31  0523               	andwf	(___flge@ff1+3)^(0+128),w
  7808  1E32  00AB               	movwf	(??___flge^(0+128)+3)
  7809  1E33  082B               	movf	(??___flge+3)^(0+128),w
  7810  1E34  042A               	iorwf	(??___flge+2)^(0+128),w
  7811  1E35  0429               	iorwf	(??___flge+1)^(0+128),w
  7812  1E36  0428               	iorwf	??___flge^(0+128),w
  7813  1E37  1D03               	skipz
  7814  1E38  2E41               	goto	l534
  7815  1E39  3000               	movlw	0
  7816  1E3A  00A3               	movwf	(___flge@ff1+3)^(0+128)
  7817  1E3B  3000               	movlw	0
  7818  1E3C  00A2               	movwf	(___flge@ff1+2)^(0+128)
  7819  1E3D  3000               	movlw	0
  7820  1E3E  00A1               	movwf	(___flge@ff1+1)^(0+128)
  7821  1E3F  3000               	movlw	0
  7822  1E40  00A0               	movwf	___flge@ff1^(0+128)
  7823  1E41                     l534:
  7824  1E41  3000               	movlw	0
  7825  1E42  0524               	andwf	___flge@ff2^(0+128),w
  7826  1E43  00A8               	movwf	??___flge^(0+128)
  7827  1E44  3000               	movlw	0
  7828  1E45  0525               	andwf	(___flge@ff2+1)^(0+128),w
  7829  1E46  00A9               	movwf	(??___flge^(0+128)+1)
  7830  1E47  3080               	movlw	128
  7831  1E48  0526               	andwf	(___flge@ff2+2)^(0+128),w
  7832  1E49  00AA               	movwf	(??___flge^(0+128)+2)
  7833  1E4A  307F               	movlw	127
  7834  1E4B  0527               	andwf	(___flge@ff2+3)^(0+128),w
  7835  1E4C  00AB               	movwf	(??___flge^(0+128)+3)
  7836  1E4D  082B               	movf	(??___flge+3)^(0+128),w
  7837  1E4E  042A               	iorwf	(??___flge+2)^(0+128),w
  7838  1E4F  0429               	iorwf	(??___flge+1)^(0+128),w
  7839  1E50  0428               	iorwf	??___flge^(0+128),w
  7840  1E51  1D03               	skipz
  7841  1E52  2E5B               	goto	l4808
  7842  1E53  3000               	movlw	0
  7843  1E54  00A7               	movwf	(___flge@ff2+3)^(0+128)
  7844  1E55  3000               	movlw	0
  7845  1E56  00A6               	movwf	(___flge@ff2+2)^(0+128)
  7846  1E57  3000               	movlw	0
  7847  1E58  00A5               	movwf	(___flge@ff2+1)^(0+128)
  7848  1E59  3000               	movlw	0
  7849  1E5A  00A4               	movwf	___flge@ff2^(0+128)
  7850  1E5B                     l4808:
  7851  1E5B  1FA3               	btfss	(___flge@ff1+3)^(0+128),7
  7852  1E5C  2E81               	goto	l4812
  7853  1E5D  3000               	movlw	0
  7854  1E5E  00A8               	movwf	??___flge^(0+128)
  7855  1E5F  3000               	movlw	0
  7856  1E60  00A9               	movwf	(??___flge^(0+128)+1)
  7857  1E61  3000               	movlw	0
  7858  1E62  00AA               	movwf	(??___flge^(0+128)+2)
  7859  1E63  3080               	movlw	128
  7860  1E64  00AB               	movwf	(??___flge^(0+128)+3)
  7861  1E65  0820               	movf	___flge@ff1^(0+128),w
  7862  1E66  02A8               	subwf	??___flge^(0+128),f
  7863  1E67  0821               	movf	(___flge@ff1+1)^(0+128),w
  7864  1E68  1C03               	skipc
  7865  1E69  0F21               	incfsz	(___flge@ff1+1)^(0+128),w
  7866  1E6A  2E6C               	goto	u8841
  7867  1E6B  2E6D               	goto	u8842
  7868  1E6C                     u8841:
  7869  1E6C  02A9               	subwf	(??___flge^(0+128)+1),f
  7870  1E6D                     u8842:
  7871  1E6D  0822               	movf	(___flge@ff1+2)^(0+128),w
  7872  1E6E  1C03               	skipc
  7873  1E6F  0F22               	incfsz	(___flge@ff1+2)^(0+128),w
  7874  1E70  2E72               	goto	u8843
  7875  1E71  2E73               	goto	u8844
  7876  1E72                     u8843:
  7877  1E72  02AA               	subwf	(??___flge^(0+128)+2),f
  7878  1E73                     u8844:
  7879  1E73  0823               	movf	(___flge@ff1+3)^(0+128),w
  7880  1E74  1C03               	skipc
  7881  1E75  0F23               	incfsz	(___flge@ff1+3)^(0+128),w
  7882  1E76  2E78               	goto	u8845
  7883  1E77  2E79               	goto	u8846
  7884  1E78                     u8845:
  7885  1E78  02AB               	subwf	(??___flge^(0+128)+3),f
  7886  1E79                     u8846:
  7887  1E79  082B               	movf	(??___flge+3)^(0+128),w
  7888  1E7A  00A3               	movwf	(___flge@ff1+3)^(0+128)
  7889  1E7B  082A               	movf	(??___flge+2)^(0+128),w
  7890  1E7C  00A2               	movwf	(___flge@ff1+2)^(0+128)
  7891  1E7D  0829               	movf	(??___flge+1)^(0+128),w
  7892  1E7E  00A1               	movwf	(___flge@ff1+1)^(0+128)
  7893  1E7F  0828               	movf	??___flge^(0+128),w
  7894  1E80  00A0               	movwf	___flge@ff1^(0+128)
  7895  1E81                     l4812:
  7896  1E81  1FA7               	btfss	(___flge@ff2+3)^(0+128),7
  7897  1E82  2EA7               	goto	l537
  7898  1E83  3000               	movlw	0
  7899  1E84  00A8               	movwf	??___flge^(0+128)
  7900  1E85  3000               	movlw	0
  7901  1E86  00A9               	movwf	(??___flge^(0+128)+1)
  7902  1E87  3000               	movlw	0
  7903  1E88  00AA               	movwf	(??___flge^(0+128)+2)
  7904  1E89  3080               	movlw	128
  7905  1E8A  00AB               	movwf	(??___flge^(0+128)+3)
  7906  1E8B  0824               	movf	___flge@ff2^(0+128),w
  7907  1E8C  02A8               	subwf	??___flge^(0+128),f
  7908  1E8D  0825               	movf	(___flge@ff2+1)^(0+128),w
  7909  1E8E  1C03               	skipc
  7910  1E8F  0F25               	incfsz	(___flge@ff2+1)^(0+128),w
  7911  1E90  2E92               	goto	u8861
  7912  1E91  2E93               	goto	u8862
  7913  1E92                     u8861:
  7914  1E92  02A9               	subwf	(??___flge^(0+128)+1),f
  7915  1E93                     u8862:
  7916  1E93  0826               	movf	(___flge@ff2+2)^(0+128),w
  7917  1E94  1C03               	skipc
  7918  1E95  0F26               	incfsz	(___flge@ff2+2)^(0+128),w
  7919  1E96  2E98               	goto	u8863
  7920  1E97  2E99               	goto	u8864
  7921  1E98                     u8863:
  7922  1E98  02AA               	subwf	(??___flge^(0+128)+2),f
  7923  1E99                     u8864:
  7924  1E99  0827               	movf	(___flge@ff2+3)^(0+128),w
  7925  1E9A  1C03               	skipc
  7926  1E9B  0F27               	incfsz	(___flge@ff2+3)^(0+128),w
  7927  1E9C  2E9E               	goto	u8865
  7928  1E9D  2E9F               	goto	u8866
  7929  1E9E                     u8865:
  7930  1E9E  02AB               	subwf	(??___flge^(0+128)+3),f
  7931  1E9F                     u8866:
  7932  1E9F  082B               	movf	(??___flge+3)^(0+128),w
  7933  1EA0  00A7               	movwf	(___flge@ff2+3)^(0+128)
  7934  1EA1  082A               	movf	(??___flge+2)^(0+128),w
  7935  1EA2  00A6               	movwf	(___flge@ff2+2)^(0+128)
  7936  1EA3  0829               	movf	(??___flge+1)^(0+128),w
  7937  1EA4  00A5               	movwf	(___flge@ff2+1)^(0+128)
  7938  1EA5  0828               	movf	??___flge^(0+128),w
  7939  1EA6  00A4               	movwf	___flge@ff2^(0+128)
  7940  1EA7                     l537:
  7941  1EA7  3080               	movlw	128
  7942  1EA8  06A3               	xorwf	(___flge@ff1+3)^(0+128),f
  7943  1EA9  3080               	movlw	128
  7944  1EAA  06A7               	xorwf	(___flge@ff2+3)^(0+128),f
  7945  1EAB  0827               	movf	(___flge@ff2+3)^(0+128),w
  7946  1EAC  0223               	subwf	(___flge@ff1+3)^(0+128),w
  7947  1EAD  1D03               	skipz
  7948  1EAE  0008               	return
  7949  1EAF  0826               	movf	(___flge@ff2+2)^(0+128),w
  7950  1EB0  0222               	subwf	(___flge@ff1+2)^(0+128),w
  7951  1EB1  1D03               	skipz
  7952  1EB2  0008               	return
  7953  1EB3  0825               	movf	(___flge@ff2+1)^(0+128),w
  7954  1EB4  0221               	subwf	(___flge@ff1+1)^(0+128),w
  7955  1EB5  1D03               	skipz
  7956  1EB6  0008               	return
  7957  1EB7  0824               	movf	___flge@ff2^(0+128),w
  7958  1EB8  0220               	subwf	___flge@ff1^(0+128),w
  7959  1EB9  0008               	return
  7960  1EBA                     __end_of___flge:
  7961                           
  7962                           	psect	text22
  7963  1BCD                     __ptext22:	
  7964 ;; *************** function ___fleq *****************
  7965 ;; Defined at:
  7966 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fleq.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  ff1             4    0[BANK1 ] unsigned char 
  7969 ;;  ff2             4    4[BANK1 ] unsigned char 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;		None
  7972 ;; Return value:  Size  Location     Type
  7973 ;;		None               void
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0
  7976 ;; Tracked objects:
  7977 ;;		On entry : 300/900
  7978 ;;		On exit  : 300/100
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7981 ;;      Params:         0       0       8       0       0
  7982 ;;      Locals:         0       0       0       0       0
  7983 ;;      Temps:          0       0       4       0       0
  7984 ;;      Totals:         0       0      12       0       0
  7985 ;;Total ram usage:       12 bytes
  7986 ;; Hardware stack levels used: 1
  7987 ;; Hardware stack levels required when called: 4
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_sprintf
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995  1BCD                     ___fleq:	
  7996                           ;psect for function ___fleq
  7997                           
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8001  1BCD  3000               	movlw	0
  8002  1BCE  0520               	andwf	___fleq@ff1^(0+128),w
  8003  1BCF  00A8               	movwf	??___fleq^(0+128)
  8004  1BD0  3000               	movlw	0
  8005  1BD1  0521               	andwf	(___fleq@ff1+1)^(0+128),w
  8006  1BD2  00A9               	movwf	(??___fleq^(0+128)+1)
  8007  1BD3  3080               	movlw	128
  8008  1BD4  0522               	andwf	(___fleq@ff1+2)^(0+128),w
  8009  1BD5  00AA               	movwf	(??___fleq^(0+128)+2)
  8010  1BD6  307F               	movlw	127
  8011  1BD7  0523               	andwf	(___fleq@ff1+3)^(0+128),w
  8012  1BD8  00AB               	movwf	(??___fleq^(0+128)+3)
  8013  1BD9  082B               	movf	(??___fleq+3)^(0+128),w
  8014  1BDA  042A               	iorwf	(??___fleq+2)^(0+128),w
  8015  1BDB  0429               	iorwf	(??___fleq+1)^(0+128),w
  8016  1BDC  0428               	iorwf	??___fleq^(0+128),w
  8017  1BDD  1D03               	skipz
  8018  1BDE  2BE7               	goto	l529
  8019  1BDF  3000               	movlw	0
  8020  1BE0  00A3               	movwf	(___fleq@ff1+3)^(0+128)
  8021  1BE1  3000               	movlw	0
  8022  1BE2  00A2               	movwf	(___fleq@ff1+2)^(0+128)
  8023  1BE3  3000               	movlw	0
  8024  1BE4  00A1               	movwf	(___fleq@ff1+1)^(0+128)
  8025  1BE5  3000               	movlw	0
  8026  1BE6  00A0               	movwf	___fleq@ff1^(0+128)
  8027  1BE7                     l529:
  8028  1BE7  3000               	movlw	0
  8029  1BE8  0524               	andwf	___fleq@ff2^(0+128),w
  8030  1BE9  00A8               	movwf	??___fleq^(0+128)
  8031  1BEA  3000               	movlw	0
  8032  1BEB  0525               	andwf	(___fleq@ff2+1)^(0+128),w
  8033  1BEC  00A9               	movwf	(??___fleq^(0+128)+1)
  8034  1BED  3080               	movlw	128
  8035  1BEE  0526               	andwf	(___fleq@ff2+2)^(0+128),w
  8036  1BEF  00AA               	movwf	(??___fleq^(0+128)+2)
  8037  1BF0  307F               	movlw	127
  8038  1BF1  0527               	andwf	(___fleq@ff2+3)^(0+128),w
  8039  1BF2  00AB               	movwf	(??___fleq^(0+128)+3)
  8040  1BF3  082B               	movf	(??___fleq+3)^(0+128),w
  8041  1BF4  042A               	iorwf	(??___fleq+2)^(0+128),w
  8042  1BF5  0429               	iorwf	(??___fleq+1)^(0+128),w
  8043  1BF6  0428               	iorwf	??___fleq^(0+128),w
  8044  1BF7  1D03               	skipz
  8045  1BF8  2C01               	goto	l530
  8046  1BF9  3000               	movlw	0
  8047  1BFA  00A7               	movwf	(___fleq@ff2+3)^(0+128)
  8048  1BFB  3000               	movlw	0
  8049  1BFC  00A6               	movwf	(___fleq@ff2+2)^(0+128)
  8050  1BFD  3000               	movlw	0
  8051  1BFE  00A5               	movwf	(___fleq@ff2+1)^(0+128)
  8052  1BFF  3000               	movlw	0
  8053  1C00  00A4               	movwf	___fleq@ff2^(0+128)
  8054  1C01                     l530:
  8055  1C01  0827               	movf	(___fleq@ff2+3)^(0+128),w
  8056  1C02  0623               	xorwf	(___fleq@ff1+3)^(0+128),w
  8057  1C03  1D03               	skipz
  8058  1C04  2C0F               	goto	u8805
  8059  1C05  0826               	movf	(___fleq@ff2+2)^(0+128),w
  8060  1C06  0622               	xorwf	(___fleq@ff1+2)^(0+128),w
  8061  1C07  1D03               	skipz
  8062  1C08  2C0F               	goto	u8805
  8063  1C09  0825               	movf	(___fleq@ff2+1)^(0+128),w
  8064  1C0A  0621               	xorwf	(___fleq@ff1+1)^(0+128),w
  8065  1C0B  1D03               	skipz
  8066  1C0C  2C0F               	goto	u8805
  8067  1C0D  0824               	movf	___fleq@ff2^(0+128),w
  8068  1C0E  0620               	xorwf	___fleq@ff1^(0+128),w
  8069  1C0F                     u8805:
  8070  1C0F  1903               	skipnz
  8071  1C10  2C13               	goto	l4798
  8072  1C11  1003               	clrc
  8073  1C12  0008               	return
  8074  1C13                     l4798:
  8075  1C13  1403               	setc
  8076  1C14  0008               	return
  8077  1C15                     __end_of___fleq:
  8078                           
  8079                           	psect	text23
  8080  10A4                     __ptext23:	
  8081 ;; *************** function _config *****************
  8082 ;; Defined at:
  8083 ;;		line 85 in file "newmain.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : B00/0
  8094 ;;		On exit  : 300/100
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8097 ;;      Params:         0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used: 1
  8103 ;; Hardware stack levels required when called: 7
  8104 ;; This function calls:
  8105 ;;		_LCD_Initialize
  8106 ;;		_TIMER1_Init
  8107 ;; This function is called by:
  8108 ;;		_main
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112  10A4                     _config:	
  8113                           ;psect for function _config
  8114                           
  8115                           
  8116                           ;newmain.c: 87:     ANSEL = ANSELH = 0;
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _config: [wreg+status,2+status,0+pclath+cstack]
  8120  10A4  1683               	bsf	3,5	;RP0=1, select bank3
  8121  10A5  1703               	bsf	3,6	;RP1=1, select bank3
  8122  10A6  0189               	clrf	9	;volatile
  8123  10A7  0188               	clrf	8	;volatile
  8124                           
  8125                           ;newmain.c: 88:     TRISC = 0;
  8126  10A8  1303               	bcf	3,6	;RP1=0, select bank1
  8127  10A9  0187               	clrf	7	;volatile
  8128                           
  8129                           ;newmain.c: 90:     TIMER1_Init();
  8130  10AA  160A  158A  2172  160A  118A  	fcall	_TIMER1_Init
  8131                           
  8132                           ;newmain.c: 91:     LCD_Initialize();
  8133  10AF  160A  158A  2286   	fcall	_LCD_Initialize
  8134                           
  8135                           ;newmain.c: 94:     TMR1IE = 1;
  8136  10B2  1683               	bsf	3,5	;RP0=1, select bank1
  8137  10B3  140C               	bsf	12,0	;volatile
  8138                           
  8139                           ;newmain.c: 95:     TMR1IF = 0;
  8140  10B4  1283               	bcf	3,5	;RP0=0, select bank0
  8141  10B5  100C               	bcf	12,0	;volatile
  8142                           
  8143                           ;newmain.c: 97:     INTE = 1;
  8144  10B6  160B               	bsf	11,4	;volatile
  8145                           
  8146                           ;newmain.c: 98:     INTF = 0;
  8147  10B7  108B               	bcf	11,1	;volatile
  8148                           
  8149                           ;newmain.c: 99:     INTEDG = 1;
  8150  10B8  1683               	bsf	3,5	;RP0=1, select bank1
  8151  10B9  1701               	bsf	1,6	;volatile
  8152                           
  8153                           ;newmain.c: 101:     PEIE = 1;
  8154  10BA  170B               	bsf	11,6	;volatile
  8155                           
  8156                           ;newmain.c: 102:     GIE = 1;
  8157  10BB  178B               	bsf	11,7	;volatile
  8158  10BC  0008               	return
  8159  10BD                     __end_of_config:
  8160                           
  8161                           	psect	text24
  8162  1972                     __ptext24:	
  8163 ;; *************** function _TIMER1_Init *****************
  8164 ;; Defined at:
  8165 ;;		line 77 in file "newmain.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;		None
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;		None
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  1    wreg      void 
  8172 ;; Registers used:
  8173 ;;		None
  8174 ;; Tracked objects:
  8175 ;;		On entry : B00/100
  8176 ;;		On exit  : B00/0
  8177 ;;		Unchanged: 800/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8179 ;;      Params:         0       0       0       0       0
  8180 ;;      Locals:         0       0       0       0       0
  8181 ;;      Temps:          0       0       0       0       0
  8182 ;;      Totals:         0       0       0       0       0
  8183 ;;Total ram usage:        0 bytes
  8184 ;; Hardware stack levels used: 1
  8185 ;; Hardware stack levels required when called: 4
  8186 ;; This function calls:
  8187 ;;		Nothing
  8188 ;; This function is called by:
  8189 ;;		_config
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193  1972                     _TIMER1_Init:	
  8194                           ;psect for function _TIMER1_Init
  8195                           
  8196                           
  8197                           ;newmain.c: 79:     T1CKPS1 = 1;
  8198                           
  8199                           ;incstack = 0
  8200                           ; Regs used in _TIMER1_Init: []
  8201  1972  1283               	bcf	3,5	;RP0=0, select bank0
  8202  1973  1690               	bsf	16,5	;volatile
  8203                           
  8204                           ;newmain.c: 80:     T1CKPS0 = 1;
  8205  1974  1610               	bsf	16,4	;volatile
  8206                           
  8207                           ;newmain.c: 81:     TMR1CS = 0;
  8208  1975  1090               	bcf	16,1	;volatile
  8209                           
  8210                           ;newmain.c: 82:     TMR1ON = 1;
  8211  1976  1410               	bsf	16,0	;volatile
  8212                           
  8213                           ;newmain.c: 83:     TMR1 = 3036;
  8214  1977  300B               	movlw	11
  8215  1978  008F               	movwf	15	;volatile
  8216  1979  30DC               	movlw	220
  8217  197A  008E               	movwf	14	;volatile
  8218  197B  0008               	return
  8219  197C                     __end_of_TIMER1_Init:
  8220                           
  8221                           	psect	text25
  8222  1A86                     __ptext25:	
  8223 ;; *************** function _LCD_Initialize *****************
  8224 ;; Defined at:
  8225 ;;		line 46 in file "lcd.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;		None
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;		None
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : B00/0
  8236 ;;		On exit  : 300/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8239 ;;      Params:         0       0       0       0       0
  8240 ;;      Locals:         0       0       0       0       0
  8241 ;;      Temps:          0       0       2       0       0
  8242 ;;      Totals:         0       0       2       0       0
  8243 ;;Total ram usage:        2 bytes
  8244 ;; Hardware stack levels used: 1
  8245 ;; Hardware stack levels required when called: 6
  8246 ;; This function calls:
  8247 ;;		_LCDPutCmd
  8248 ;; This function is called by:
  8249 ;;		_config
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253  1A86                     _LCD_Initialize:	
  8254                           ;psect for function _LCD_Initialize
  8255                           
  8256                           
  8257                           ;lcd.c: 49:     PORTD = 0x00;
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8261  1A86  0188               	clrf	8	;volatile
  8262                           
  8263                           ;lcd.c: 53:     TRISD = 0x00;
  8264  1A87  1683               	bsf	3,5	;RP0=1, select bank1
  8265  1A88  0188               	clrf	8	;volatile
  8266                           
  8267                           ;lcd.c: 54:     ANSEL = 0x00;
  8268  1A89  1703               	bsf	3,6	;RP1=1, select bank3
  8269  1A8A  0188               	clrf	8	;volatile
  8270                           
  8271                           ;lcd.c: 55:     ANSELH = 0x00;
  8272  1A8B  0189               	clrf	9	;volatile
  8273                           
  8274                           ;lcd.c: 61:     _delay((unsigned long)((15)*(16000000/4000.0)));
  8275  1A8C  304E               	movlw	78
  8276  1A8D  1683               	bsf	3,5	;RP0=1, select bank1
  8277  1A8E  1303               	bcf	3,6	;RP1=0, select bank1
  8278  1A8F  00A7               	movwf	(??_LCD_Initialize^(0+128)+1)
  8279  1A90  30EA               	movlw	234
  8280  1A91  00A6               	movwf	??_LCD_Initialize^(0+128)
  8281  1A92                     u9667:
  8282  1A92  0BA6               	decfsz	??_LCD_Initialize^(0+128),f
  8283  1A93  2A92               	goto	u9667
  8284  1A94  0BA7               	decfsz	(??_LCD_Initialize^(0+128)+1),f
  8285  1A95  2A92               	goto	u9667
  8286  1A96  0000               	nop
  8287                           
  8288                           ;lcd.c: 64:     LCDPutCmd(0x32);
  8289  1A97  3032               	movlw	50
  8290  1A98  160A  158A  231D  160A  158A  	fcall	_LCDPutCmd
  8291                           
  8292                           ;lcd.c: 67:     LCDPutCmd(0x28);
  8293  1A9D  3028               	movlw	40
  8294  1A9E  160A  158A  231D  160A  158A  	fcall	_LCDPutCmd
  8295                           
  8296                           ;lcd.c: 70:     LCDPutCmd(0x0C);
  8297  1AA3  300C               	movlw	12
  8298  1AA4  160A  158A  231D  160A  158A  	fcall	_LCDPutCmd
  8299                           
  8300                           ;lcd.c: 72:     LCDPutCmd(0x01);
  8301  1AA9  3001               	movlw	1
  8302  1AAA  160A  158A  231D  160A  158A  	fcall	_LCDPutCmd
  8303                           
  8304                           ;lcd.c: 75:     LCDPutCmd(0x06);
  8305  1AAF  3006               	movlw	6
  8306  1AB0  160A  158A  231D   	fcall	_LCDPutCmd
  8307  1AB3  0008               	return
  8308  1AB4                     __end_of_LCD_Initialize:
  8309                           
  8310                           	psect	text26
  8311  0803                     __ptext26:	
  8312 ;; *************** function _LCDPutStr *****************
  8313 ;; Defined at:
  8314 ;;		line 165 in file "lcd.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;  str             1    wreg     PTR const unsigned char 
  8317 ;;		 -> buffer(10), 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  str             1    7[BANK1 ] PTR const unsigned char 
  8320 ;;		 -> buffer(10), 
  8321 ;;  i               1    8[BANK1 ] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : B00/B00
  8328 ;;		On exit  : B00/900
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8331 ;;      Params:         0       0       0       0       0
  8332 ;;      Locals:         0       0       2       0       0
  8333 ;;      Temps:          0       0       1       0       0
  8334 ;;      Totals:         0       0       3       0       0
  8335 ;;Total ram usage:        3 bytes
  8336 ;; Hardware stack levels used: 1
  8337 ;; Hardware stack levels required when called: 6
  8338 ;; This function calls:
  8339 ;;		_LCDPutChar
  8340 ;; This function is called by:
  8341 ;;		_main
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345  0803                     _LCDPutStr:	
  8346                           ;psect for function _LCDPutStr
  8347                           
  8348                           
  8349                           ;incstack = 0
  8350                           ; Regs used in _LCDPutStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8351                           ;LCDPutStr@str stored from wreg
  8352  0803  1303               	bcf	3,6	;RP1=0, select bank1
  8353  0804  00A7               	movwf	LCDPutStr@str^(0+128)
  8354                           
  8355                           ;lcd.c: 165: void LCDPutStr(const char *str);lcd.c: 166: {;lcd.c: 167:     uint8_t i=0;
  8356  0805  01A8               	clrf	LCDPutStr@i^(0+128)
  8357  0806                     l5254:	
  8358                           ;lcd.c: 170:     while (str[i])
  8359                           
  8360                           
  8361                           ;lcd.c: 170:     while (str[i])
  8362  0806  0828               	movf	LCDPutStr@i^(0+128),w
  8363  0807  0727               	addwf	LCDPutStr@str^(0+128),w
  8364  0808  00A6               	movwf	??_LCDPutStr^(0+128)
  8365  0809  0826               	movf	??_LCDPutStr^(0+128),w
  8366  080A  0084               	movwf	4
  8367  080B  1783               	bsf	3,7	;select IRP bank2
  8368  080C  0800               	movf	0,w
  8369  080D  1903               	btfsc	3,2
  8370  080E  0008               	return
  8371                           
  8372                           ;lcd.c: 171:     {;lcd.c: 173:         LCDPutChar(str[i++]);
  8373  080F  0828               	movf	LCDPutStr@i^(0+128),w
  8374  0810  0727               	addwf	LCDPutStr@str^(0+128),w
  8375  0811  00A6               	movwf	??_LCDPutStr^(0+128)
  8376  0812  0826               	movf	??_LCDPutStr^(0+128),w
  8377  0813  0084               	movwf	4
  8378  0814  0800               	movf	0,w
  8379  0815  160A  158A  225B  120A  158A  	fcall	_LCDPutChar
  8380  081A  3001               	movlw	1
  8381  081B  1683               	bsf	3,5	;RP0=1, select bank1
  8382  081C  00A6               	movwf	??_LCDPutStr^(0+128)
  8383  081D  0826               	movf	??_LCDPutStr^(0+128),w
  8384  081E  07A8               	addwf	LCDPutStr@i^(0+128),f
  8385  081F  2806               	goto	l5254
  8386  0820                     __end_of_LCDPutStr:
  8387                           
  8388                           	psect	text27
  8389  1A5B                     __ptext27:	
  8390 ;; *************** function _LCDPutChar *****************
  8391 ;; Defined at:
  8392 ;;		line 133 in file "lcd.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  ch              1    wreg     unsigned char 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  ch              1    5[BANK1 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : B00/900
  8403 ;;		On exit  : 300/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8406 ;;      Params:         0       0       0       0       0
  8407 ;;      Locals:         0       0       1       0       0
  8408 ;;      Temps:          0       0       2       0       0
  8409 ;;      Totals:         0       0       3       0       0
  8410 ;;Total ram usage:        3 bytes
  8411 ;; Hardware stack levels used: 1
  8412 ;; Hardware stack levels required when called: 5
  8413 ;; This function calls:
  8414 ;;		_LCDWriteNibble
  8415 ;; This function is called by:
  8416 ;;		_LCDPutStr
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420  1A5B                     _LCDPutChar:	
  8421                           ;psect for function _LCDPutChar
  8422                           
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
  8426                           ;LCDPutChar@ch stored from wreg
  8427  1A5B  00A5               	movwf	LCDPutChar@ch^(0+128)
  8428                           
  8429                           ;lcd.c: 133: void LCDPutChar(uint8_t ch);lcd.c: 134: {;lcd.c: 135:     _delay((unsigned 
      +                          long)((5)*(16000000/4000.0)));
  8430  1A5C  301A               	movlw	26
  8431  1A5D  1683               	bsf	3,5	;RP0=1, select bank1
  8432  1A5E  1303               	bcf	3,6	;RP1=0, select bank1
  8433  1A5F  00A4               	movwf	(??_LCDPutChar^(0+128)+1)
  8434  1A60  30F7               	movlw	247
  8435  1A61  00A3               	movwf	??_LCDPutChar^(0+128)
  8436  1A62                     u9677:
  8437  1A62  0BA3               	decfsz	??_LCDPutChar^(0+128),f
  8438  1A63  2A62               	goto	u9677
  8439  1A64  0BA4               	decfsz	(??_LCDPutChar^(0+128)+1),f
  8440  1A65  2A62               	goto	u9677
  8441  1A66  2A67               	nop2
  8442                           
  8443                           ;lcd.c: 138:     LCDWriteNibble(ch,1);
  8444  1A67  1683               	bsf	3,5	;RP0=1, select bank1
  8445  1A68  1303               	bcf	3,6	;RP1=0, select bank1
  8446  1A69  01A0               	clrf	LCDWriteNibble@rs^(0+128)
  8447  1A6A  0AA0               	incf	LCDWriteNibble@rs^(0+128),f
  8448  1A6B  0825               	movf	LCDPutChar@ch^(0+128),w
  8449  1A6C  160A  158A  24AC  160A  158A  	fcall	_LCDWriteNibble
  8450                           
  8451                           ;lcd.c: 141:     ch = (ch << 4);
  8452  1A71  1683               	bsf	3,5	;RP0=1, select bank1
  8453  1A72  0825               	movf	LCDPutChar@ch^(0+128),w
  8454  1A73  00A3               	movwf	??_LCDPutChar^(0+128)
  8455  1A74  3003               	movlw	3
  8456  1A75                     u8135:
  8457  1A75  1003               	clrc
  8458  1A76  0DA3               	rlf	??_LCDPutChar^(0+128),f
  8459  1A77  3EFF               	addlw	-1
  8460  1A78  1D03               	skipz
  8461  1A79  2A75               	goto	u8135
  8462  1A7A  1003               	clrc
  8463  1A7B  0D23               	rlf	??_LCDPutChar^(0+128),w
  8464  1A7C  00A4               	movwf	(??_LCDPutChar+1)^(0+128)
  8465  1A7D  0824               	movf	(??_LCDPutChar+1)^(0+128),w
  8466  1A7E  00A5               	movwf	LCDPutChar@ch^(0+128)
  8467                           
  8468                           ;lcd.c: 144:     LCDWriteNibble(ch,1);
  8469  1A7F  01A0               	clrf	LCDWriteNibble@rs^(0+128)
  8470  1A80  0AA0               	incf	LCDWriteNibble@rs^(0+128),f
  8471  1A81  0825               	movf	LCDPutChar@ch^(0+128),w
  8472  1A82  160A  158A  24AC   	fcall	_LCDWriteNibble
  8473  1A85  0008               	return
  8474  1A86                     __end_of_LCDPutChar:
  8475                           
  8476                           	psect	text28
  8477  1A36                     __ptext28:	
  8478 ;; *************** function _LCDGoto *****************
  8479 ;; Defined at:
  8480 ;;		line 178 in file "lcd.c"
  8481 ;; Parameters:    Size  Location     Type
  8482 ;;  pos             1    wreg     unsigned char 
  8483 ;;  ln              1    6[BANK1 ] unsigned char 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  pos             1   11[BANK1 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0, pclath, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 300/100
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8495 ;;      Params:         0       0       1       0       0
  8496 ;;      Locals:         0       0       3       0       0
  8497 ;;      Temps:          0       0       2       0       0
  8498 ;;      Totals:         0       0       6       0       0
  8499 ;;Total ram usage:        6 bytes
  8500 ;; Hardware stack levels used: 1
  8501 ;; Hardware stack levels required when called: 6
  8502 ;; This function calls:
  8503 ;;		_LCDPutCmd
  8504 ;; This function is called by:
  8505 ;;		_main
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509  1A36                     _LCDGoto:	
  8510                           ;psect for function _LCDGoto
  8511                           
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in _LCDGoto: [wreg+status,2+status,0+pclath+cstack]
  8515                           ;LCDGoto@pos stored from wreg
  8516  1A36  00AB               	movwf	LCDGoto@pos^(0+128)
  8517                           
  8518                           ;lcd.c: 178: void LCDGoto(uint8_t pos,uint8_t ln);lcd.c: 179: {;lcd.c: 181:     if ((ln 
      +                          > (2 -1)) || (pos > (16 -1)))
  8519  1A37  3002               	movlw	2
  8520  1A38  0226               	subwf	LCDGoto@ln^(0+128),w
  8521  1A39  1803               	skipnc
  8522  1A3A  0008               	return
  8523  1A3B  3010               	movlw	16
  8524  1A3C  022B               	subwf	LCDGoto@pos^(0+128),w
  8525  1A3D  1803               	btfsc	3,0
  8526  1A3E  0008               	return
  8527                           
  8528                           ;lcd.c: 188:     LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  8529  1A3F  0326               	decf	LCDGoto@ln^(0+128),w
  8530  1A40  1903               	btfsc	3,2
  8531  1A41  2A44               	goto	l4908
  8532  1A42  3080               	movlw	128
  8533  1A43  2A45               	goto	L10
  8534  1A44                     l4908:
  8535  1A44  30C0               	movlw	192
  8536  1A45                     L10:
  8537  1A45  042B               	iorwf	LCDGoto@pos^(0+128),w
  8538  1A46  00A9               	movwf	_LCDGoto$141^(0+128)
  8539  1A47  3000               	movlw	0
  8540  1A48  00AA               	movwf	(_LCDGoto$141+1)^(0+128)
  8541  1A49  0829               	movf	_LCDGoto$141^(0+128),w
  8542  1A4A  160A  158A  231D  160A  158A  	fcall	_LCDPutCmd
  8543                           
  8544                           ;lcd.c: 191:     _delay((unsigned long)((5)*(16000000/4000.0)));
  8545  1A4F  301A               	movlw	26
  8546  1A50  1683               	bsf	3,5	;RP0=1, select bank1
  8547  1A51  1303               	bcf	3,6	;RP1=0, select bank1
  8548  1A52  00A8               	movwf	(??_LCDGoto^(0+128)+1)
  8549  1A53  30F7               	movlw	247
  8550  1A54  00A7               	movwf	??_LCDGoto^(0+128)
  8551  1A55                     u9687:
  8552  1A55  0BA7               	decfsz	??_LCDGoto^(0+128),f
  8553  1A56  2A55               	goto	u9687
  8554  1A57  0BA8               	decfsz	(??_LCDGoto^(0+128)+1),f
  8555  1A58  2A55               	goto	u9687
  8556  1A59  2A5A               	nop2
  8557  1A5A  0008               	return
  8558  1A5B                     __end_of_LCDGoto:
  8559                           
  8560                           	psect	text29
  8561  1B1D                     __ptext29:	
  8562 ;; *************** function _LCDPutCmd *****************
  8563 ;; Defined at:
  8564 ;;		line 148 in file "lcd.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  ch              1    wreg     unsigned char 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  ch              1    5[BANK1 ] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  1    wreg      void 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0, pclath, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/300
  8575 ;;		On exit  : 300/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8578 ;;      Params:         0       0       0       0       0
  8579 ;;      Locals:         0       0       1       0       0
  8580 ;;      Temps:          0       0       2       0       0
  8581 ;;      Totals:         0       0       3       0       0
  8582 ;;Total ram usage:        3 bytes
  8583 ;; Hardware stack levels used: 1
  8584 ;; Hardware stack levels required when called: 5
  8585 ;; This function calls:
  8586 ;;		_LCDWriteNibble
  8587 ;; This function is called by:
  8588 ;;		_LCD_Initialize
  8589 ;;		_LCDGoto
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593  1B1D                     _LCDPutCmd:	
  8594                           ;psect for function _LCDPutCmd
  8595                           
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
  8599                           ;LCDPutCmd@ch stored from wreg
  8600  1B1D  1683               	bsf	3,5	;RP0=1, select bank1
  8601  1B1E  1303               	bcf	3,6	;RP1=0, select bank1
  8602  1B1F  00A5               	movwf	LCDPutCmd@ch^(0+128)
  8603                           
  8604                           ;lcd.c: 148: void LCDPutCmd(uint8_t ch);lcd.c: 149: {;lcd.c: 150:     _delay((unsigned l
      +                          ong)((5)*(16000000/4000.0)));
  8605  1B20  301A               	movlw	26
  8606  1B21  1683               	bsf	3,5	;RP0=1, select bank1
  8607  1B22  1303               	bcf	3,6	;RP1=0, select bank1
  8608  1B23  00A4               	movwf	(??_LCDPutCmd^(0+128)+1)
  8609  1B24  30F7               	movlw	247
  8610  1B25  00A3               	movwf	??_LCDPutCmd^(0+128)
  8611  1B26                     u9697:
  8612  1B26  0BA3               	decfsz	??_LCDPutCmd^(0+128),f
  8613  1B27  2B26               	goto	u9697
  8614  1B28  0BA4               	decfsz	(??_LCDPutCmd^(0+128)+1),f
  8615  1B29  2B26               	goto	u9697
  8616  1B2A  2B2B               	nop2
  8617                           
  8618                           ;lcd.c: 153:     LCDWriteNibble(ch,0);
  8619  1B2B  1683               	bsf	3,5	;RP0=1, select bank1
  8620  1B2C  1303               	bcf	3,6	;RP1=0, select bank1
  8621  1B2D  01A0               	clrf	LCDWriteNibble@rs^(0+128)
  8622  1B2E  0825               	movf	LCDPutCmd@ch^(0+128),w
  8623  1B2F  160A  158A  24AC  160A  158A  	fcall	_LCDWriteNibble
  8624                           
  8625                           ;lcd.c: 156:     ch = (ch << 4);
  8626  1B34  1683               	bsf	3,5	;RP0=1, select bank1
  8627  1B35  0825               	movf	LCDPutCmd@ch^(0+128),w
  8628  1B36  00A3               	movwf	??_LCDPutCmd^(0+128)
  8629  1B37  3003               	movlw	3
  8630  1B38                     u7045:
  8631  1B38  1003               	clrc
  8632  1B39  0DA3               	rlf	??_LCDPutCmd^(0+128),f
  8633  1B3A  3EFF               	addlw	-1
  8634  1B3B  1D03               	skipz
  8635  1B3C  2B38               	goto	u7045
  8636  1B3D  1003               	clrc
  8637  1B3E  0D23               	rlf	??_LCDPutCmd^(0+128),w
  8638  1B3F  00A4               	movwf	(??_LCDPutCmd+1)^(0+128)
  8639  1B40  0824               	movf	(??_LCDPutCmd+1)^(0+128),w
  8640  1B41  00A5               	movwf	LCDPutCmd@ch^(0+128)
  8641                           
  8642                           ;lcd.c: 158:     _delay((unsigned long)((1)*(16000000/4000.0)));
  8643  1B42  3006               	movlw	6
  8644  1B43  1683               	bsf	3,5	;RP0=1, select bank1
  8645  1B44  1303               	bcf	3,6	;RP1=0, select bank1
  8646  1B45  00A4               	movwf	(??_LCDPutCmd^(0+128)+1)
  8647  1B46  302F               	movlw	47
  8648  1B47  00A3               	movwf	??_LCDPutCmd^(0+128)
  8649  1B48                     u9707:
  8650  1B48  0BA3               	decfsz	??_LCDPutCmd^(0+128),f
  8651  1B49  2B48               	goto	u9707
  8652  1B4A  0BA4               	decfsz	(??_LCDPutCmd^(0+128)+1),f
  8653  1B4B  2B48               	goto	u9707
  8654  1B4C  2B4D               	nop2
  8655                           
  8656                           ;lcd.c: 161:     LCDWriteNibble(ch,0);
  8657  1B4D  1683               	bsf	3,5	;RP0=1, select bank1
  8658  1B4E  1303               	bcf	3,6	;RP1=0, select bank1
  8659  1B4F  01A0               	clrf	LCDWriteNibble@rs^(0+128)
  8660  1B50  0825               	movf	LCDPutCmd@ch^(0+128),w
  8661  1B51  160A  158A  24AC   	fcall	_LCDWriteNibble
  8662  1B54  0008               	return
  8663  1B55                     __end_of_LCDPutCmd:
  8664                           
  8665                           	psect	text30
  8666  1CAC                     __ptext30:	
  8667 ;; *************** function _LCDWriteNibble *****************
  8668 ;; Defined at:
  8669 ;;		line 80 in file "lcd.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  ch              1    wreg     unsigned char 
  8672 ;;  rs              1    0[BANK1 ] unsigned char 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  ch              1    2[BANK1 ] unsigned char 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  1    wreg      void 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 300/900
  8681 ;;		On exit  : 300/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8684 ;;      Params:         0       0       1       0       0
  8685 ;;      Locals:         0       0       1       0       0
  8686 ;;      Temps:          0       0       1       0       0
  8687 ;;      Totals:         0       0       3       0       0
  8688 ;;Total ram usage:        3 bytes
  8689 ;; Hardware stack levels used: 1
  8690 ;; Hardware stack levels required when called: 4
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_LCDPutChar
  8695 ;;		_LCDPutCmd
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699  1CAC                     _LCDWriteNibble:	
  8700                           ;psect for function _LCDWriteNibble
  8701                           
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0]
  8705                           ;LCDWriteNibble@ch stored from wreg
  8706  1CAC  00A2               	movwf	LCDWriteNibble@ch^(0+128)
  8707                           
  8708                           ;lcd.c: 80: void LCDWriteNibble(uint8_t ch,uint8_t rs);lcd.c: 81: {;lcd.c: 83:     ch = 
      +                          (ch & 0xF0);
  8709  1CAD  0822               	movf	LCDWriteNibble@ch^(0+128),w
  8710  1CAE  39F0               	andlw	240
  8711  1CAF  00A1               	movwf	??_LCDWriteNibble^(0+128)
  8712  1CB0  0821               	movf	??_LCDWriteNibble^(0+128),w
  8713  1CB1  00A2               	movwf	LCDWriteNibble@ch^(0+128)
  8714                           
  8715                           ;lcd.c: 86:     PORTD = (PORTD & 0x0F);
  8716  1CB2  1283               	bcf	3,5	;RP0=0, select bank0
  8717  1CB3  0808               	movf	8,w	;volatile
  8718  1CB4  390F               	andlw	15
  8719  1CB5  0088               	movwf	8	;volatile
  8720                           
  8721                           ;lcd.c: 87:     PORTDbits.RD4 = 0;
  8722  1CB6  1208               	bcf	8,4	;volatile
  8723                           
  8724                           ;lcd.c: 88:     PORTDbits.RD5 = 0;
  8725  1CB7  1288               	bcf	8,5	;volatile
  8726                           
  8727                           ;lcd.c: 89:     PORTDbits.RD6 = 0;
  8728  1CB8  1308               	bcf	8,6	;volatile
  8729                           
  8730                           ;lcd.c: 90:     PORTDbits.RD7 = 0;
  8731  1CB9  1388               	bcf	8,7	;volatile
  8732                           
  8733                           ;lcd.c: 94:     if(((ch & 0x80)>>7)==1){
  8734  1CBA  1683               	bsf	3,5	;RP0=1, select bank1
  8735  1CBB  0822               	movf	LCDWriteNibble@ch^(0+128),w
  8736  1CBC  00A1               	movwf	??_LCDWriteNibble^(0+128)
  8737  1CBD  3007               	movlw	7
  8738  1CBE                     u6935:
  8739  1CBE  1003               	clrc
  8740  1CBF  0CA1               	rrf	??_LCDWriteNibble^(0+128),f
  8741  1CC0  3EFF               	addlw	-1
  8742  1CC1  1D03               	skipz
  8743  1CC2  2CBE               	goto	u6935
  8744  1CC3  1C21               	btfss	??_LCDWriteNibble^(0+128),0
  8745  1CC4  2CC8               	goto	l92
  8746                           
  8747                           ;lcd.c: 95:         PORTDbits.RD7 = 1;
  8748  1CC5  1283               	bcf	3,5	;RP0=0, select bank0
  8749  1CC6  1788               	bsf	8,7	;volatile
  8750                           
  8751                           ;lcd.c: 96:     } else{
  8752  1CC7  2CCA               	goto	l4054
  8753  1CC8                     l92:
  8754                           
  8755                           ;lcd.c: 97:         PORTDbits.RD7 = 0;
  8756  1CC8  1283               	bcf	3,5	;RP0=0, select bank0
  8757  1CC9  1388               	bcf	8,7	;volatile
  8758  1CCA                     l4054:
  8759                           
  8760                           ;lcd.c: 100:     if(((ch & 0x40)>>6)==1){
  8761  1CCA  1683               	bsf	3,5	;RP0=1, select bank1
  8762  1CCB  0822               	movf	LCDWriteNibble@ch^(0+128),w
  8763  1CCC  00A1               	movwf	??_LCDWriteNibble^(0+128)
  8764  1CCD  3006               	movlw	6
  8765  1CCE                     u6955:
  8766  1CCE  1003               	clrc
  8767  1CCF  0CA1               	rrf	??_LCDWriteNibble^(0+128),f
  8768  1CD0  3EFF               	addlw	-1
  8769  1CD1  1D03               	skipz
  8770  1CD2  2CCE               	goto	u6955
  8771  1CD3  1C21               	btfss	??_LCDWriteNibble^(0+128),0
  8772  1CD4  2CD8               	goto	l94
  8773                           
  8774                           ;lcd.c: 101:         PORTDbits.RD6 = 1;
  8775  1CD5  1283               	bcf	3,5	;RP0=0, select bank0
  8776  1CD6  1708               	bsf	8,6	;volatile
  8777                           
  8778                           ;lcd.c: 102:     } else{
  8779  1CD7  2CDA               	goto	l4058
  8780  1CD8                     l94:
  8781                           
  8782                           ;lcd.c: 103:         PORTDbits.RD6 = 0;
  8783  1CD8  1283               	bcf	3,5	;RP0=0, select bank0
  8784  1CD9  1308               	bcf	8,6	;volatile
  8785  1CDA                     l4058:
  8786                           
  8787                           ;lcd.c: 106:     if(((ch & 0x20)>>5)==1){
  8788  1CDA  1683               	bsf	3,5	;RP0=1, select bank1
  8789  1CDB  0822               	movf	LCDWriteNibble@ch^(0+128),w
  8790  1CDC  00A1               	movwf	??_LCDWriteNibble^(0+128)
  8791  1CDD  3005               	movlw	5
  8792  1CDE                     u6975:
  8793  1CDE  1003               	clrc
  8794  1CDF  0CA1               	rrf	??_LCDWriteNibble^(0+128),f
  8795  1CE0  3EFF               	addlw	-1
  8796  1CE1  1D03               	skipz
  8797  1CE2  2CDE               	goto	u6975
  8798  1CE3  1C21               	btfss	??_LCDWriteNibble^(0+128),0
  8799  1CE4  2CE8               	goto	l96
  8800                           
  8801                           ;lcd.c: 107:         PORTDbits.RD5 = 1;
  8802  1CE5  1283               	bcf	3,5	;RP0=0, select bank0
  8803  1CE6  1688               	bsf	8,5	;volatile
  8804                           
  8805                           ;lcd.c: 108:     } else{
  8806  1CE7  2CEA               	goto	l4062
  8807  1CE8                     l96:
  8808                           
  8809                           ;lcd.c: 109:         PORTDbits.RD5 = 0;
  8810  1CE8  1283               	bcf	3,5	;RP0=0, select bank0
  8811  1CE9  1288               	bcf	8,5	;volatile
  8812  1CEA                     l4062:
  8813                           
  8814                           ;lcd.c: 112:     if(((ch & 0x10)>>4)==1){
  8815  1CEA  1683               	bsf	3,5	;RP0=1, select bank1
  8816  1CEB  0822               	movf	LCDWriteNibble@ch^(0+128),w
  8817  1CEC  00A1               	movwf	??_LCDWriteNibble^(0+128)
  8818  1CED  3004               	movlw	4
  8819  1CEE                     u6995:
  8820  1CEE  1003               	clrc
  8821  1CEF  0CA1               	rrf	??_LCDWriteNibble^(0+128),f
  8822  1CF0  3EFF               	addlw	-1
  8823  1CF1  1D03               	skipz
  8824  1CF2  2CEE               	goto	u6995
  8825  1CF3  1C21               	btfss	??_LCDWriteNibble^(0+128),0
  8826  1CF4  2CF8               	goto	l98
  8827                           
  8828                           ;lcd.c: 113:         PORTDbits.RD4 = 1;
  8829  1CF5  1283               	bcf	3,5	;RP0=0, select bank0
  8830  1CF6  1608               	bsf	8,4	;volatile
  8831                           
  8832                           ;lcd.c: 114:     } else{
  8833  1CF7  2CFA               	goto	l4066
  8834  1CF8                     l98:
  8835                           
  8836                           ;lcd.c: 115:         PORTDbits.RD4 = 0;
  8837  1CF8  1283               	bcf	3,5	;RP0=0, select bank0
  8838  1CF9  1208               	bcf	8,4	;volatile
  8839  1CFA                     l4066:
  8840                           
  8841                           ;lcd.c: 121:     PORTDbits.RD1 = rs;
  8842  1CFA  1683               	bsf	3,5	;RP0=1, select bank1
  8843  1CFB  0C20               	rrf	LCDWriteNibble@rs^(0+128),w
  8844  1CFC  1283               	bcf	3,5	;RP0=0, select bank0
  8845  1CFD  1C03               	skipc
  8846  1CFE  1088               	bcf	8,1	;volatile
  8847  1CFF  1803               	skipnc
  8848  1D00  1488               	bsf	8,1	;volatile
  8849                           
  8850                           ;lcd.c: 124:     PORTDbits.RD2 = 0;
  8851  1D01  1108               	bcf	8,2	;volatile
  8852                           
  8853                           ;lcd.c: 127:     PORTDbits.RD3 = 1;
  8854  1D02  1588               	bsf	8,3	;volatile
  8855                           
  8856                           ;lcd.c: 130:     PORTDbits.RD3 = 0;
  8857  1D03  1188               	bcf	8,3	;volatile
  8858  1D04  0008               	return
  8859  1D05                     __end_of_LCDWriteNibble:
  8860                           
  8861                           	psect	text31
  8862  1B55                     __ptext31:	
  8863 ;; *************** function _ISR *****************
  8864 ;; Defined at:
  8865 ;;		line 123 in file "newmain.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;		None
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;		None
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  1    wreg      void 
  8872 ;; Registers used:
  8873 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 300/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8879 ;;      Params:         0       0       0       0       0
  8880 ;;      Locals:         0       0       0       0       0
  8881 ;;      Temps:          0       3       0       0       0
  8882 ;;      Totals:         0       3       0       0       0
  8883 ;;Total ram usage:        3 bytes
  8884 ;; Hardware stack levels used: 1
  8885 ;; Hardware stack levels required when called: 3
  8886 ;; This function calls:
  8887 ;;		_get_val
  8888 ;; This function is called by:
  8889 ;;		Interrupt level 1
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893  1B55                     _ISR:	
  8894                           ;psect for function _ISR
  8895                           
  8896                           
  8897                           ;newmain.c: 125:     if(INTF && INTE)
  8898  1B55  188B               	btfsc	11,1	;volatile
  8899  1B56  1E0B               	btfss	11,4	;volatile
  8900  1B57  2B5F               	goto	i1l3962
  8901                           
  8902                           ;newmain.c: 126:     {;newmain.c: 127:         Pulse++;
  8903  1B58  3001               	movlw	1
  8904  1B59  07C7               	addwf	_Pulse,f
  8905  1B5A  1803               	skipnc
  8906  1B5B  0AC8               	incf	_Pulse+1,f
  8907  1B5C  3000               	movlw	0
  8908  1B5D  07C8               	addwf	_Pulse+1,f
  8909                           
  8910                           ;newmain.c: 128:         INTF = 0;
  8911  1B5E  108B               	bcf	11,1	;volatile
  8912  1B5F                     i1l3962:
  8913                           
  8914                           ;newmain.c: 130:     if(TMR1IF && TMR1IE)
  8915  1B5F  1C0C               	btfss	12,0	;volatile
  8916  1B60  2B86               	goto	i1l72
  8917  1B61  1683               	bsf	3,5	;RP0=1, select bank1
  8918  1B62  1C0C               	btfss	12,0	;volatile
  8919  1B63  2B86               	goto	i1l72
  8920                           
  8921                           ;newmain.c: 131:     {;newmain.c: 132:         Velocity = get_val();
  8922  1B64  160A  158A  2390  160A  158A  	fcall	_get_val
  8923  1B69  083D               	movf	?_get_val+3,w
  8924  1B6A  1683               	bsf	3,5	;RP0=1, select bank3
  8925  1B6B  1703               	bsf	3,6	;RP1=1, select bank3
  8926  1B6C  00C6               	movwf	(_Velocity+3)^(0+384)
  8927  1B6D  1283               	bcf	3,5	;RP0=0, select bank0
  8928  1B6E  1303               	bcf	3,6	;RP1=0, select bank0
  8929  1B6F  083C               	movf	?_get_val+2,w
  8930  1B70  1683               	bsf	3,5	;RP0=1, select bank3
  8931  1B71  1703               	bsf	3,6	;RP1=1, select bank3
  8932  1B72  00C5               	movwf	(_Velocity+2)^(0+384)
  8933  1B73  1283               	bcf	3,5	;RP0=0, select bank0
  8934  1B74  1303               	bcf	3,6	;RP1=0, select bank0
  8935  1B75  083B               	movf	?_get_val+1,w
  8936  1B76  1683               	bsf	3,5	;RP0=1, select bank3
  8937  1B77  1703               	bsf	3,6	;RP1=1, select bank3
  8938  1B78  00C4               	movwf	(_Velocity+1)^(0+384)
  8939  1B79  1283               	bcf	3,5	;RP0=0, select bank0
  8940  1B7A  1303               	bcf	3,6	;RP1=0, select bank0
  8941  1B7B  083A               	movf	?_get_val,w
  8942  1B7C  1683               	bsf	3,5	;RP0=1, select bank3
  8943  1B7D  1703               	bsf	3,6	;RP1=1, select bank3
  8944  1B7E  00C3               	movwf	_Velocity^(0+384)
  8945                           
  8946                           ;newmain.c: 133:         TMR1 = 3036;
  8947  1B7F  300B               	movlw	11
  8948  1B80  1283               	bcf	3,5	;RP0=0, select bank0
  8949  1B81  1303               	bcf	3,6	;RP1=0, select bank0
  8950  1B82  008F               	movwf	15	;volatile
  8951  1B83  30DC               	movlw	220
  8952  1B84  008E               	movwf	14	;volatile
  8953                           
  8954                           ;newmain.c: 134:         TMR1IF = 0;
  8955  1B85  100C               	bcf	12,0	;volatile
  8956  1B86                     i1l72:
  8957  1B86  1283               	bcf	3,5	;RP0=0, select bank0
  8958  1B87  0844               	movf	??_ISR+2,w
  8959  1B88  00FF               	movwf	127
  8960  1B89  0843               	movf	??_ISR+1,w
  8961  1B8A  008A               	movwf	10
  8962  1B8B  0E42               	swapf	??_ISR,w
  8963  1B8C  0083               	movwf	3
  8964  1B8D  0EFE               	swapf	126,f
  8965  1B8E  0E7E               	swapf	126,w
  8966  1B8F  0009               	retfie
  8967  1B90                     __end_of_ISR:
  8968                           
  8969                           	psect	intentry
  8970  0004                     __pintentry:	
  8971                           ;incstack = 0
  8972                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8973                           
  8974  0004                     interrupt_function:
  8975  007E                     saved_w	set	btemp
  8976  0004  00FE               	movwf	btemp
  8977  0005  0E03               	swapf	3,w
  8978  0006  1283               	bcf	3,5	;RP0=0, select bank0
  8979  0007  1303               	bcf	3,6	;RP1=0, select bank0
  8980  0008  00C2               	movwf	??_ISR
  8981  0009  080A               	movf	10,w
  8982  000A  00C3               	movwf	??_ISR+1
  8983  000B  087F               	movf	btemp+1,w
  8984  000C  00C4               	movwf	??_ISR+2
  8985  000D  160A  158A  2B55   	ljmp	_ISR
  8986                           
  8987                           	psect	text32
  8988  1B90                     __ptext32:	
  8989 ;; *************** function _get_val *****************
  8990 ;; Defined at:
  8991 ;;		line 104 in file "newmain.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;		None
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;  rpm             4   30[BANK0 ] float 
  8996 ;; Return value:  Size  Location     Type
  8997 ;;                  4   26[BANK0 ] float 
  8998 ;; Registers used:
  8999 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9000 ;; Tracked objects:
  9001 ;;		On entry : 300/100
  9002 ;;		On exit  : 300/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9005 ;;      Params:         0       4       0       0       0
  9006 ;;      Locals:         0       4       0       0       0
  9007 ;;      Temps:          0       0       0       0       0
  9008 ;;      Totals:         0       8       0       0       0
  9009 ;;Total ram usage:        8 bytes
  9010 ;; Hardware stack levels used: 1
  9011 ;; Hardware stack levels required when called: 2
  9012 ;; This function calls:
  9013 ;;		i1___flmul
  9014 ;;		i1___xxtofl
  9015 ;; This function is called by:
  9016 ;;		_ISR
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020  1B90                     _get_val:	
  9021                           ;psect for function _get_val
  9022                           
  9023                           
  9024                           ;newmain.c: 106:     float rpm;;newmain.c: 107:     DeltaPulse = Pulse - PrePulse;
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _get_val: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9028  1B90  1283               	bcf	3,5	;RP0=0, select bank0
  9029  1B91  0845               	movf	_PrePulse,w
  9030  1B92  0247               	subwf	_Pulse,w
  9031  1B93  00C9               	movwf	_DeltaPulse
  9032  1B94  0846               	movf	_PrePulse+1,w
  9033  1B95  1C03               	skipc
  9034  1B96  0A46               	incf	_PrePulse+1,w
  9035  1B97  0248               	subwf	_Pulse+1,w
  9036  1B98  00CA               	movwf	_DeltaPulse+1
  9037                           
  9038                           ;newmain.c: 108:     PrePulse = Pulse;
  9039  1B99  0848               	movf	_Pulse+1,w
  9040  1B9A  00C6               	movwf	_PrePulse+1
  9041  1B9B  0847               	movf	_Pulse,w
  9042  1B9C  00C5               	movwf	_PrePulse
  9043                           
  9044                           ;newmain.c: 109:     rpm = 6.0*(float)DeltaPulse;
  9045  1B9D  3040               	movlw	64
  9046  1B9E  00A3               	movwf	i1___flmul@b+3
  9047  1B9F  30C0               	movlw	192
  9048  1BA0  00A2               	movwf	i1___flmul@b+2
  9049  1BA1  3000               	movlw	0
  9050  1BA2  00A1               	movwf	i1___flmul@b+1
  9051  1BA3  3000               	movlw	0
  9052  1BA4  00A0               	movwf	i1___flmul@b
  9053  1BA5  0849               	movf	_DeltaPulse,w
  9054  1BA6  00F0               	movwf	i1___xxtofl@val
  9055  1BA7  084A               	movf	_DeltaPulse+1,w
  9056  1BA8  00F1               	movwf	i1___xxtofl@val+1
  9057  1BA9  01F2               	clrf	i1___xxtofl@val+2
  9058  1BAA  01F3               	clrf	i1___xxtofl@val+3
  9059  1BAB  3000               	movlw	0
  9060  1BAC  160A  158A  26BA  160A  158A  	fcall	i1___xxtofl
  9061  1BB1  0873               	movf	?i1___xxtofl+3,w
  9062  1BB2  00A7               	movwf	i1___flmul@a+3
  9063  1BB3  0872               	movf	?i1___xxtofl+2,w
  9064  1BB4  00A6               	movwf	i1___flmul@a+2
  9065  1BB5  0871               	movf	?i1___xxtofl+1,w
  9066  1BB6  00A5               	movwf	i1___flmul@a+1
  9067  1BB7  0870               	movf	?i1___xxtofl,w
  9068  1BB8  00A4               	movwf	i1___flmul@a
  9069  1BB9  160A  118A  250B   	fcall	i1___flmul
  9070  1BBC  0823               	movf	?i1___flmul+3,w
  9071  1BBD  00C1               	movwf	get_val@rpm+3
  9072  1BBE  0822               	movf	?i1___flmul+2,w
  9073  1BBF  00C0               	movwf	get_val@rpm+2
  9074  1BC0  0821               	movf	?i1___flmul+1,w
  9075  1BC1  00BF               	movwf	get_val@rpm+1
  9076  1BC2  0820               	movf	?i1___flmul,w
  9077  1BC3  00BE               	movwf	get_val@rpm
  9078                           
  9079                           ;newmain.c: 110:     return rpm;
  9080  1BC4  0841               	movf	get_val@rpm+3,w
  9081  1BC5  00BD               	movwf	?_get_val+3
  9082  1BC6  0840               	movf	get_val@rpm+2,w
  9083  1BC7  00BC               	movwf	?_get_val+2
  9084  1BC8  083F               	movf	get_val@rpm+1,w
  9085  1BC9  00BB               	movwf	?_get_val+1
  9086  1BCA  083E               	movf	get_val@rpm,w
  9087  1BCB  00BA               	movwf	?_get_val
  9088  1BCC  0008               	return
  9089  1BCD                     __end_of_get_val:
  9090                           
  9091                           	psect	text33
  9092  1EBA                     __ptext33:	
  9093 ;; *************** function i1___xxtofl *****************
  9094 ;; Defined at:
  9095 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\xxtofl.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  sign            1    wreg     unsigned char 
  9098 ;;  val             4    0[COMMON] long 
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  sign            1    8[COMMON] unsigned char 
  9101 ;;  arg             4   10[COMMON] unsigned long 
  9102 ;;  exp             1    9[COMMON] unsigned char 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  4    0[COMMON] unsigned char 
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0
  9107 ;; Tracked objects:
  9108 ;;		On entry : 300/0
  9109 ;;		On exit  : 300/0
  9110 ;;		Unchanged: 300/0
  9111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9112 ;;      Params:         4       0       0       0       0
  9113 ;;      Locals:         6       0       0       0       0
  9114 ;;      Temps:          4       0       0       0       0
  9115 ;;      Totals:        14       0       0       0       0
  9116 ;;Total ram usage:       14 bytes
  9117 ;; Hardware stack levels used: 1
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_get_val
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125  1EBA                     i1___xxtofl:	
  9126                           ;psect for function i1___xxtofl
  9127                           
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in i1___xxtofl: [wreg+status,2+status,0]
  9131                           ;i1___xxtofl@sign stored from wreg
  9132  1EBA  00F8               	movwf	i1___xxtofl@sign
  9133  1EBB  0878               	movf	i1___xxtofl@sign,w
  9134  1EBC  1D03               	btfss	3,2
  9135  1EBD  1FF3               	btfss	i1___xxtofl@val+3,7
  9136  1EBE  2ECF               	goto	i1l3524
  9137  1EBF  0970               	comf	i1___xxtofl@val,w
  9138  1EC0  00FA               	movwf	i1___xxtofl@arg
  9139  1EC1  0971               	comf	i1___xxtofl@val+1,w
  9140  1EC2  00FB               	movwf	i1___xxtofl@arg+1
  9141  1EC3  0972               	comf	i1___xxtofl@val+2,w
  9142  1EC4  00FC               	movwf	i1___xxtofl@arg+2
  9143  1EC5  0973               	comf	i1___xxtofl@val+3,w
  9144  1EC6  00FD               	movwf	i1___xxtofl@arg+3
  9145  1EC7  0AFA               	incf	i1___xxtofl@arg,f
  9146  1EC8  1903               	skipnz
  9147  1EC9  0AFB               	incf	i1___xxtofl@arg+1,f
  9148  1ECA  1903               	skipnz
  9149  1ECB  0AFC               	incf	i1___xxtofl@arg+2,f
  9150  1ECC  1903               	skipnz
  9151  1ECD  0AFD               	incf	i1___xxtofl@arg+3,f
  9152  1ECE  2ED7               	goto	i1l810
  9153  1ECF                     i1l3524:
  9154  1ECF  0873               	movf	i1___xxtofl@val+3,w
  9155  1ED0  00FD               	movwf	i1___xxtofl@arg+3
  9156  1ED1  0872               	movf	i1___xxtofl@val+2,w
  9157  1ED2  00FC               	movwf	i1___xxtofl@arg+2
  9158  1ED3  0871               	movf	i1___xxtofl@val+1,w
  9159  1ED4  00FB               	movwf	i1___xxtofl@arg+1
  9160  1ED5  0870               	movf	i1___xxtofl@val,w
  9161  1ED6  00FA               	movwf	i1___xxtofl@arg
  9162  1ED7                     i1l810:
  9163  1ED7  0873               	movf	i1___xxtofl@val+3,w
  9164  1ED8  0472               	iorwf	i1___xxtofl@val+2,w
  9165  1ED9  0471               	iorwf	i1___xxtofl@val+1,w
  9166  1EDA  0470               	iorwf	i1___xxtofl@val,w
  9167  1EDB  1D03               	skipz
  9168  1EDC  2EE6               	goto	i1l3530
  9169  1EDD  3000               	movlw	0
  9170  1EDE  00F3               	movwf	?i1___xxtofl+3
  9171  1EDF  3000               	movlw	0
  9172  1EE0  00F2               	movwf	?i1___xxtofl+2
  9173  1EE1  3000               	movlw	0
  9174  1EE2  00F1               	movwf	?i1___xxtofl+1
  9175  1EE3  3000               	movlw	0
  9176  1EE4  00F0               	movwf	?i1___xxtofl
  9177  1EE5  0008               	return
  9178  1EE6                     i1l3530:
  9179  1EE6  3096               	movlw	150
  9180  1EE7  00F4               	movwf	??i1___xxtofl
  9181  1EE8  0874               	movf	??i1___xxtofl,w
  9182  1EE9  00F9               	movwf	i1___xxtofl@exp
  9183  1EEA                     i1l3534:
  9184  1EEA  30FE               	movlw	254
  9185  1EEB  057D               	andwf	i1___xxtofl@arg+3,w
  9186  1EEC  1903               	btfsc	3,2
  9187  1EED  2F17               	goto	i1l816
  9188  1EEE  3001               	movlw	1
  9189  1EEF  00F4               	movwf	??i1___xxtofl
  9190  1EF0  0874               	movf	??i1___xxtofl,w
  9191  1EF1  07F9               	addwf	i1___xxtofl@exp,f
  9192  1EF2  3001               	movlw	1
  9193  1EF3                     u615_25:
  9194  1EF3  1003               	clrc
  9195  1EF4  0CFD               	rrf	i1___xxtofl@arg+3,f
  9196  1EF5  0CFC               	rrf	i1___xxtofl@arg+2,f
  9197  1EF6  0CFB               	rrf	i1___xxtofl@arg+1,f
  9198  1EF7  0CFA               	rrf	i1___xxtofl@arg,f
  9199  1EF8  3EFF               	addlw	-1
  9200  1EF9  1D03               	skipz
  9201  1EFA  2EF3               	goto	u615_25
  9202  1EFB  2EEA               	goto	i1l3534
  9203  1EFC                     i1l3536:
  9204  1EFC  3001               	movlw	1
  9205  1EFD  00F4               	movwf	??i1___xxtofl
  9206  1EFE  0874               	movf	??i1___xxtofl,w
  9207  1EFF  07F9               	addwf	i1___xxtofl@exp,f
  9208  1F00  3001               	movlw	1
  9209  1F01  07FA               	addwf	i1___xxtofl@arg,f
  9210  1F02  3000               	movlw	0
  9211  1F03  1803               	skipnc
  9212  1F04  3001               	movlw	1
  9213  1F05  07FB               	addwf	i1___xxtofl@arg+1,f
  9214  1F06  3000               	movlw	0
  9215  1F07  1803               	skipnc
  9216  1F08  3001               	movlw	1
  9217  1F09  07FC               	addwf	i1___xxtofl@arg+2,f
  9218  1F0A  3000               	movlw	0
  9219  1F0B  1803               	skipnc
  9220  1F0C  3001               	movlw	1
  9221  1F0D  07FD               	addwf	i1___xxtofl@arg+3,f
  9222  1F0E  3001               	movlw	1
  9223  1F0F                     u617_25:
  9224  1F0F  1003               	clrc
  9225  1F10  0CFD               	rrf	i1___xxtofl@arg+3,f
  9226  1F11  0CFC               	rrf	i1___xxtofl@arg+2,f
  9227  1F12  0CFB               	rrf	i1___xxtofl@arg+1,f
  9228  1F13  0CFA               	rrf	i1___xxtofl@arg,f
  9229  1F14  3EFF               	addlw	-1
  9230  1F15  1D03               	skipz
  9231  1F16  2F0F               	goto	u617_25
  9232  1F17                     i1l816:
  9233  1F17  30FF               	movlw	255
  9234  1F18  057D               	andwf	i1___xxtofl@arg+3,w
  9235  1F19  1903               	btfsc	3,2
  9236  1F1A  2F2B               	goto	i1l3544
  9237  1F1B  2EFC               	goto	i1l3536
  9238  1F1C                     i1l3546:
  9239  1F1C  3002               	movlw	2
  9240  1F1D  0279               	subwf	i1___xxtofl@exp,w
  9241  1F1E  1C03               	btfss	3,0
  9242  1F1F  2F2D               	goto	i1l823
  9243  1F20  3001               	movlw	1
  9244  1F21  02F9               	subwf	i1___xxtofl@exp,f
  9245  1F22  3001               	movlw	1
  9246  1F23  00F4               	movwf	??i1___xxtofl
  9247  1F24                     u619_25:
  9248  1F24  1003               	clrc
  9249  1F25  0DFA               	rlf	i1___xxtofl@arg,f
  9250  1F26  0DFB               	rlf	i1___xxtofl@arg+1,f
  9251  1F27  0DFC               	rlf	i1___xxtofl@arg+2,f
  9252  1F28  0DFD               	rlf	i1___xxtofl@arg+3,f
  9253  1F29  0BF4               	decfsz	??i1___xxtofl,f
  9254  1F2A  2F24               	goto	u619_25
  9255  1F2B                     i1l3544:
  9256  1F2B  1FFC               	btfss	i1___xxtofl@arg+2,7
  9257  1F2C  2F1C               	goto	i1l3546
  9258  1F2D                     i1l823:
  9259  1F2D  1879               	btfsc	i1___xxtofl@exp,0
  9260  1F2E  2F37               	goto	i1l824
  9261  1F2F  30FF               	movlw	255
  9262  1F30  05FA               	andwf	i1___xxtofl@arg,f
  9263  1F31  30FF               	movlw	255
  9264  1F32  05FB               	andwf	i1___xxtofl@arg+1,f
  9265  1F33  307F               	movlw	127
  9266  1F34  05FC               	andwf	i1___xxtofl@arg+2,f
  9267  1F35  30FF               	movlw	255
  9268  1F36  05FD               	andwf	i1___xxtofl@arg+3,f
  9269  1F37                     i1l824:
  9270  1F37  1003               	clrc
  9271  1F38  0CF9               	rrf	i1___xxtofl@exp,f
  9272  1F39  0879               	movf	i1___xxtofl@exp,w
  9273  1F3A  00F4               	movwf	??i1___xxtofl
  9274  1F3B  01F5               	clrf	??i1___xxtofl+1
  9275  1F3C  01F6               	clrf	??i1___xxtofl+2
  9276  1F3D  01F7               	clrf	??i1___xxtofl+3
  9277  1F3E  3018               	movlw	24
  9278  1F3F                     u623_25:
  9279  1F3F  1003               	clrc
  9280  1F40  0DF4               	rlf	??i1___xxtofl,f
  9281  1F41  0DF5               	rlf	??i1___xxtofl+1,f
  9282  1F42  0DF6               	rlf	??i1___xxtofl+2,f
  9283  1F43  0DF7               	rlf	??i1___xxtofl+3,f
  9284  1F44  3EFF               	addlw	-1
  9285  1F45  1D03               	skipz
  9286  1F46  2F3F               	goto	u623_25
  9287  1F47  0874               	movf	??i1___xxtofl,w
  9288  1F48  04FA               	iorwf	i1___xxtofl@arg,f
  9289  1F49  0875               	movf	??i1___xxtofl+1,w
  9290  1F4A  04FB               	iorwf	i1___xxtofl@arg+1,f
  9291  1F4B  0876               	movf	??i1___xxtofl+2,w
  9292  1F4C  04FC               	iorwf	i1___xxtofl@arg+2,f
  9293  1F4D  0877               	movf	??i1___xxtofl+3,w
  9294  1F4E  04FD               	iorwf	i1___xxtofl@arg+3,f
  9295  1F4F  0878               	movf	i1___xxtofl@sign,w
  9296  1F50  1D03               	btfss	3,2
  9297  1F51  1FF3               	btfss	i1___xxtofl@val+3,7
  9298  1F52  2F54               	goto	i1l3558
  9299  1F53  17FD               	bsf	i1___xxtofl@arg+3,7
  9300  1F54                     i1l3558:
  9301  1F54  087D               	movf	i1___xxtofl@arg+3,w
  9302  1F55  00F3               	movwf	?i1___xxtofl+3
  9303  1F56  087C               	movf	i1___xxtofl@arg+2,w
  9304  1F57  00F2               	movwf	?i1___xxtofl+2
  9305  1F58  087B               	movf	i1___xxtofl@arg+1,w
  9306  1F59  00F1               	movwf	?i1___xxtofl+1
  9307  1F5A  087A               	movf	i1___xxtofl@arg,w
  9308  1F5B  00F0               	movwf	?i1___xxtofl
  9309  1F5C  0008               	return
  9310  1F5D                     __end_ofi1___xxtofl:
  9311                           
  9312                           	psect	text34
  9313  150B                     __ptext34:	
  9314 ;; *************** function i1___flmul *****************
  9315 ;; Defined at:
  9316 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\sprcmul.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;  b               4    0[BANK0 ] unsigned char 
  9319 ;;  a               4    4[BANK0 ] unsigned char 
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;  prod            4   20[BANK0 ] struct .
  9322 ;;  grs             4   15[BANK0 ] unsigned long 
  9323 ;;  temp            2   24[BANK0 ] struct .
  9324 ;;  bexp            1   19[BANK0 ] unsigned char 
  9325 ;;  aexp            1   14[BANK0 ] unsigned char 
  9326 ;;  sign            1   13[BANK0 ] unsigned char 
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  4    0[BANK0 ] unsigned char 
  9329 ;; Registers used:
  9330 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 300/0
  9333 ;;		On exit  : 300/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9336 ;;      Params:         0       8       0       0       0
  9337 ;;      Locals:         0      13       0       0       0
  9338 ;;      Temps:          0       5       0       0       0
  9339 ;;      Totals:         0      26       0       0       0
  9340 ;;Total ram usage:       26 bytes
  9341 ;; Hardware stack levels used: 1
  9342 ;; Hardware stack levels required when called: 1
  9343 ;; This function calls:
  9344 ;;		i1__Umul8_16
  9345 ;; This function is called by:
  9346 ;;		_get_val
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350  150B                     i1___flmul:	
  9351                           ;psect for function i1___flmul
  9352                           
  9353                           
  9354                           ;incstack = 0
  9355                           ; Regs used in i1___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9356  150B  0823               	movf	i1___flmul@b+3,w
  9357  150C  3980               	andlw	128
  9358  150D  00A8               	movwf	??i1___flmul
  9359  150E  0828               	movf	??i1___flmul,w
  9360  150F  00AD               	movwf	i1___flmul@sign
  9361  1510  0823               	movf	i1___flmul@b+3,w
  9362  1511  00A8               	movwf	??i1___flmul
  9363  1512  0728               	addwf	??i1___flmul,w
  9364  1513  00A9               	movwf	??i1___flmul+1
  9365  1514  0829               	movf	??i1___flmul+1,w
  9366  1515  00B3               	movwf	i1___flmul@bexp
  9367  1516  1BA2               	btfsc	i1___flmul@b+2,7
  9368  1517  1433               	bsf	i1___flmul@bexp,0
  9369  1518  0833               	movf	i1___flmul@bexp,w
  9370  1519  1903               	btfsc	3,2
  9371  151A  2D28               	goto	i1l3394
  9372  151B  0A33               	incf	i1___flmul@bexp,w
  9373  151C  1D03               	btfss	3,2
  9374  151D  2D26               	goto	i1l3392
  9375  151E  3000               	movlw	0
  9376  151F  00A3               	movwf	i1___flmul@b+3
  9377  1520  3000               	movlw	0
  9378  1521  00A2               	movwf	i1___flmul@b+2
  9379  1522  3000               	movlw	0
  9380  1523  00A1               	movwf	i1___flmul@b+1
  9381  1524  3000               	movlw	0
  9382  1525  00A0               	movwf	i1___flmul@b
  9383  1526                     i1l3392:
  9384  1526  17A2               	bsf	i1___flmul@b+2,7
  9385  1527  2D30               	goto	i1l3396
  9386  1528                     i1l3394:
  9387  1528  3000               	movlw	0
  9388  1529  00A3               	movwf	i1___flmul@b+3
  9389  152A  3000               	movlw	0
  9390  152B  00A2               	movwf	i1___flmul@b+2
  9391  152C  3000               	movlw	0
  9392  152D  00A1               	movwf	i1___flmul@b+1
  9393  152E  3000               	movlw	0
  9394  152F  00A0               	movwf	i1___flmul@b
  9395  1530                     i1l3396:
  9396  1530  0827               	movf	i1___flmul@a+3,w
  9397  1531  3980               	andlw	128
  9398  1532  00A8               	movwf	??i1___flmul
  9399  1533  0828               	movf	??i1___flmul,w
  9400  1534  06AD               	xorwf	i1___flmul@sign,f
  9401  1535  0827               	movf	i1___flmul@a+3,w
  9402  1536  00A8               	movwf	??i1___flmul
  9403  1537  0728               	addwf	??i1___flmul,w
  9404  1538  00A9               	movwf	??i1___flmul+1
  9405  1539  0829               	movf	??i1___flmul+1,w
  9406  153A  00AE               	movwf	i1___flmul@aexp
  9407  153B  1BA6               	btfsc	i1___flmul@a+2,7
  9408  153C  142E               	bsf	i1___flmul@aexp,0
  9409  153D  082E               	movf	i1___flmul@aexp,w
  9410  153E  1903               	btfsc	3,2
  9411  153F  2D4D               	goto	i1l3412
  9412  1540  0A2E               	incf	i1___flmul@aexp,w
  9413  1541  1D03               	btfss	3,2
  9414  1542  2D4B               	goto	i1l3410
  9415  1543  3000               	movlw	0
  9416  1544  00A7               	movwf	i1___flmul@a+3
  9417  1545  3000               	movlw	0
  9418  1546  00A6               	movwf	i1___flmul@a+2
  9419  1547  3000               	movlw	0
  9420  1548  00A5               	movwf	i1___flmul@a+1
  9421  1549  3000               	movlw	0
  9422  154A  00A4               	movwf	i1___flmul@a
  9423  154B                     i1l3410:
  9424  154B  17A6               	bsf	i1___flmul@a+2,7
  9425  154C  2D55               	goto	i1l3414
  9426  154D                     i1l3412:
  9427  154D  3000               	movlw	0
  9428  154E  00A7               	movwf	i1___flmul@a+3
  9429  154F  3000               	movlw	0
  9430  1550  00A6               	movwf	i1___flmul@a+2
  9431  1551  3000               	movlw	0
  9432  1552  00A5               	movwf	i1___flmul@a+1
  9433  1553  3000               	movlw	0
  9434  1554  00A4               	movwf	i1___flmul@a
  9435  1555                     i1l3414:
  9436  1555  082E               	movf	i1___flmul@aexp,w
  9437  1556  1D03               	btfss	3,2
  9438  1557  0833               	movf	i1___flmul@bexp,w
  9439  1558  1D03               	btfss	3,2
  9440  1559  2D63               	goto	i1l3422
  9441  155A  3000               	movlw	0
  9442  155B  00A3               	movwf	?i1___flmul+3
  9443  155C  3000               	movlw	0
  9444  155D  00A2               	movwf	?i1___flmul+2
  9445  155E  3000               	movlw	0
  9446  155F  00A1               	movwf	?i1___flmul+1
  9447  1560  3000               	movlw	0
  9448  1561  00A0               	movwf	?i1___flmul
  9449  1562  0008               	return
  9450  1563                     i1l3422:
  9451  1563  0820               	movf	i1___flmul@b,w
  9452  1564  00A8               	movwf	??i1___flmul
  9453  1565  0828               	movf	??i1___flmul,w
  9454  1566  00F0               	movwf	i1__Umul8_16@multiplicand
  9455  1567  0826               	movf	i1___flmul@a+2,w
  9456  1568  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9457  156D  0871               	movf	?i1__Umul8_16+1,w
  9458  156E  00B9               	movwf	i1___flmul@temp+1
  9459  156F  0870               	movf	?i1__Umul8_16,w
  9460  1570  00B8               	movwf	i1___flmul@temp
  9461  1571  0838               	movf	i1___flmul@temp,w
  9462  1572  00A8               	movwf	??i1___flmul
  9463  1573  01A9               	clrf	??i1___flmul+1
  9464  1574  01AA               	clrf	??i1___flmul+2
  9465  1575  01AB               	clrf	??i1___flmul+3
  9466  1576  082B               	movf	??i1___flmul+3,w
  9467  1577  00B2               	movwf	i1___flmul@grs+3
  9468  1578  082A               	movf	??i1___flmul+2,w
  9469  1579  00B1               	movwf	i1___flmul@grs+2
  9470  157A  0829               	movf	??i1___flmul+1,w
  9471  157B  00B0               	movwf	i1___flmul@grs+1
  9472  157C  0828               	movf	??i1___flmul,w
  9473  157D  00AF               	movwf	i1___flmul@grs
  9474  157E  0839               	movf	i1___flmul@temp+1,w
  9475  157F  00A8               	movwf	??i1___flmul
  9476  1580  01A9               	clrf	??i1___flmul+1
  9477  1581  01AA               	clrf	??i1___flmul+2
  9478  1582  01AB               	clrf	??i1___flmul+3
  9479  1583  082B               	movf	??i1___flmul+3,w
  9480  1584  00B7               	movwf	i1___flmul@prod+3
  9481  1585  082A               	movf	??i1___flmul+2,w
  9482  1586  00B6               	movwf	i1___flmul@prod+2
  9483  1587  0829               	movf	??i1___flmul+1,w
  9484  1588  00B5               	movwf	i1___flmul@prod+1
  9485  1589  0828               	movf	??i1___flmul,w
  9486  158A  00B4               	movwf	i1___flmul@prod
  9487  158B  0821               	movf	i1___flmul@b+1,w
  9488  158C  00A8               	movwf	??i1___flmul
  9489  158D  0828               	movf	??i1___flmul,w
  9490  158E  00F0               	movwf	i1__Umul8_16@multiplicand
  9491  158F  0825               	movf	i1___flmul@a+1,w
  9492  1590  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9493  1595  0871               	movf	?i1__Umul8_16+1,w
  9494  1596  00B9               	movwf	i1___flmul@temp+1
  9495  1597  0870               	movf	?i1__Umul8_16,w
  9496  1598  00B8               	movwf	i1___flmul@temp
  9497  1599  0838               	movf	i1___flmul@temp,w
  9498  159A  00A8               	movwf	??i1___flmul
  9499  159B  01A9               	clrf	??i1___flmul+1
  9500  159C  01AA               	clrf	??i1___flmul+2
  9501  159D  01AB               	clrf	??i1___flmul+3
  9502  159E  0828               	movf	??i1___flmul,w
  9503  159F  07AF               	addwf	i1___flmul@grs,f
  9504  15A0  0829               	movf	??i1___flmul+1,w
  9505  15A1  1103               	clrz
  9506  15A2  1803               	skipnc
  9507  15A3  3E01               	addlw	1
  9508  15A4  1D03               	btfss	3,2
  9509  15A5  07B0               	addwf	i1___flmul@grs+1,f
  9510  15A6  082A               	movf	??i1___flmul+2,w
  9511  15A7  1103               	clrz
  9512  15A8  1803               	skipnc
  9513  15A9  3E01               	addlw	1
  9514  15AA  1D03               	btfss	3,2
  9515  15AB  07B1               	addwf	i1___flmul@grs+2,f
  9516  15AC  082B               	movf	??i1___flmul+3,w
  9517  15AD  1103               	clrz
  9518  15AE  1803               	skipnc
  9519  15AF  3E01               	addlw	1
  9520  15B0  1D03               	btfss	3,2
  9521  15B1  07B2               	addwf	i1___flmul@grs+3,f
  9522  15B2  0839               	movf	i1___flmul@temp+1,w
  9523  15B3  00A8               	movwf	??i1___flmul
  9524  15B4  01A9               	clrf	??i1___flmul+1
  9525  15B5  01AA               	clrf	??i1___flmul+2
  9526  15B6  01AB               	clrf	??i1___flmul+3
  9527  15B7  0828               	movf	??i1___flmul,w
  9528  15B8  07B4               	addwf	i1___flmul@prod,f
  9529  15B9  0829               	movf	??i1___flmul+1,w
  9530  15BA  1103               	clrz
  9531  15BB  1803               	skipnc
  9532  15BC  3E01               	addlw	1
  9533  15BD  1D03               	btfss	3,2
  9534  15BE  07B5               	addwf	i1___flmul@prod+1,f
  9535  15BF  082A               	movf	??i1___flmul+2,w
  9536  15C0  1103               	clrz
  9537  15C1  1803               	skipnc
  9538  15C2  3E01               	addlw	1
  9539  15C3  1D03               	btfss	3,2
  9540  15C4  07B6               	addwf	i1___flmul@prod+2,f
  9541  15C5  082B               	movf	??i1___flmul+3,w
  9542  15C6  1103               	clrz
  9543  15C7  1803               	skipnc
  9544  15C8  3E01               	addlw	1
  9545  15C9  1D03               	btfss	3,2
  9546  15CA  07B7               	addwf	i1___flmul@prod+3,f
  9547  15CB  0822               	movf	i1___flmul@b+2,w
  9548  15CC  00A8               	movwf	??i1___flmul
  9549  15CD  0828               	movf	??i1___flmul,w
  9550  15CE  00F0               	movwf	i1__Umul8_16@multiplicand
  9551  15CF  0824               	movf	i1___flmul@a,w
  9552  15D0  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9553  15D5  0871               	movf	?i1__Umul8_16+1,w
  9554  15D6  00B9               	movwf	i1___flmul@temp+1
  9555  15D7  0870               	movf	?i1__Umul8_16,w
  9556  15D8  00B8               	movwf	i1___flmul@temp
  9557  15D9  0838               	movf	i1___flmul@temp,w
  9558  15DA  00A8               	movwf	??i1___flmul
  9559  15DB  01A9               	clrf	??i1___flmul+1
  9560  15DC  01AA               	clrf	??i1___flmul+2
  9561  15DD  01AB               	clrf	??i1___flmul+3
  9562  15DE  0828               	movf	??i1___flmul,w
  9563  15DF  07AF               	addwf	i1___flmul@grs,f
  9564  15E0  0829               	movf	??i1___flmul+1,w
  9565  15E1  1103               	clrz
  9566  15E2  1803               	skipnc
  9567  15E3  3E01               	addlw	1
  9568  15E4  1D03               	btfss	3,2
  9569  15E5  07B0               	addwf	i1___flmul@grs+1,f
  9570  15E6  082A               	movf	??i1___flmul+2,w
  9571  15E7  1103               	clrz
  9572  15E8  1803               	skipnc
  9573  15E9  3E01               	addlw	1
  9574  15EA  1D03               	btfss	3,2
  9575  15EB  07B1               	addwf	i1___flmul@grs+2,f
  9576  15EC  082B               	movf	??i1___flmul+3,w
  9577  15ED  1103               	clrz
  9578  15EE  1803               	skipnc
  9579  15EF  3E01               	addlw	1
  9580  15F0  1D03               	btfss	3,2
  9581  15F1  07B2               	addwf	i1___flmul@grs+3,f
  9582  15F2  0839               	movf	i1___flmul@temp+1,w
  9583  15F3  00A8               	movwf	??i1___flmul
  9584  15F4  01A9               	clrf	??i1___flmul+1
  9585  15F5  01AA               	clrf	??i1___flmul+2
  9586  15F6  01AB               	clrf	??i1___flmul+3
  9587  15F7  0828               	movf	??i1___flmul,w
  9588  15F8  07B4               	addwf	i1___flmul@prod,f
  9589  15F9  0829               	movf	??i1___flmul+1,w
  9590  15FA  1103               	clrz
  9591  15FB  1803               	skipnc
  9592  15FC  3E01               	addlw	1
  9593  15FD  1D03               	btfss	3,2
  9594  15FE  07B5               	addwf	i1___flmul@prod+1,f
  9595  15FF  082A               	movf	??i1___flmul+2,w
  9596  1600  1103               	clrz
  9597  1601  1803               	skipnc
  9598  1602  3E01               	addlw	1
  9599  1603  1D03               	btfss	3,2
  9600  1604  07B6               	addwf	i1___flmul@prod+2,f
  9601  1605  082B               	movf	??i1___flmul+3,w
  9602  1606  1103               	clrz
  9603  1607  1803               	skipnc
  9604  1608  3E01               	addlw	1
  9605  1609  1D03               	btfss	3,2
  9606  160A  07B7               	addwf	i1___flmul@prod+3,f
  9607  160B  3008               	movlw	8
  9608  160C  00A8               	movwf	??i1___flmul
  9609  160D                     u588_25:
  9610  160D  1003               	clrc
  9611  160E  0DAF               	rlf	i1___flmul@grs,f
  9612  160F  0DB0               	rlf	i1___flmul@grs+1,f
  9613  1610  0DB1               	rlf	i1___flmul@grs+2,f
  9614  1611  0DB2               	rlf	i1___flmul@grs+3,f
  9615  1612  0BA8               	decfsz	??i1___flmul,f
  9616  1613  2E0D               	goto	u588_25
  9617  1614  0821               	movf	i1___flmul@b+1,w
  9618  1615  00A8               	movwf	??i1___flmul
  9619  1616  0828               	movf	??i1___flmul,w
  9620  1617  00F0               	movwf	i1__Umul8_16@multiplicand
  9621  1618  0824               	movf	i1___flmul@a,w
  9622  1619  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9623  161E  0871               	movf	?i1__Umul8_16+1,w
  9624  161F  00B9               	movwf	i1___flmul@temp+1
  9625  1620  0870               	movf	?i1__Umul8_16,w
  9626  1621  00B8               	movwf	i1___flmul@temp
  9627  1622  0838               	movf	i1___flmul@temp,w
  9628  1623  00A8               	movwf	??i1___flmul
  9629  1624  0839               	movf	i1___flmul@temp+1,w
  9630  1625  00A9               	movwf	??i1___flmul+1
  9631  1626  01AA               	clrf	??i1___flmul+2
  9632  1627  01AB               	clrf	??i1___flmul+3
  9633  1628  0828               	movf	??i1___flmul,w
  9634  1629  07AF               	addwf	i1___flmul@grs,f
  9635  162A  0829               	movf	??i1___flmul+1,w
  9636  162B  1103               	clrz
  9637  162C  1803               	skipnc
  9638  162D  3E01               	addlw	1
  9639  162E  1D03               	btfss	3,2
  9640  162F  07B0               	addwf	i1___flmul@grs+1,f
  9641  1630  082A               	movf	??i1___flmul+2,w
  9642  1631  1103               	clrz
  9643  1632  1803               	skipnc
  9644  1633  3E01               	addlw	1
  9645  1634  1D03               	btfss	3,2
  9646  1635  07B1               	addwf	i1___flmul@grs+2,f
  9647  1636  082B               	movf	??i1___flmul+3,w
  9648  1637  1103               	clrz
  9649  1638  1803               	skipnc
  9650  1639  3E01               	addlw	1
  9651  163A  1D03               	btfss	3,2
  9652  163B  07B2               	addwf	i1___flmul@grs+3,f
  9653  163C  0820               	movf	i1___flmul@b,w
  9654  163D  00A8               	movwf	??i1___flmul
  9655  163E  0828               	movf	??i1___flmul,w
  9656  163F  00F0               	movwf	i1__Umul8_16@multiplicand
  9657  1640  0825               	movf	i1___flmul@a+1,w
  9658  1641  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9659  1646  0871               	movf	?i1__Umul8_16+1,w
  9660  1647  00B9               	movwf	i1___flmul@temp+1
  9661  1648  0870               	movf	?i1__Umul8_16,w
  9662  1649  00B8               	movwf	i1___flmul@temp
  9663  164A  0838               	movf	i1___flmul@temp,w
  9664  164B  00A8               	movwf	??i1___flmul
  9665  164C  0839               	movf	i1___flmul@temp+1,w
  9666  164D  00A9               	movwf	??i1___flmul+1
  9667  164E  01AA               	clrf	??i1___flmul+2
  9668  164F  01AB               	clrf	??i1___flmul+3
  9669  1650  0828               	movf	??i1___flmul,w
  9670  1651  07AF               	addwf	i1___flmul@grs,f
  9671  1652  0829               	movf	??i1___flmul+1,w
  9672  1653  1103               	clrz
  9673  1654  1803               	skipnc
  9674  1655  3E01               	addlw	1
  9675  1656  1D03               	btfss	3,2
  9676  1657  07B0               	addwf	i1___flmul@grs+1,f
  9677  1658  082A               	movf	??i1___flmul+2,w
  9678  1659  1103               	clrz
  9679  165A  1803               	skipnc
  9680  165B  3E01               	addlw	1
  9681  165C  1D03               	btfss	3,2
  9682  165D  07B1               	addwf	i1___flmul@grs+2,f
  9683  165E  082B               	movf	??i1___flmul+3,w
  9684  165F  1103               	clrz
  9685  1660  1803               	skipnc
  9686  1661  3E01               	addlw	1
  9687  1662  1D03               	btfss	3,2
  9688  1663  07B2               	addwf	i1___flmul@grs+3,f
  9689  1664  3008               	movlw	8
  9690  1665  00A8               	movwf	??i1___flmul
  9691  1666                     u591_25:
  9692  1666  1003               	clrc
  9693  1667  0DAF               	rlf	i1___flmul@grs,f
  9694  1668  0DB0               	rlf	i1___flmul@grs+1,f
  9695  1669  0DB1               	rlf	i1___flmul@grs+2,f
  9696  166A  0DB2               	rlf	i1___flmul@grs+3,f
  9697  166B  0BA8               	decfsz	??i1___flmul,f
  9698  166C  2E66               	goto	u591_25
  9699  166D  0820               	movf	i1___flmul@b,w
  9700  166E  00A8               	movwf	??i1___flmul
  9701  166F  0828               	movf	??i1___flmul,w
  9702  1670  00F0               	movwf	i1__Umul8_16@multiplicand
  9703  1671  0824               	movf	i1___flmul@a,w
  9704  1672  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9705  1677  0871               	movf	?i1__Umul8_16+1,w
  9706  1678  00B9               	movwf	i1___flmul@temp+1
  9707  1679  0870               	movf	?i1__Umul8_16,w
  9708  167A  00B8               	movwf	i1___flmul@temp
  9709  167B  0838               	movf	i1___flmul@temp,w
  9710  167C  00A8               	movwf	??i1___flmul
  9711  167D  0839               	movf	i1___flmul@temp+1,w
  9712  167E  00A9               	movwf	??i1___flmul+1
  9713  167F  01AA               	clrf	??i1___flmul+2
  9714  1680  01AB               	clrf	??i1___flmul+3
  9715  1681  0828               	movf	??i1___flmul,w
  9716  1682  07AF               	addwf	i1___flmul@grs,f
  9717  1683  0829               	movf	??i1___flmul+1,w
  9718  1684  1103               	clrz
  9719  1685  1803               	skipnc
  9720  1686  3E01               	addlw	1
  9721  1687  1D03               	btfss	3,2
  9722  1688  07B0               	addwf	i1___flmul@grs+1,f
  9723  1689  082A               	movf	??i1___flmul+2,w
  9724  168A  1103               	clrz
  9725  168B  1803               	skipnc
  9726  168C  3E01               	addlw	1
  9727  168D  1D03               	btfss	3,2
  9728  168E  07B1               	addwf	i1___flmul@grs+2,f
  9729  168F  082B               	movf	??i1___flmul+3,w
  9730  1690  1103               	clrz
  9731  1691  1803               	skipnc
  9732  1692  3E01               	addlw	1
  9733  1693  1D03               	btfss	3,2
  9734  1694  07B2               	addwf	i1___flmul@grs+3,f
  9735  1695  0821               	movf	i1___flmul@b+1,w
  9736  1696  00A8               	movwf	??i1___flmul
  9737  1697  0828               	movf	??i1___flmul,w
  9738  1698  00F0               	movwf	i1__Umul8_16@multiplicand
  9739  1699  0826               	movf	i1___flmul@a+2,w
  9740  169A  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9741  169F  0871               	movf	?i1__Umul8_16+1,w
  9742  16A0  00B9               	movwf	i1___flmul@temp+1
  9743  16A1  0870               	movf	?i1__Umul8_16,w
  9744  16A2  00B8               	movwf	i1___flmul@temp
  9745  16A3  0838               	movf	i1___flmul@temp,w
  9746  16A4  00A8               	movwf	??i1___flmul
  9747  16A5  0839               	movf	i1___flmul@temp+1,w
  9748  16A6  00A9               	movwf	??i1___flmul+1
  9749  16A7  01AA               	clrf	??i1___flmul+2
  9750  16A8  01AB               	clrf	??i1___flmul+3
  9751  16A9  0828               	movf	??i1___flmul,w
  9752  16AA  07B4               	addwf	i1___flmul@prod,f
  9753  16AB  0829               	movf	??i1___flmul+1,w
  9754  16AC  1103               	clrz
  9755  16AD  1803               	skipnc
  9756  16AE  3E01               	addlw	1
  9757  16AF  1D03               	btfss	3,2
  9758  16B0  07B5               	addwf	i1___flmul@prod+1,f
  9759  16B1  082A               	movf	??i1___flmul+2,w
  9760  16B2  1103               	clrz
  9761  16B3  1803               	skipnc
  9762  16B4  3E01               	addlw	1
  9763  16B5  1D03               	btfss	3,2
  9764  16B6  07B6               	addwf	i1___flmul@prod+2,f
  9765  16B7  082B               	movf	??i1___flmul+3,w
  9766  16B8  1103               	clrz
  9767  16B9  1803               	skipnc
  9768  16BA  3E01               	addlw	1
  9769  16BB  1D03               	btfss	3,2
  9770  16BC  07B7               	addwf	i1___flmul@prod+3,f
  9771  16BD  0822               	movf	i1___flmul@b+2,w
  9772  16BE  00A8               	movwf	??i1___flmul
  9773  16BF  0828               	movf	??i1___flmul,w
  9774  16C0  00F0               	movwf	i1__Umul8_16@multiplicand
  9775  16C1  0825               	movf	i1___flmul@a+1,w
  9776  16C2  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9777  16C7  0871               	movf	?i1__Umul8_16+1,w
  9778  16C8  00B9               	movwf	i1___flmul@temp+1
  9779  16C9  0870               	movf	?i1__Umul8_16,w
  9780  16CA  00B8               	movwf	i1___flmul@temp
  9781  16CB  0838               	movf	i1___flmul@temp,w
  9782  16CC  00A8               	movwf	??i1___flmul
  9783  16CD  0839               	movf	i1___flmul@temp+1,w
  9784  16CE  00A9               	movwf	??i1___flmul+1
  9785  16CF  01AA               	clrf	??i1___flmul+2
  9786  16D0  01AB               	clrf	??i1___flmul+3
  9787  16D1  0828               	movf	??i1___flmul,w
  9788  16D2  07B4               	addwf	i1___flmul@prod,f
  9789  16D3  0829               	movf	??i1___flmul+1,w
  9790  16D4  1103               	clrz
  9791  16D5  1803               	skipnc
  9792  16D6  3E01               	addlw	1
  9793  16D7  1D03               	btfss	3,2
  9794  16D8  07B5               	addwf	i1___flmul@prod+1,f
  9795  16D9  082A               	movf	??i1___flmul+2,w
  9796  16DA  1103               	clrz
  9797  16DB  1803               	skipnc
  9798  16DC  3E01               	addlw	1
  9799  16DD  1D03               	btfss	3,2
  9800  16DE  07B6               	addwf	i1___flmul@prod+2,f
  9801  16DF  082B               	movf	??i1___flmul+3,w
  9802  16E0  1103               	clrz
  9803  16E1  1803               	skipnc
  9804  16E2  3E01               	addlw	1
  9805  16E3  1D03               	btfss	3,2
  9806  16E4  07B7               	addwf	i1___flmul@prod+3,f
  9807  16E5  0822               	movf	i1___flmul@b+2,w
  9808  16E6  00A8               	movwf	??i1___flmul
  9809  16E7  0828               	movf	??i1___flmul,w
  9810  16E8  00F0               	movwf	i1__Umul8_16@multiplicand
  9811  16E9  0826               	movf	i1___flmul@a+2,w
  9812  16EA  160A  158A  21CD  160A  118A  	fcall	i1__Umul8_16
  9813  16EF  0871               	movf	?i1__Umul8_16+1,w
  9814  16F0  00B9               	movwf	i1___flmul@temp+1
  9815  16F1  0870               	movf	?i1__Umul8_16,w
  9816  16F2  00B8               	movwf	i1___flmul@temp
  9817  16F3  0838               	movf	i1___flmul@temp,w
  9818  16F4  00A8               	movwf	??i1___flmul
  9819  16F5  0839               	movf	i1___flmul@temp+1,w
  9820  16F6  00A9               	movwf	??i1___flmul+1
  9821  16F7  01AA               	clrf	??i1___flmul+2
  9822  16F8  01AB               	clrf	??i1___flmul+3
  9823  16F9  3008               	movlw	8
  9824  16FA                     u595_25:
  9825  16FA  1003               	clrc
  9826  16FB  0DA8               	rlf	??i1___flmul,f
  9827  16FC  0DA9               	rlf	??i1___flmul+1,f
  9828  16FD  0DAA               	rlf	??i1___flmul+2,f
  9829  16FE  0DAB               	rlf	??i1___flmul+3,f
  9830  16FF  3EFF               	addlw	-1
  9831  1700  1D03               	skipz
  9832  1701  2EFA               	goto	u595_25
  9833  1702  0828               	movf	??i1___flmul,w
  9834  1703  07B4               	addwf	i1___flmul@prod,f
  9835  1704  0829               	movf	??i1___flmul+1,w
  9836  1705  1103               	clrz
  9837  1706  1803               	skipnc
  9838  1707  3E01               	addlw	1
  9839  1708  1D03               	btfss	3,2
  9840  1709  07B5               	addwf	i1___flmul@prod+1,f
  9841  170A  082A               	movf	??i1___flmul+2,w
  9842  170B  1103               	clrz
  9843  170C  1803               	skipnc
  9844  170D  3E01               	addlw	1
  9845  170E  1D03               	btfss	3,2
  9846  170F  07B6               	addwf	i1___flmul@prod+2,f
  9847  1710  082B               	movf	??i1___flmul+3,w
  9848  1711  1103               	clrz
  9849  1712  1803               	skipnc
  9850  1713  3E01               	addlw	1
  9851  1714  1D03               	btfss	3,2
  9852  1715  07B7               	addwf	i1___flmul@prod+3,f
  9853  1716  0832               	movf	i1___flmul@grs+3,w
  9854  1717  00A8               	movwf	??i1___flmul
  9855  1718  01A9               	clrf	??i1___flmul+1
  9856  1719  01AA               	clrf	??i1___flmul+2
  9857  171A  01AB               	clrf	??i1___flmul+3
  9858  171B  0828               	movf	??i1___flmul,w
  9859  171C  07B4               	addwf	i1___flmul@prod,f
  9860  171D  0829               	movf	??i1___flmul+1,w
  9861  171E  1103               	clrz
  9862  171F  1803               	skipnc
  9863  1720  3E01               	addlw	1
  9864  1721  1D03               	btfss	3,2
  9865  1722  07B5               	addwf	i1___flmul@prod+1,f
  9866  1723  082A               	movf	??i1___flmul+2,w
  9867  1724  1103               	clrz
  9868  1725  1803               	skipnc
  9869  1726  3E01               	addlw	1
  9870  1727  1D03               	btfss	3,2
  9871  1728  07B6               	addwf	i1___flmul@prod+2,f
  9872  1729  082B               	movf	??i1___flmul+3,w
  9873  172A  1103               	clrz
  9874  172B  1803               	skipnc
  9875  172C  3E01               	addlw	1
  9876  172D  1D03               	btfss	3,2
  9877  172E  07B7               	addwf	i1___flmul@prod+3,f
  9878  172F  3008               	movlw	8
  9879  1730  00A8               	movwf	??i1___flmul
  9880  1731                     u598_25:
  9881  1731  1003               	clrc
  9882  1732  0DAF               	rlf	i1___flmul@grs,f
  9883  1733  0DB0               	rlf	i1___flmul@grs+1,f
  9884  1734  0DB1               	rlf	i1___flmul@grs+2,f
  9885  1735  0DB2               	rlf	i1___flmul@grs+3,f
  9886  1736  0BA8               	decfsz	??i1___flmul,f
  9887  1737  2F31               	goto	u598_25
  9888  1738  0833               	movf	i1___flmul@bexp,w
  9889  1739  072E               	addwf	i1___flmul@aexp,w
  9890  173A  00A8               	movwf	??i1___flmul
  9891  173B  01A9               	clrf	??i1___flmul+1
  9892  173C  0DA9               	rlf	??i1___flmul+1,f
  9893  173D  0828               	movf	??i1___flmul,w
  9894  173E  3E82               	addlw	130
  9895  173F  00B8               	movwf	i1___flmul@temp
  9896  1740  0829               	movf	??i1___flmul+1,w
  9897  1741  1803               	skipnc
  9898  1742  3E01               	addlw	1
  9899  1743  3EFF               	addlw	255
  9900  1744  00B9               	movwf	i1___flmul@temp+1
  9901  1745                     i1l3474:
  9902  1745  1BB6               	btfsc	i1___flmul@prod+2,7
  9903  1746  2F62               	goto	i1l3476
  9904  1747  3001               	movlw	1
  9905  1748  00A8               	movwf	??i1___flmul
  9906  1749                     u599_25:
  9907  1749  1003               	clrc
  9908  174A  0DB4               	rlf	i1___flmul@prod,f
  9909  174B  0DB5               	rlf	i1___flmul@prod+1,f
  9910  174C  0DB6               	rlf	i1___flmul@prod+2,f
  9911  174D  0DB7               	rlf	i1___flmul@prod+3,f
  9912  174E  0BA8               	decfsz	??i1___flmul,f
  9913  174F  2F49               	goto	u599_25
  9914  1750  1BB2               	btfsc	i1___flmul@grs+3,7
  9915  1751  1434               	bsf	i1___flmul@prod,0
  9916  1752  3001               	movlw	1
  9917  1753  00A8               	movwf	??i1___flmul
  9918  1754                     u601_25:
  9919  1754  1003               	clrc
  9920  1755  0DAF               	rlf	i1___flmul@grs,f
  9921  1756  0DB0               	rlf	i1___flmul@grs+1,f
  9922  1757  0DB1               	rlf	i1___flmul@grs+2,f
  9923  1758  0DB2               	rlf	i1___flmul@grs+3,f
  9924  1759  0BA8               	decfsz	??i1___flmul,f
  9925  175A  2F54               	goto	u601_25
  9926  175B  30FF               	movlw	255
  9927  175C  07B8               	addwf	i1___flmul@temp,f
  9928  175D  1803               	skipnc
  9929  175E  0AB9               	incf	i1___flmul@temp+1,f
  9930  175F  30FF               	movlw	255
  9931  1760  07B9               	addwf	i1___flmul@temp+1,f
  9932  1761  2F45               	goto	i1l3474
  9933  1762                     i1l3476:
  9934  1762  01AE               	clrf	i1___flmul@aexp
  9935  1763  1FB2               	btfss	i1___flmul@grs+3,7
  9936  1764  2F7B               	goto	i1l3486
  9937  1765  30FF               	movlw	255
  9938  1766  052F               	andwf	i1___flmul@grs,w
  9939  1767  00A8               	movwf	??i1___flmul
  9940  1768  30FF               	movlw	255
  9941  1769  0530               	andwf	i1___flmul@grs+1,w
  9942  176A  00A9               	movwf	??i1___flmul+1
  9943  176B  30FF               	movlw	255
  9944  176C  0531               	andwf	i1___flmul@grs+2,w
  9945  176D  00AA               	movwf	??i1___flmul+2
  9946  176E  307F               	movlw	127
  9947  176F  0532               	andwf	i1___flmul@grs+3,w
  9948  1770  00AB               	movwf	??i1___flmul+3
  9949  1771  082B               	movf	??i1___flmul+3,w
  9950  1772  042A               	iorwf	??i1___flmul+2,w
  9951  1773  0429               	iorwf	??i1___flmul+1,w
  9952  1774  0428               	iorwf	??i1___flmul,w
  9953  1775  1903               	skipnz
  9954  1776  1834               	btfsc	i1___flmul@prod,0
  9955  1777  2F79               	goto	i1l3482
  9956  1778  2F7B               	goto	i1l3486
  9957  1779                     i1l3482:
  9958  1779  01AE               	clrf	i1___flmul@aexp
  9959  177A  0AAE               	incf	i1___flmul@aexp,f
  9960  177B                     i1l3486:
  9961  177B  082E               	movf	i1___flmul@aexp,w
  9962  177C  1903               	btfsc	3,2
  9963  177D  2FAD               	goto	i1l3496
  9964  177E  3001               	movlw	1
  9965  177F  07B4               	addwf	i1___flmul@prod,f
  9966  1780  3000               	movlw	0
  9967  1781  1803               	skipnc
  9968  1782  3001               	movlw	1
  9969  1783  07B5               	addwf	i1___flmul@prod+1,f
  9970  1784  3000               	movlw	0
  9971  1785  1803               	skipnc
  9972  1786  3001               	movlw	1
  9973  1787  07B6               	addwf	i1___flmul@prod+2,f
  9974  1788  3000               	movlw	0
  9975  1789  1803               	skipnc
  9976  178A  3001               	movlw	1
  9977  178B  07B7               	addwf	i1___flmul@prod+3,f
  9978  178C  1C37               	btfss	i1___flmul@prod+3,0
  9979  178D  2FAD               	goto	i1l3496
  9980  178E  0834               	movf	i1___flmul@prod,w
  9981  178F  00A8               	movwf	??i1___flmul
  9982  1790  0835               	movf	i1___flmul@prod+1,w
  9983  1791  00A9               	movwf	??i1___flmul+1
  9984  1792  0836               	movf	i1___flmul@prod+2,w
  9985  1793  00AA               	movwf	??i1___flmul+2
  9986  1794  0837               	movf	i1___flmul@prod+3,w
  9987  1795  00AB               	movwf	??i1___flmul+3
  9988  1796  3001               	movlw	1
  9989  1797  00AC               	movwf	??i1___flmul+4
  9990  1798                     u608_25:
  9991  1798  0D2B               	rlf	??i1___flmul+3,w
  9992  1799  0CAB               	rrf	??i1___flmul+3,f
  9993  179A  0CAA               	rrf	??i1___flmul+2,f
  9994  179B  0CA9               	rrf	??i1___flmul+1,f
  9995  179C  0CA8               	rrf	??i1___flmul,f
  9996  179D  0BAC               	decfsz	??i1___flmul+4,f
  9997  179E  2F98               	goto	u608_25
  9998  179F  082B               	movf	??i1___flmul+3,w
  9999  17A0  00B7               	movwf	i1___flmul@prod+3
 10000  17A1  082A               	movf	??i1___flmul+2,w
 10001  17A2  00B6               	movwf	i1___flmul@prod+2
 10002  17A3  0829               	movf	??i1___flmul+1,w
 10003  17A4  00B5               	movwf	i1___flmul@prod+1
 10004  17A5  0828               	movf	??i1___flmul,w
 10005  17A6  00B4               	movwf	i1___flmul@prod
 10006  17A7  3001               	movlw	1
 10007  17A8  07B8               	addwf	i1___flmul@temp,f
 10008  17A9  1803               	skipnc
 10009  17AA  0AB9               	incf	i1___flmul@temp+1,f
 10010  17AB  3000               	movlw	0
 10011  17AC  07B9               	addwf	i1___flmul@temp+1,f
 10012  17AD                     i1l3496:
 10013  17AD  0839               	movf	i1___flmul@temp+1,w
 10014  17AE  3A80               	xorlw	128
 10015  17AF  00FF               	movwf	127
 10016  17B0  3080               	movlw	128
 10017  17B1  027F               	subwf	127,w
 10018  17B2  1D03               	skipz
 10019  17B3  2FB6               	goto	u609_25
 10020  17B4  30FF               	movlw	255
 10021  17B5  0238               	subwf	i1___flmul@temp,w
 10022  17B6                     u609_25:
 10023  17B6  1C03               	skipc
 10024  17B7  2FC3               	goto	i1l3500
 10025  17B8  307F               	movlw	127
 10026  17B9  1283               	bcf	3,5	;RP0=0, select bank0
 10027  17BA  1303               	bcf	3,6	;RP1=0, select bank0
 10028  17BB  00B7               	movwf	i1___flmul@prod+3
 10029  17BC  3080               	movlw	128
 10030  17BD  00B6               	movwf	i1___flmul@prod+2
 10031  17BE  3000               	movlw	0
 10032  17BF  00B5               	movwf	i1___flmul@prod+1
 10033  17C0  3000               	movlw	0
 10034  17C1  00B4               	movwf	i1___flmul@prod
 10035  17C2  2FF3               	goto	i1l778
 10036  17C3                     i1l3500:
 10037  17C3  1283               	bcf	3,5	;RP0=0, select bank0
 10038  17C4  1303               	bcf	3,6	;RP1=0, select bank0
 10039  17C5  0839               	movf	i1___flmul@temp+1,w
 10040  17C6  3A80               	xorlw	128
 10041  17C7  00FF               	movwf	127
 10042  17C8  3080               	movlw	128
 10043  17C9  027F               	subwf	127,w
 10044  17CA  1D03               	skipz
 10045  17CB  2FCE               	goto	u610_25
 10046  17CC  3001               	movlw	1
 10047  17CD  0238               	subwf	i1___flmul@temp,w
 10048  17CE                     u610_25:
 10049  17CE  1803               	skipnc
 10050  17CF  2FDC               	goto	i1l3506
 10051  17D0  3000               	movlw	0
 10052  17D1  1283               	bcf	3,5	;RP0=0, select bank0
 10053  17D2  1303               	bcf	3,6	;RP1=0, select bank0
 10054  17D3  00B7               	movwf	i1___flmul@prod+3
 10055  17D4  3000               	movlw	0
 10056  17D5  00B6               	movwf	i1___flmul@prod+2
 10057  17D6  3000               	movlw	0
 10058  17D7  00B5               	movwf	i1___flmul@prod+1
 10059  17D8  3000               	movlw	0
 10060  17D9  00B4               	movwf	i1___flmul@prod
 10061  17DA  01AD               	clrf	i1___flmul@sign
 10062  17DB  2FF3               	goto	i1l778
 10063  17DC                     i1l3506:
 10064  17DC  1283               	bcf	3,5	;RP0=0, select bank0
 10065  17DD  1303               	bcf	3,6	;RP1=0, select bank0
 10066  17DE  0838               	movf	i1___flmul@temp,w
 10067  17DF  00A8               	movwf	??i1___flmul
 10068  17E0  0828               	movf	??i1___flmul,w
 10069  17E1  00B3               	movwf	i1___flmul@bexp
 10070  17E2  30FF               	movlw	255
 10071  17E3  05B4               	andwf	i1___flmul@prod,f
 10072  17E4  30FF               	movlw	255
 10073  17E5  05B5               	andwf	i1___flmul@prod+1,f
 10074  17E6  307F               	movlw	127
 10075  17E7  05B6               	andwf	i1___flmul@prod+2,f
 10076  17E8  3000               	movlw	0
 10077  17E9  05B7               	andwf	i1___flmul@prod+3,f
 10078  17EA  1833               	btfsc	i1___flmul@bexp,0
 10079  17EB  17B6               	bsf	i1___flmul@prod+2,7
 10080  17EC  0833               	movf	i1___flmul@bexp,w
 10081  17ED  00A8               	movwf	??i1___flmul
 10082  17EE  1003               	clrc
 10083  17EF  0C28               	rrf	??i1___flmul,w
 10084  17F0  00A9               	movwf	??i1___flmul+1
 10085  17F1  0829               	movf	??i1___flmul+1,w
 10086  17F2  00B7               	movwf	i1___flmul@prod+3
 10087  17F3                     i1l778:
 10088  17F3  082D               	movf	i1___flmul@sign,w
 10089  17F4  00A8               	movwf	??i1___flmul
 10090  17F5  0828               	movf	??i1___flmul,w
 10091  17F6  04B7               	iorwf	i1___flmul@prod+3,f
 10092  17F7  0837               	movf	i1___flmul@prod+3,w
 10093  17F8  00A3               	movwf	?i1___flmul+3
 10094  17F9  0836               	movf	i1___flmul@prod+2,w
 10095  17FA  00A2               	movwf	?i1___flmul+2
 10096  17FB  0835               	movf	i1___flmul@prod+1,w
 10097  17FC  00A1               	movwf	?i1___flmul+1
 10098  17FD  0834               	movf	i1___flmul@prod,w
 10099  17FE  00A0               	movwf	?i1___flmul
 10100  17FF  0008               	return
 10101  1800                     __end_ofi1___flmul:
 10102                           
 10103                           	psect	text35
 10104  19CD                     __ptext35:	
 10105 ;; *************** function i1__Umul8_16 *****************
 10106 ;; Defined at:
 10107 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul8_16.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  multiplier      1    wreg     unsigned char 
 10110 ;;  multiplicand    1    0[COMMON] unsigned char 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  multiplier      1    8[COMMON] unsigned char 
 10113 ;;  word_mpld       2    6[COMMON] unsigned int 
 10114 ;;  product         2    4[COMMON] unsigned int 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  2    0[COMMON] unsigned int 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0
 10119 ;; Tracked objects:
 10120 ;;		On entry : 300/0
 10121 ;;		On exit  : 300/0
 10122 ;;		Unchanged: 300/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10124 ;;      Params:         2       0       0       0       0
 10125 ;;      Locals:         5       0       0       0       0
 10126 ;;      Temps:          2       0       0       0       0
 10127 ;;      Totals:         9       0       0       0       0
 10128 ;;Total ram usage:        9 bytes
 10129 ;; Hardware stack levels used: 1
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		i1___flmul
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137  19CD                     i1__Umul8_16:	
 10138                           ;psect for function i1__Umul8_16
 10139                           
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in i1__Umul8_16: [wreg+status,2+status,0]
 10143                           ;i1__Umul8_16@multiplier stored from wreg
 10144  19CD  00F8               	movwf	i1__Umul8_16@multiplier
 10145  19CE  01F4               	clrf	i1__Umul8_16@product
 10146  19CF  01F5               	clrf	i1__Umul8_16@product+1
 10147  19D0  0870               	movf	i1__Umul8_16@multiplicand,w
 10148  19D1  00F2               	movwf	??i1__Umul8_16
 10149  19D2  01F3               	clrf	??i1__Umul8_16+1
 10150  19D3  0872               	movf	??i1__Umul8_16,w
 10151  19D4  00F6               	movwf	i1__Umul8_16@word_mpld
 10152  19D5  0873               	movf	??i1__Umul8_16+1,w
 10153  19D6  00F7               	movwf	i1__Umul8_16@word_mpld+1
 10154  19D7                     i1l2986:
 10155  19D7  1C78               	btfss	i1__Umul8_16@multiplier,0
 10156  19D8  29DF               	goto	i1l785
 10157  19D9  0876               	movf	i1__Umul8_16@word_mpld,w
 10158  19DA  07F4               	addwf	i1__Umul8_16@product,f
 10159  19DB  1803               	skipnc
 10160  19DC  0AF5               	incf	i1__Umul8_16@product+1,f
 10161  19DD  0877               	movf	i1__Umul8_16@word_mpld+1,w
 10162  19DE  07F5               	addwf	i1__Umul8_16@product+1,f
 10163  19DF                     i1l785:
 10164  19DF  3001               	movlw	1
 10165  19E0                     u468_25:
 10166  19E0  1003               	clrc
 10167  19E1  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 10168  19E2  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 10169  19E3  3EFF               	addlw	-1
 10170  19E4  1D03               	skipz
 10171  19E5  29E0               	goto	u468_25
 10172  19E6  1003               	clrc
 10173  19E7  0CF8               	rrf	i1__Umul8_16@multiplier,f
 10174  19E8  0878               	movf	i1__Umul8_16@multiplier,w
 10175  19E9  1D03               	btfss	3,2
 10176  19EA  29D7               	goto	i1l2986
 10177  19EB  0875               	movf	i1__Umul8_16@product+1,w
 10178  19EC  00F1               	movwf	?i1__Umul8_16+1
 10179  19ED  0874               	movf	i1__Umul8_16@product,w
 10180  19EE  00F0               	movwf	?i1__Umul8_16
 10181  19EF  0008               	return
 10182  19F0                     __end_ofi1__Umul8_16:
 10183  007E                     btemp	set	126	;btemp
 10184  007E                     wtemp0	set	126
 10185                           
 10186                           	psect	idloc
 10187                           
 10188                           ;Config register IDLOC0 @ 0x2000
 10189                           ;	unspecified, using default values
 10190  2000                     	org	8192
 10191  2000  3FFF               	dw	16383
 10192                           
 10193                           ;Config register IDLOC1 @ 0x2001
 10194                           ;	unspecified, using default values
 10195  2001                     	org	8193
 10196  2001  3FFF               	dw	16383
 10197                           
 10198                           ;Config register IDLOC2 @ 0x2002
 10199                           ;	unspecified, using default values
 10200  2002                     	org	8194
 10201  2002  3FFF               	dw	16383
 10202                           
 10203                           ;Config register IDLOC3 @ 0x2003
 10204                           ;	unspecified, using default values
 10205  2003                     	org	8195
 10206  2003  3FFF               	dw	16383
 10207                           
 10208                           	psect	config
 10209                           
 10210                           ;Config register CONFIG1 @ 0x2007
 10211                           ;	Oscillator Selection bits
 10212                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
 10213                           ;	Watchdog Timer Enable bit
 10214                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 10215                           ;	Power-up Timer Enable bit
 10216                           ;	PWRTE = OFF, PWRT disabled
 10217                           ;	RE3/MCLR pin function select bit
 10218                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 10219                           ;	Code Protection bit
 10220                           ;	CP = OFF, Program memory code protection is disabled
 10221                           ;	Data Code Protection bit
 10222                           ;	CPD = OFF, Data memory code protection is disabled
 10223                           ;	Brown Out Reset Selection bits
 10224                           ;	BOREN = OFF, BOR disabled
 10225                           ;	Internal External Switchover bit
 10226                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 10227                           ;	Fail-Safe Clock Monitor Enabled bit
 10228                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 10229                           ;	Low Voltage Programming Enable bit
 10230                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 10231                           ;	In-Circuit Debugger Mode bit
 10232                           ;	DEBUG = 0x1, unprogrammed default
 10233  2007                     	org	8199
 10234  2007  20D2               	dw	8402
 10235                           
 10236                           ;Config register CONFIG2 @ 0x2008
 10237                           ;	Brown-out Reset Selection bit
 10238                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
 10239                           ;	Flash Program Memory Self Write Enable bits
 10240                           ;	WRT = OFF, Write protection off
 10241  2008                     	org	8200
 10242  2008  3FFF               	dw	16383
 10243                           
 10244                           	psect	text1_split_1
 10245  1165                     l5168:
 10246  1165  1683               	bsf	3,5	;RP0=1, select bank3
 10247  1166  1703               	bsf	3,6	;RP1=1, select bank3
 10248  1167  0840               	movf	(sprintf@prec+1)^(0+384),w
 10249  1168  3A80               	xorlw	128
 10250  1169  00A3               	movwf	??_sprintf^(0+384)
 10251  116A  3080               	movlw	128
 10252  116B  0223               	subwf	??_sprintf^(0+384),w
 10253  116C  1D03               	skipz
 10254  116D  2970               	goto	u9495
 10255  116E  0842               	movf	sprintf@c^(0+384),w
 10256  116F  023F               	subwf	sprintf@prec^(0+384),w
 10257  1170                     u9495:
 10258  1170  1803               	skipnc
 10259  1171  297B               	goto	l5172
 10260                           
 10261                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
 10262  1172  1683               	bsf	3,5	;RP0=1, select bank3
 10263  1173  1703               	bsf	3,6	;RP1=1, select bank3
 10264  1174  0842               	movf	sprintf@c^(0+384),w
 10265  1175  00A3               	movwf	??_sprintf^(0+384)
 10266  1176  01A4               	clrf	(??_sprintf^(0+384)+1)
 10267  1177  0823               	movf	??_sprintf^(0+384),w
 10268  1178  00BF               	movwf	sprintf@prec^(0+384)
 10269  1179  0824               	movf	(??_sprintf+1)^(0+384),w
 10270  117A  00C0               	movwf	(sprintf@prec+1)^(0+384)
 10271  117B                     l5172:
 10272                           
 10273                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
 10274  117B  1683               	bsf	3,5	;RP0=1, select bank3
 10275  117C  1703               	bsf	3,6	;RP1=1, select bank3
 10276  117D  0839               	movf	sprintf@width^(0+384),w
 10277  117E  043A               	iorwf	(sprintf@width+1)^(0+384),w
 10278  117F  1903               	btfsc	3,2
 10279  1180  298B               	goto	l5178
 10280  1181  0837               	movf	sprintf@flag^(0+384),w
 10281  1182  3903               	andlw	3
 10282  1183  1903               	btfsc	3,2
 10283  1184  298B               	goto	l5178
 10284                           
 10285                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1372:    width--;
 10286  1185  30FF               	movlw	255
 10287  1186  07B9               	addwf	sprintf@width^(0+384),f
 10288  1187  1803               	skipnc
 10289  1188  0ABA               	incf	(sprintf@width+1)^(0+384),f
 10290  1189  30FF               	movlw	255
 10291  118A  07BA               	addwf	(sprintf@width+1)^(0+384),f
 10292  118B                     l5178:
 10293                           
 10294                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1374:   if(flag &
      +                           0x4000) {
 10295  118B  1F38               	btfss	(sprintf@flag+1)^(0+384),6
 10296  118C  29A6               	goto	l5186
 10297                           
 10298                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1375:    if(width
      +                           > prec)
 10299  118D  0840               	movf	(sprintf@prec+1)^(0+384),w
 10300  118E  3A80               	xorlw	128
 10301  118F  00A3               	movwf	??_sprintf^(0+384)
 10302  1190  083A               	movf	(sprintf@width+1)^(0+384),w
 10303  1191  3A80               	xorlw	128
 10304  1192  0223               	subwf	??_sprintf^(0+384),w
 10305  1193  1D03               	skipz
 10306  1194  2997               	goto	u9535
 10307  1195  0839               	movf	sprintf@width^(0+384),w
 10308  1196  023F               	subwf	sprintf@prec^(0+384),w
 10309  1197                     u9535:
 10310  1197  1803               	skipnc
 10311  1198  29A2               	goto	l5184
 10312                           
 10313                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1376:     width -
      +                          = prec;
 10314  1199  1683               	bsf	3,5	;RP0=1, select bank3
 10315  119A  1703               	bsf	3,6	;RP1=1, select bank3
 10316  119B  083F               	movf	sprintf@prec^(0+384),w
 10317  119C  02B9               	subwf	sprintf@width^(0+384),f
 10318  119D  0840               	movf	(sprintf@prec+1)^(0+384),w
 10319  119E  1C03               	skipc
 10320  119F  03BA               	decf	(sprintf@width+1)^(0+384),f
 10321  11A0  02BA               	subwf	(sprintf@width+1)^(0+384),f
 10322  11A1  29A6               	goto	l5186
 10323  11A2                     l5184:
 10324                           
 10325                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1378:     width =
      +                           0;
 10326  11A2  1683               	bsf	3,5	;RP0=1, select bank3
 10327  11A3  1703               	bsf	3,6	;RP1=1, select bank3
 10328  11A4  01B9               	clrf	sprintf@width^(0+384)
 10329  11A5  01BA               	clrf	(sprintf@width+1)^(0+384)
 10330  11A6                     l5186:
 10331                           
 10332                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
 10333  11A6  083A               	movf	(sprintf@width+1)^(0+384),w
 10334  11A7  3A80               	xorlw	128
 10335  11A8  3C80               	sublw	128
 10336  11A9  1D03               	skipz
 10337  11AA  29AD               	goto	u9545
 10338  11AB  0839               	movf	sprintf@width^(0+384),w
 10339  11AC  0242               	subwf	sprintf@c^(0+384),w
 10340  11AD                     u9545:
 10341  11AD  1803               	skipnc
 10342  11AE  29BB               	goto	l5190
 10343                           
 10344                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
 10345  11AF  1683               	bsf	3,5	;RP0=1, select bank3
 10346  11B0  1703               	bsf	3,6	;RP1=1, select bank3
 10347  11B1  0842               	movf	sprintf@c^(0+384),w
 10348  11B2  00A3               	movwf	??_sprintf^(0+384)
 10349  11B3  01A4               	clrf	(??_sprintf^(0+384)+1)
 10350  11B4  0823               	movf	??_sprintf^(0+384),w
 10351  11B5  02B9               	subwf	sprintf@width^(0+384),f
 10352  11B6  0824               	movf	(??_sprintf+1)^(0+384),w
 10353  11B7  1C03               	skipc
 10354  11B8  03BA               	decf	(sprintf@width+1)^(0+384),f
 10355  11B9  02BA               	subwf	(sprintf@width+1)^(0+384),f
 10356  11BA  29BF               	goto	l5192
 10357  11BB                     l5190:
 10358                           
 10359                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
 10360  11BB  1683               	bsf	3,5	;RP0=1, select bank3
 10361  11BC  1703               	bsf	3,6	;RP1=1, select bank3
 10362  11BD  01B9               	clrf	sprintf@width^(0+384)
 10363  11BE  01BA               	clrf	(sprintf@width+1)^(0+384)
 10364  11BF                     l5192:
 10365                           
 10366                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
 10367  11BF  1D37               	btfss	sprintf@flag^(0+384),2
 10368  11C0  29E6               	goto	l5208
 10369                           
 10370                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
 10371  11C1  0837               	movf	sprintf@flag^(0+384),w
 10372  11C2  3903               	andlw	3
 10373  11C3  1903               	btfsc	3,2
 10374  11C4  29D0               	goto	l5200
 10375                           
 10376                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
 10377  11C5  302D               	movlw	45
 10378  11C6  00A3               	movwf	??_sprintf^(0+384)
 10379  11C7  0841               	movf	sprintf@sp^(0+384),w
 10380  11C8  0084               	movwf	4
 10381  11C9  0823               	movf	??_sprintf^(0+384),w
 10382  11CA  1783               	bsf	3,7	;select IRP bank2
 10383  11CB  0080               	movwf	0
 10384  11CC  3001               	movlw	1
 10385  11CD  00A3               	movwf	??_sprintf^(0+384)
 10386  11CE  0823               	movf	??_sprintf^(0+384),w
 10387  11CF  07C1               	addwf	sprintf@sp^(0+384),f
 10388  11D0                     l5200:
 10389                           
 10390                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
 10391  11D0  0839               	movf	sprintf@width^(0+384),w
 10392  11D1  043A               	iorwf	(sprintf@width+1)^(0+384),w
 10393  11D2  1903               	btfsc	3,2
 10394  11D3  2A0E               	goto	l5228
 10395                           
 10396                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
 10397  11D4  3030               	movlw	48
 10398  11D5  00A3               	movwf	??_sprintf^(0+384)
 10399  11D6  0841               	movf	sprintf@sp^(0+384),w
 10400  11D7  0084               	movwf	4
 10401  11D8  0823               	movf	??_sprintf^(0+384),w
 10402  11D9  1783               	bsf	3,7	;select IRP bank2
 10403  11DA  0080               	movwf	0
 10404  11DB  3001               	movlw	1
 10405  11DC  00A3               	movwf	??_sprintf^(0+384)
 10406  11DD  0823               	movf	??_sprintf^(0+384),w
 10407  11DE  07C1               	addwf	sprintf@sp^(0+384),f
 10408  11DF  30FF               	movlw	255
 10409  11E0  07B9               	addwf	sprintf@width^(0+384),f
 10410  11E1  1803               	skipnc
 10411  11E2  0ABA               	incf	(sprintf@width+1)^(0+384),f
 10412  11E3  30FF               	movlw	255
 10413  11E4  07BA               	addwf	(sprintf@width+1)^(0+384),f
 10414  11E5  29D0               	goto	l5200
 10415  11E6                     l5208:
 10416                           
 10417                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1450:    if(width
 10418  11E6  0839               	movf	sprintf@width^(0+384),w
 10419  11E7  043A               	iorwf	(sprintf@width+1)^(0+384),w
 10420  11E8  1903               	btfsc	3,2
 10421  11E9  29FF               	goto	l5216
 10422  11EA                     l5210:
 10423                           
 10424                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
 10425  11EA  3020               	movlw	32
 10426  11EB  00A3               	movwf	??_sprintf^(0+384)
 10427  11EC  0841               	movf	sprintf@sp^(0+384),w
 10428  11ED  0084               	movwf	4
 10429  11EE  0823               	movf	??_sprintf^(0+384),w
 10430  11EF  1783               	bsf	3,7	;select IRP bank2
 10431  11F0  0080               	movwf	0
 10432  11F1  3001               	movlw	1
 10433  11F2  00A3               	movwf	??_sprintf^(0+384)
 10434  11F3  0823               	movf	??_sprintf^(0+384),w
 10435  11F4  07C1               	addwf	sprintf@sp^(0+384),f
 10436  11F5  30FF               	movlw	255
 10437  11F6  07B9               	addwf	sprintf@width^(0+384),f
 10438  11F7  1803               	skipnc
 10439  11F8  0ABA               	incf	(sprintf@width+1)^(0+384),f
 10440  11F9  30FF               	movlw	255
 10441  11FA  07BA               	addwf	(sprintf@width+1)^(0+384),f
 10442  11FB  0839               	movf	sprintf@width^(0+384),w
 10443  11FC  043A               	iorwf	(sprintf@width+1)^(0+384),w
 10444  11FD  1D03               	btfss	3,2
 10445  11FE  29EA               	goto	l5210
 10446  11FF                     l5216:
 10447                           
 10448                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
 10449  11FF  0837               	movf	sprintf@flag^(0+384),w
 10450  1200  3903               	andlw	3
 10451  1201  1903               	btfsc	3,2
 10452  1202  2A0E               	goto	l5228
 10453                           
 10454                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
 10455  1203  302D               	movlw	45
 10456  1204                     L6:
 10457  1204  00A3               	movwf	??_sprintf^(0+384)
 10458  1205  0841               	movf	sprintf@sp^(0+384),w
 10459  1206  0084               	movwf	4
 10460  1207  0823               	movf	??_sprintf^(0+384),w
 10461  1208  1783               	bsf	3,7	;select IRP bank2
 10462  1209  0080               	movwf	0
 10463  120A  3001               	movlw	1
 10464  120B  00A3               	movwf	??_sprintf^(0+384)
 10465  120C  0823               	movf	??_sprintf^(0+384),w
 10466  120D  07C1               	addwf	sprintf@sp^(0+384),f
 10467  120E                     l5228:
 10468                           
 10469                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
 10470  120E  30FF               	movlw	255
 10471  120F  07BF               	addwf	sprintf@prec^(0+384),f
 10472  1210  1803               	skipnc
 10473  1211  0AC0               	incf	(sprintf@prec+1)^(0+384),f
 10474  1212  30FF               	movlw	255
 10475  1213  07C0               	addwf	(sprintf@prec+1)^(0+384),f
 10476  1214  0A3F               	incf	sprintf@prec^(0+384),w
 10477  1215  1903               	btfsc	3,2
 10478  1216  0A40               	incf	(sprintf@prec+1)^(0+384),w
 10479  1217  1903               	btfsc	3,2
 10480  1218  2A77               	goto	L13
 10481                           
 10482                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned int)prec]) % 10 + '0';
 10483  1219  3000               	movlw	0
 10484  121A  1303               	bcf	3,6	;RP1=0, select bank1
 10485  121B  00B1               	movwf	(___llmod@divisor+3)^(0+128)
 10486  121C  3000               	movlw	0
 10487  121D  00B0               	movwf	(___llmod@divisor+2)^(0+128)
 10488  121E  3000               	movlw	0
 10489  121F  00AF               	movwf	(___llmod@divisor+1)^(0+128)
 10490  1220  300A               	movlw	10
 10491  1221  00AE               	movwf	___llmod@divisor^(0+128)
 10492  1222  1703               	bsf	3,6	;RP1=1, select bank3
 10493  1223  083F               	movf	sprintf@prec^(0+384),w
 10494  1224  00A3               	movwf	??_sprintf^(0+384)
 10495  1225  3001               	movlw	1
 10496  1226                     u9625:
 10497  1226  1003               	clrc
 10498  1227  0DA3               	rlf	??_sprintf^(0+384),f
 10499  1228  3EFF               	addlw	-1
 10500  1229  1D03               	skipz
 10501  122A  2A26               	goto	u9625
 10502  122B  1003               	clrc
 10503  122C  0D23               	rlf	??_sprintf^(0+384),w
 10504  122D  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10505  122E  0084               	movwf	4
 10506  122F  160A  118A  2000  160A  118A  	fcall	stringdir
 10507  1234  1303               	bcf	3,6	;RP1=0, select bank1
 10508  1235  00A0               	movwf	___lldiv@divisor^(0+128)
 10509  1236  160A  118A  2000  160A  118A  	fcall	stringdir
 10510  123B  00A1               	movwf	(___lldiv@divisor+1)^(0+128)
 10511  123C  160A  118A  2000  160A  118A  	fcall	stringdir
 10512  1241  00A2               	movwf	(___lldiv@divisor+2)^(0+128)
 10513  1242  160A  118A  2000  160A  118A  	fcall	stringdir
 10514  1247  00A3               	movwf	(___lldiv@divisor+3)^(0+128)
 10515  1248  1703               	bsf	3,6	;RP1=1, select bank3
 10516  1249  0830               	movf	(sprintf@val+3)^(0+384),w
 10517  124A  1303               	bcf	3,6	;RP1=0, select bank1
 10518  124B  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
 10519  124C  1703               	bsf	3,6	;RP1=1, select bank3
 10520  124D  082F               	movf	(sprintf@val+2)^(0+384),w
 10521  124E  1303               	bcf	3,6	;RP1=0, select bank1
 10522  124F  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
 10523  1250  1703               	bsf	3,6	;RP1=1, select bank3
 10524  1251  082E               	movf	(sprintf@val+1)^(0+384),w
 10525  1252  1303               	bcf	3,6	;RP1=0, select bank1
 10526  1253  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
 10527  1254  1703               	bsf	3,6	;RP1=1, select bank3
 10528  1255  082D               	movf	sprintf@val^(0+384),w
 10529  1256  1303               	bcf	3,6	;RP1=0, select bank1
 10530  1257  00A4               	movwf	___lldiv@dividend^(0+128)
 10531  1258  160A  158A  255E  160A  118A  	fcall	___lldiv
 10532  125D  0823               	movf	(?___lldiv+3)^(0+128),w
 10533  125E  00B5               	movwf	(___llmod@dividend+3)^(0+128)
 10534  125F  0822               	movf	(?___lldiv+2)^(0+128),w
 10535  1260  00B4               	movwf	(___llmod@dividend+2)^(0+128)
 10536  1261  0821               	movf	(?___lldiv+1)^(0+128),w
 10537  1262  00B3               	movwf	(___llmod@dividend+1)^(0+128)
 10538  1263  0820               	movf	?___lldiv^(0+128),w
 10539  1264  00B2               	movwf	___llmod@dividend^(0+128)
 10540  1265  160A  158A  2460  160A  118A  	fcall	___llmod
 10541  126A  082E               	movf	?___llmod^(0+128),w
 10542  126B  3E30               	addlw	48
 10543  126C  1703               	bsf	3,6	;RP1=1, select bank3
 10544  126D  00A4               	movwf	(??_sprintf+1)^(0+384)
 10545  126E  0824               	movf	(??_sprintf+1)^(0+384),w
 10546  126F  00C2               	movwf	sprintf@c^(0+384)
 10547                           
 10548                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
 10549  1270  0842               	movf	sprintf@c^(0+384),w
 10550  1271  2A04               	goto	L6
 10551  1272                     l5232:
 10552                           
 10553                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
 10554  1272  0841               	movf	sprintf@sp^(0+384),w
 10555  1273  0084               	movwf	4
 10556  1274  1783               	bsf	3,7	;select IRP bank2
 10557  1275  0180               	clrf	0
 10558  1276  0008               	return
 10559  1277                     L13:
 10560  1277                     __end_of_sprintf:
 10561  1277  120A  118A  2834   	ljmp	l5230

Data Sizes:
    Strings     13
    Constant    144
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      43
    BANK1            80     79      79
    BANK3            96     51      65
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK3[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK3[2]), 

    LCDPutStr@str	PTR const unsigned char  size(1) Largest target is 10
		 -> buffer(BANK3[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _get_val->i1___xxtofl
    i1___flmul->i1___xxtofl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_get_val
    _get_val->i1___flmul

Critical Paths under _main in BANK1

    _sprintf->___fladd
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lbdiv->___lbmod
    ___flmul->___awdiv
    ___llmod->___lldiv
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    _config->_LCD_Initialize
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_sprintf
    _sprintf->___flsub
    ___flsub->___fladd

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   44238
                                             78 BANK1      1     1      0
                            _LCDGoto
                          _LCDPutStr
                             _config
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   41855
                                             12 BANK3     39    32      7
                            ___awdiv
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               19    15      4    9653
                                             42 BANK1     19    15      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1513
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1705
                                              7 BANK1      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              20    16      4    7169
                                             42 BANK1     20    16      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              7     6      1     502
                                              0 BANK1      7     6      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              5     4      1     511
                                              7 BANK1      5     4      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    5806
                                             16 BANK1     26    18      8
                          __Umul8_16
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     980
                                              0 BANK1      9     7      2
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         18    10      8     634
                                              0 BANK1     18    10      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          15     7      8     634
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     621
                                              0 BANK1     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     676
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     767
                                             14 BANK1     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     781
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     457
                                             61 BANK1     11     7      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3547
                                              4 BANK3      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    3302
                                             62 BANK1     16     8      8
                                              0 BANK3      4     4      0
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     155
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     986
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___fleq                                              12     4      8     490
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0     645
                     _LCD_Initialize
                        _TIMER1_Init
 ---------------------------------------------------------------------------------
 (2) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Initialize                                       2     2      0     645
                                              6 BANK1      2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     3      0     811
                                              6 BANK1      3     3      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           3     3      0     645
                                              3 BANK1      3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     927
                                              6 BANK1      6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (3) _LCDPutCmd                                            3     3      0     645
                                              3 BANK1      3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (4) _LCDWriteNibble                                       3     2      1     549
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  3     3      0    2239
                                             34 BANK0      3     3      0
                            _get_val
 ---------------------------------------------------------------------------------
 (6) _get_val                                              8     4      4    2239
                                             26 BANK0      8     4      4
                          i1___flmul
                         i1___xxtofl
 ---------------------------------------------------------------------------------
 (7) i1___xxtofl                                          14    10      4     348
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (7) i1___flmul                                           26    18      8    1868
                                              0 BANK0     26    18      8
                        i1__Umul8_16
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) i1__Umul8_16                                          9     7      2     349
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _config
     _LCD_Initialize
       _LCDPutCmd
     _TIMER1_Init
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       _fround (ARG)
         ___flmul
           __Umul8_16
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
         ___lbmod
     ___fleq
     ___flge
     ___flmul
     ___flneg
     ___flsub
       ___fladd
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___flmul
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
     _isdigit
     _scale

 _ISR (ROOT)
   _get_val
     i1___flmul
       i1__Umul8_16
       i1___xxtofl (ARG)
     i1___xxtofl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      C9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      2B       5       53.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     4F      4F       7       98.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60     33      41       9       67.7%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      C9      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Nov 06 06:32:35 2022

          _LCD_Initialize 1A86                         pc 0002               ?_LCDPutChar 0070  
                      l62 1AB9                        l92 1CC8                        l94 1CD8  
                      l96 1CE8                        l98 1CF8              ___awdiv@sign 00AD  
             i1___flmul@a 0024               i1___flmul@b 0020                        fsr 0004  
     ___wmul@multiplicand 00A2       __Umul8_16@word_mpld 00A6                i1___xxtofl 1EBA  
                     l244 0059                       l343 1995                       l530 1C01  
                     l259 0114                       l524 114D                       l534 1E41  
                     l712 14FC                       l704 14DF                       l529 1BE7  
                     l537 1EA7                       l553 1E09                       l297 04D5  
                     l810 1F7A                       l571 07E3                       l670 12DE  
                     l823 1FD0                       l824 1FDA                       l816 1FBA  
                     l674 13A1                       l691 1467                       l587 1A30  
                     l676 1378                       l695 148A                       l785 1A02  
                     l778 0CCB                       _GIE 005F                       _ISR 1B55  
                     fsr0 0004                       indf 0000              ___awmod@sign 00A6  
            ___flmul@aexp 00BE              ___flmul@bexp 00BF               _sprintf$834 01A8  
            ___flmul@sign 00BD              ___flmul@temp 00C8              ___flmul@prod 00C4  
         __end_of_LCDGoto 1A5B                      ?_ISR 0070              ___fltol@exp1 00E7  
                    l3304 1E18                      l3320 1C96                      l4112 1D1A  
                    l5000 020C                      l3314 1C68                      l4202 19CB  
                    l4210 1A19                      l4130 1D46                      l4122 1D22  
                    l4106 1D0F                      l4300 133E                      l3316 1C78  
                    l3324 1CA3                      l4124 1D30                      l5100 0555  
                    l5012 02A0                      l4062 1CEA                      l4054 1CCA  
                    l4310 1387                      l4230 128D                      l4134 1D51  
                    l4150 1C1F                      l4240 12A1                      l5200 11D0  
                    l5120 05A1                      l5112 0584                      l5024 0335  
                    l5016 02E1                      l5008 027A                      l4066 1CFA  
                    l4058 1CDA                      l4410 14F7                      l4314 138C  
                    l4242 12AA                      l3274 1DC5                      l4138 1D59  
                    l4162 1C2C                      l4154 1C26                      l5210 11EA  
                    l5106 0568                      l5050 0411                      l4340 13DC  
                    l4308 1385                      l4260 12D1                      l4236 129D  
                    l4164 1C3A                      l4172 1C53                      l5140 06D6  
                    l5060 046C                      l5044 040F                      l5028 0357  
                    l4406 14F2                      l4334 13D5                      l4326 13B0  
                    l4318 139B                      l4270 12EB                      l4254 12C1  
                    l3294 1DF5                      l3278 1DCE                      l4078 19FA  
                    l4430 09FE                      l4190 19B3                      l5134 06C5  
                    l5038 03AF                      l5142 06DB                      l5230 0034  
                    l4336 13D7                      l4344 13EC                      l4264 12D5  
                    l3296 1E05                      l4520 0C51                      l4512 0C1D  
                    l4432 0A00                      l4192 19BC                      l4176 1C5B  
                    l4168 1C48                      l5216 11FF                      l5208 11E6  
                    l5152 06FD                      l5080 04A6                      l5064 0476  
                    l5056 044D                      l5232 1272                      l4370 148F  
                    l4362 147C                      l4354 1459                      l4514 0C3A  
                    l4450 0A25                      l4434 0A08                      l5322 006C  
                    l4524 0C53                      l4460 0A3B                      l4452 0A2D  
                    l5228 120E                      l5172 117B                      l5164 073B  
                    l5324 012E                      l5254 0806                      l4702 10C6  
                    l4534 0C85                      l4614 0E44                      l5190 11BB  
                    l5158 06FF                      l5078 0487                      l5086 04B9  
                    l4384 14A4                      l4376 1496                      l4720 10FD  
                    l4544 0CB4                      l4448 0A23                      l4632 0FD5  
                    l4608 0DBF                      l5192 11BF                      l5184 11A2  
                    l5168 1165                      l4378 1499                      l4706 10CF  
                    l4650 0763                      l4538 0C9B                      l4626 0F50  
                    l4618 0E6F                      l5186 11A6                      l5178 118B  
                    l4812 1E81                      l4388 14A7                      l4740 1149  
                    l4644 1989                      l4654 076C                      l4808 1E5B  
                    l4728 1125                      l4592 09A3                      l4754 198D  
                    l4842 1F72                      l4738 1139                      l4586 090C  
                    l4930 0071                      l4922 0054                      l4908 1A44  
                    l4772 1D6E                      l4852 1F8D                      l4748 115C  
                    l4676 07BC                      l4668 079C                      l4782 1DA6  
                    l4774 1D7E                      l4862 1FCE                      l4854 1F9F  
                    l4686 07CF                      l4934 0082                      l4942 00C0  
                    l4864 1FBF                      l4848 1F89                      l4696 07F2  
                    l4688 07DF                      l4928 005E                      l4786 1DB3  
                    l4962 0116                      l4876 1FF7                      l4956 00D2  
                    l4798 1C13                      l4974 0149                      l4966 011B  
                    l4958 0110                      l4984 01A1                      l4968 0139  
                    STR_1 1096                      _PEIE 005E                      _INTE 005C  
                    _INTF 0059                      u5505 1DF6                      u7025 1A03  
                    u7105 1D31                      u7115 1D3D                      u7045 1B38  
                    u5605 1C97                      u8005 0C21                      u7125 1D47  
                    u7205 1C40                      u5535 1E0E                      u7215 1C49  
                    i1l72 1B86                      u8105 0C8E                      u8025 0C2C  
                    u7410 1362                      u5475 1DD7                      u8115 0CA6  
                    u7420 1363                      u7405 1356                      u9005 1FE2  
                    u8205 0966                      u7085 1D25                      u8135 1A75  
                    u5575 1C6C                      u8215 09AE                      u7185 1C2F  
                    u8305 0E47                      u5595 1C86                      u8155 083A  
                    u7605 147E                      u7285 1A1C                      u8165 0885  
                    u8325 0E92                      u8245 0D01                      u7551 1418  
                    u7543 13FF                      u7535 13DF                      u7455 138F  
                    u8095 0C70                      u8175 08CF                      u8335 0ECC  
                    u8255 0D3B                      u7560 142C                      u7552 1419  
                    u7705 14C6                      u7561 142D                      u7553 141E  
                    u8345 0F13                      u8265 0D82                      u9225 0333  
                    u7562 1432                      u7554 141F                      u7563 1433  
                    u7555 1424                      u8435 079E                      u8195 0924  
                    u9315 0490                      u7556 1425                      u8525 07E8  
                    u8445 07AF                      u8365 0F66                      u8285 0DD5  
                    u9405 0680                      u9325 04C2                      u9245 0414  
                    u6935 1CBE                      u8455 07BD                      u8375 0FA0  
                    u8295 0E0F                      u9255 0443                      u8625 113A  
                    u8385 0FD8                      u9345 04DF                      u9185 02AA  
                    u6955 1CCE                      u9195 02EC                      u8805 1C0F  
                    u8725 1D72                      u8565 10FF                      u7925 0B3E  
                    u9365 0571                      u6975 1CDE                      u8655 1152  
                    u8575 1114                      u8495 07D0                      u9535 1197  
                    u9455 0702                      u9375 057E                      u8841 1E6C  
                    u8745 1D80                      u8585 1127                      u9625 1226  
                    u9545 11AD                      u9465 0731                      u8842 1E6D  
                    u6995 1CEE                      u9707 1B48                      u8843 1E72  
                    u8755 1D95                      u9395 05FE                      u8844 1E73  
                    u8861 1E92                      u8845 1E78                      u8765 1DA7  
                    u8685 1996                      u8925 1F96                      u7965 0BD2  
                    u9485 0742                      u8862 1E93                      u8846 1E79  
                    u8863 1E98                      u8695 199D                      u7895 0AE5  
                    u9495 1170                      u8864 1E99                      u8865 1E9E  
                    u8945 1FB2                      u8866 1E9F                      u9667 1A92  
                    u7995 0C09                      u9677 1A62                      u8965 1FC7  
                    u9687 1A55                      u9697 1B26                      _TMR1 000E  
                    _main 1AB4             i1___flmul@grs 002F                      btemp 007E  
                    start 0010                _DeltaPulse 0049    __end_of_LCD_Initialize 1AB4  
                   ??_ISR 0042               LCDPutCmd@ch 00A5             ___fltol@sign1 00E6  
         __end_of___fladd 150B                     ?_main 0070           __end_of___awdiv 1D5E  
         __end_of___lbdiv 19CD           __end_of___flneg 1972           __end_of___awmod 1C60  
         __end_of___lbmod 1A36           __end_of___flmul 0CD8           __end_of___flsub 1B1D  
         __end_of___fltol 1E27                     _ANSEL 0188           __end_of___lldiv 1DBC  
         ___awdiv@divisor 00A7           __end_of___llmod 1CAC                     i1l810 1ED7  
                   i1l823 1F2D                     i1l824 1F37                     i1l816 1F17  
                   i1l785 19DF                     i1l778 17F3           ___awdiv@counter 00AC  
                   _PORTD 0008                     _TRISC 0087                     _TRISD 0088  
                   _Pulse 0047           __end_of_get_val 1BCD           __end_of_dpowers 1096  
          i1___flmul@aexp 002E            i1___flmul@bexp 0033                     _scale 0CD8  
         __end_of_isdigit 198B            i1___flmul@sign 002D            i1___flmul@temp 0038  
          i1___flmul@prod 0034                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 1277           ___lbdiv@divisor 00A7  
         ___lbdiv@counter 00AA           ?_LCD_Initialize 0070           __initialization 0013  
            __end_of_main 1AE8                    ??_main 00EE               ?i1___xxtofl 0070  
            ?_TIMER1_Init 0070                 ??_LCDGoto 00A7         __end_of_LCDPutCmd 1B55  
            LCDPutChar@ch 00A5         __end_of_LCDPutStr 0820          ___llmod@dividend 00B2  
                  ?_scale 00CA          ___awdiv@dividend 00A9                    _ANSELH 0189  
                  i1l3410 154B                    i1l3500 17C3                    i1l3412 154D  
                  i1l3422 1563                    i1l3414 1555                    i1l3506 17DC  
                  i1l3530 1EE6                    i1l3524 1ECF                    i1l3534 1EEA  
                  i1l3392 1526                    i1l3544 1F2B                    i1l3536 1EFC  
                  i1l3482 1779                    i1l3474 1745                    i1l3394 1528  
                  i1l3546 1F1C                    i1l3476 1762                    i1l3396 1530  
                  i1l3486 177B                    i1l3558 1F54                    i1l3496 17AD  
                  i1l2986 19D7                    i1l3962 1B5F                    _INTEDG 040E  
                  u601_25 1754                    u610_25 17CE                    u623_25 1F3F  
                  u615_25 1EF3                    u608_25 1798                    u609_25 17B6  
                  u617_25 1F0F                    u619_25 1F24                    u468_25 19E0  
                  u591_25 1666                    u595_25 16FA                    u588_25 160D  
                  _TMR1IE 0460                    _TMR1IF 0060                    _TMR1CS 0081  
                  u598_25 1731                    u599_25 1749                    _TMR1ON 0080  
            LCDPutStr@str 00A7          __end_of___xxtofl 2000            _LCDWriteNibble 1CAC  
        __end_of__powers_ 103A                    ___flge 1E27                    ___fleq 1BCD  
               ??___fladd 00E6                    ___wmul 198B                 ??___awdiv 00AB  
               ??___lbdiv 00A8                 ??___flneg 0045                 ??___awmod 00A4  
               ??___lbmod 00A1                 ??___flmul 00B8                 ??___flsub 0045  
               ??___fltol 00E1                 ??___lldiv 00A8                 ??___llmod 00B6  
                  _config 10A4                    _buffer 01C7                    _fround 0820  
        ___awdiv@quotient 00AE           ___awmod@divisor 00A0           ___awmod@counter 00A5  
               ??_get_val 007E         __end_ofi1___flmul 1800                 ??_isdigit 0045  
                  saved_w 007E                 ??_sprintf 01A3          ___lbdiv@dividend 00A9  
              ___flge@ff1 00A0                ___flge@ff2 00A4              ___xxtofl@arg 00AA  
            ___xxtofl@exp 00A9              ___xxtofl@val 00A0                ___fleq@ff1 00A0  
              ___fleq@ff2 00A4    __end_of_LCDWriteNibble 1D05           ___lbmod@divisor 00A0  
 __end_of__initialization 002B           ___lbmod@counter 00A5                ___flneg@f1 00A0  
              ___fltol@f1 00DD              ?i1__Umul8_16 0070                 LCDGoto@ln 00A6  
          __pcstackCOMMON 0070             __end_of_scale 1000              ??_LCDPutChar 00A3  
        ___lbdiv@quotient 00AB                __div_to_l_ 10BD           __div_to_l_@exp1 00AE  
         __div_to_l_@cntr 00AD                   ??_scale 00CE           __div_to_l_@quot 00A9  
            sprintf@width 01B9                __pbssBANK0 0045                __pbssBANK3 01C3  
         ?_LCDWriteNibble 00A0        __end_of_LCDPutChar 1A86            i1___xxtofl@arg 007A  
          i1___xxtofl@exp 0079            i1___xxtofl@val 0070             __div_to_l_@f1 00A0  
           __div_to_l_@f2 00A4         __end_of__Umul8_16 1A13                __pmaintext 1AB4  
                 ?___flge 00A0                   ?___fleq 00A0                   ?___wmul 00A0  
              __pintentry 0004                   ?_config 0070                   ?_fround 00CA  
                 _T1CKPS0 0084                   _T1CKPS1 0085                   _LCDGoto 1A36  
               ?___xxtofl 00A0       i1__Umul8_16@product 0074                __stringtab 1000  
        ??_LCD_Initialize 00A6         __end_of__npowers_ 106E                   ___fladd 127A  
                 ___awdiv 1D05                   ___lbdiv 19AC                   ___flneg 1969  
                 ___awmod 1C15                   ___lbmod 1A13                   ___flmul 09E3  
                 ___flsub 1AE8                   ___fltol 1DBC                   ___lldiv 1D5E  
                 ___llmod 1C60                _fround$831 00D9                _fround$832 00D5  
            ??i1___xxtofl 0074                   __ptext1 002F                   __ptext2 0CD8  
                 __ptext3 1C15                   __ptext4 1D05                   __ptext5 197C  
                 __ptext6 0820                   __ptext7 1A13                   __ptext8 19AC  
                 __ptext9 09E3                   _get_val 1B90               ?__div_to_l_ 00A0  
                 _dpowers 106E                   _isdigit 197C                ??___xxtofl 00A4  
        ___awmod@dividend 00A2                 _LCDPutCmd 1B1D                   _sprintf 002F  
               _LCDPutStr 0803      end_of_initialization 002B           ___lldiv@divisor 00A0  
      __end_ofi1___xxtofl 1F5D           ___lldiv@counter 00AD                   psplit$0 B0031  
          __tdiv_to_l_@f1 00A0            __tdiv_to_l_@f2 00A4             ??__tdiv_to_l_ 00A8  
   i1__Umul8_16@word_mpld 0076                 _PORTDbits 0008               ___fladd@grs 0193  
        ___lbmod@dividend 00A4             ___xxtofl@sign 00A8                 i1___flmul 150B  
              ?_LCDPutCmd 0070                ?_LCDPutStr 0070               ___lbmod@rem 00A6  
             ___flmul@grs 00C0                get_val@rpm 003E                LCDGoto@pos 00AB  
          __end_of___flge 1EBA            __end_of___fleq 1C15                LCDPutStr@i 00A8  
          __end_of___wmul 19AC         pnum$text1_split_1 0031            __end_of_config 10BD  
          __end_of_fround 09E3       start_initialization 0013               __end_of_ISR 1B90  
     __end_of__tdiv_to_l_ 07FB          ??_LCDWriteNibble 00A1                ?i1___flmul 0020  
         ___llmod@divisor 00AE           ___llmod@counter 00B7                  ??___flge 00A8  
                ??___fleq 00A8                  ??___wmul 0045                 __Umul8_16 19F0  
                ??_config 0045                  ??_fround 00CE             sprintf@tmpval 01B1  
               ___fladd@a 00E2                 ___fladd@b 00DE                fround@prec 00DD  
                ?_LCDGoto 00A6                 ___flmul@a 00B4                 ___flmul@b 00B0  
               ___flsub@a 0194                 ___flsub@b 0198                 ___latbits 0002  
           __pcstackBANK0 0020             __pcstackBANK1 00A0             __pcstackBANK3 0190  
             ??_LCDPutCmd 00A3               ??_LCDPutStr 00A6           i1___xxtofl@sign 0078  
             sprintf@flag 01B7               sprintf@eexp 01B5               sprintf@fval 01BB  
             sprintf@prec 01BF  i1__Umul8_16@multiplicand 0070                  ?___fladd 00DE  
                ?___awdiv 00A7                  ?___lbdiv 00A7                  ?___flneg 00A0  
                ?___awmod 00A0                  ?___lbmod 00A0                  ?___flmul 00B0  
                ?___flsub 0194                  ?___fltol 00DD                  ?___lldiv 00A0  
                ?___llmod 00AE                 __npowers_ 103A                ?__Umul8_16 00A0  
        LCDWriteNibble@ch 00A2          LCDWriteNibble@rs 00A0                 __pstrings 1000  
             __tdiv_to_l_ 0752             ??_TIMER1_Init 0045                  ?_get_val 003A  
            ??__div_to_l_ 00A8                  ?_isdigit 0070                 _scale$833 00D8  
             ??i1___flmul 0028                  ?_sprintf 019C         interrupt_function 0004  
          ___wmul@product 00A4               _LCDGoto$141 00A9        __end_of__div_to_l_ 1165  
             __stringbase 1005         ___wmul@multiplier 00A0       __end_of_TIMER1_Init 197C  
           ??i1__Umul8_16 0072                  _PrePulse 0045                  _Velocity 01C3  
             ??__Umul8_16 00A2        __end_of__stringtab 1006               _isdigit$652 00A0  
              sprintf@val 01AD                  ___xxtofl 1F5D                  __ptext10 19F0  
                __ptext11 0752                  __ptext20 1969                  __ptext12 10BD  
                __ptext21 1E27                  __ptext13 1F5D                  __ptext30 1CAC  
                __ptext22 1BCD                  __ptext14 198B                  __ptext31 1B55  
                __ptext23 10A4                  __ptext15 1C60                  __ptext32 1B90  
                __ptext24 1972                  __ptext16 1D5E                  __ptext33 1EBA  
                __ptext25 1A86                  __ptext17 1DBC                  __ptext34 150B  
                __ptext26 0803                  __ptext18 1AE8                  __ptext35 19CD  
                __ptext27 1A5B                  __ptext19 127A                  __ptext28 1A36  
                __ptext29 1B1D                  __powers_ 1006                 pnum$text1 000B  
     __end_ofi1__Umul8_16 19F0                _LCDPutChar 1A5B               _TIMER1_Init 1972  
                isdigit@c 00A1                  scale@scl 00DC                  intlevel1 0000  
               sprintf@ap 01AC          __tdiv_to_l_@exp1 00B1          __tdiv_to_l_@cntr 00B0  
               sprintf@sp 01C1          __tdiv_to_l_@quot 00AC    i1__Umul8_16@multiplier 0078  
        ___lldiv@dividend 00A4                 stringcode 1000              ?__tdiv_to_l_ 00A0  
  __Umul8_16@multiplicand 00A0                  sprintf@c 01C2                  sprintf@f 019C  
        ___lldiv@quotient 00A9                  stringdir 1000                  stringtab 1000  
           ___fladd@signs 0190              ___fladd@aexp 0191              ___fladd@bexp 0192  
    __Umul8_16@multiplier 00A8               i1__Umul8_16 19CD         __Umul8_16@product 00A4  
