

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun May 29 20:53:49 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295                           
   296                           	psect	strings
   297  0003                     __pstrings:
   298  0003                     stringtab:
   299  0003                     __stringtab:
   300                           
   301                           ;	String table - string pointers are 1 byte each
   302  0003  1BFF               	btfsc	btemp+1,7
   303  0004  280D               	ljmp	stringcode
   304  0005  1383               	bcf	3,7
   305  0006  187F               	btfsc	btemp+1,0
   306  0007  1783               	bsf	3,7
   307  0008  0800               	movf	0,w
   308  0009  0A84               	incf	4,f
   309  000A  1903               	skipnz
   310  000B  0AFF               	incf	btemp+1,f
   311  000C  0008               	return
   312  000D                     stringcode:
   313  000D                     stringdir:
   314  000D  3000               	movlw	high stringdir
   315  000E  008A               	movwf	10
   316  000F  0804               	movf	4,w
   317  0010  0A84               	incf	4,f
   318  0011  0782               	addwf	2,f
   319  0012                     __stringbase:
   320  0012  3400               	retlw	0
   321  0013                     __end_of__stringtab:
   322  0013                     _dpowers:
   323  0013  3401               	retlw	1
   324  0014  3400               	retlw	0
   325  0015  340A               	retlw	10
   326  0016  3400               	retlw	0
   327  0017  3464               	retlw	100
   328  0018  3400               	retlw	0
   329  0019  34E8               	retlw	232
   330  001A  3403               	retlw	3
   331  001B  3410               	retlw	16
   332  001C  3427               	retlw	39
   333  001D                     __end_of_dpowers:
   334  0008                     _PORTDbits	set	8
   335  0008                     _PORTD	set	8
   336  0007                     _PORTC	set	7
   337  0088                     _TRISD	set	136
   338  0087                     _TRISC	set	135
   339  0188                     _ANSEL	set	392
   340  001D                     STR_1:
   341  001D  3454               	retlw	84	;'T'
   342  001E  3452               	retlw	82	;'R'
   343  001F  3455               	retlw	85	;'U'
   344  0020  344F               	retlw	79	;'O'
   345  0021  344E               	retlw	78	;'N'
   346  0022  3447               	retlw	71	;'G'
   347  0023  3420               	retlw	32	;' '
   348  0024  3444               	retlw	68	;'D'
   349  0025  3455               	retlw	85	;'U'
   350  0026  3443               	retlw	67	;'C'
   351  0027  3420               	retlw	32	;' '
   352  0028  3454               	retlw	84	;'T'
   353  0029  3448               	retlw	72	;'H'
   354  002A  3441               	retlw	65	;'A'
   355  002B  344E               	retlw	78	;'N'
   356  002C  3447               	retlw	71	;'G'
   357  002D  3400               	retlw	0
   358  002E                     STR_2:
   359  002E  3425               	retlw	37	;'%'
   360  002F  3430               	retlw	48	;'0'
   361  0030  3432               	retlw	50	;'2'
   362  0031  3475               	retlw	117	;'u'
   363  0032  343A               	retlw	58	;':'
   364  0033  3425               	retlw	37	;'%'
   365  0034  3430               	retlw	48	;'0'
   366  0035  3432               	retlw	50	;'2'
   367  0036  3475               	retlw	117	;'u'
   368  0037  343A               	retlw	58	;':'
   369  0038  3425               	retlw	37	;'%'
   370  0039  3430               	retlw	48	;'0'
   371  003A  3432               	retlw	50	;'2'
   372  003B  3475               	retlw	117	;'u'
   373  003C  3400               	retlw	0
   374                           
   375                           	psect	cinit
   376  07F3                     start_initialization:	
   377                           ; #config settings
   378                           
   379  07F3                     __initialization:
   380                           
   381                           ; Clear objects allocated to BANK0
   382  07F3  1383               	bcf	3,7	;select IRP bank0
   383  07F4  303D               	movlw	low __pbssBANK0
   384  07F5  0084               	movwf	4
   385  07F6  3051               	movlw	low (__pbssBANK0+20)
   386  07F7  120A  118A  242C  120A  118A  	fcall	clear_ram0
   387  07FC                     end_of_initialization:	
   388                           ;End of C runtime variable initialization code
   389                           
   390  07FC                     __end_of__initialization:
   391  07FC  0183               	clrf	3
   392  07FD  120A  118A  2DEC   	ljmp	_main	;jump to C main() function
   393                           
   394                           	psect	bssBANK0
   395  003D                     __pbssBANK0:
   396  003D                     _buffer:
   397  003D                     	ds	20
   398                           
   399                           	psect	clrtext
   400  042C                     clear_ram0:	
   401                           ;	Called with FSR containing the base address, and
   402                           ;	W with the last address+1
   403                           
   404  042C  0064               	clrwdt	;clear the watchdog before getting into this loop
   405  042D                     clrloop0:
   406  042D  0180               	clrf	0	;clear RAM location pointed to by FSR
   407  042E  0A84               	incf	4,f	;increment pointer
   408  042F  0604               	xorwf	4,w	;XOR with final address
   409  0430  1903               	btfsc	3,2	;have we reached the end yet?
   410  0431  3400               	retlw	0	;all done for this memory range, return
   411  0432  0604               	xorwf	4,w	;XOR again to restore value
   412  0433  2C2D               	goto	clrloop0	;do the next byte
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:
   416  0070                     ?_isdigit:
   417  0070                     ?_LCD_Initialize:	
   418                           ; 1 bit 
   419                           
   420  0070                     ?_LCDPutCmd:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ??_isdigit:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_main:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_LCDWriteNibble:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_LCDPutChar:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?___wmul:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?___lwdiv:	
   439                           ; 2 bytes @ 0x0
   440                           
   441  0070                     LCDWriteNibble@rs:	
   442                           ; 2 bytes @ 0x0
   443                           
   444  0070                     _isdigit$594:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ___wmul@multiplier:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ___lwdiv@divisor:	
   451                           ; 2 bytes @ 0x0
   452                           
   453                           
   454                           ; 2 bytes @ 0x0
   455  0070                     	ds	1
   456  0071                     ??_LCDWriteNibble:
   457  0071                     isdigit@c:	
   458                           ; 1 bytes @ 0x1
   459                           
   460                           
   461                           ; 1 bytes @ 0x1
   462  0071                     	ds	1
   463  0072                     ___wmul@multiplicand:
   464  0072                     ___lwdiv@dividend:	
   465                           ; 2 bytes @ 0x2
   466                           
   467                           
   468                           ; 2 bytes @ 0x2
   469  0072                     	ds	1
   470  0073                     LCDWriteNibble@ch:
   471                           
   472                           ; 1 bytes @ 0x3
   473  0073                     	ds	1
   474  0074                     ??_LCDPutCmd:
   475  0074                     ??_LCDPutChar:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0074                     ??___wmul:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     ??___lwdiv:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     ___wmul@product:	
   485                           ; 1 bytes @ 0x4
   486                           
   487                           
   488                           ; 2 bytes @ 0x4
   489  0074                     	ds	1
   490  0075                     ___lwdiv@quotient:
   491                           
   492                           ; 2 bytes @ 0x5
   493  0075                     	ds	1
   494  0076                     LCDPutChar@ch:
   495  0076                     LCDPutCmd@ch:	
   496                           ; 1 bytes @ 0x6
   497                           
   498                           
   499                           ; 1 bytes @ 0x6
   500  0076                     	ds	1
   501  0077                     ??_LCD_Initialize:
   502  0077                     ?_LCDGoto:	
   503                           ; 1 bytes @ 0x7
   504                           
   505  0077                     ?_LCDPutStr:	
   506                           ; 1 bytes @ 0x7
   507                           
   508  0077                     LCDGoto@ln:	
   509                           ; 1 bytes @ 0x7
   510                           
   511  0077                     ___lwdiv@counter:	
   512                           ; 1 bytes @ 0x7
   513                           
   514  0077                     LCDPutStr@str:	
   515                           ; 1 bytes @ 0x7
   516                           
   517                           
   518                           ; 2 bytes @ 0x7
   519  0077                     	ds	1
   520  0078                     ??_LCDGoto:
   521  0078                     ?___lwmod:	
   522                           ; 1 bytes @ 0x8
   523                           
   524  0078                     ___lwmod@divisor:	
   525                           ; 2 bytes @ 0x8
   526                           
   527                           
   528                           ; 2 bytes @ 0x8
   529  0078                     	ds	1
   530  0079                     ??_LCDPutStr:
   531                           
   532                           ; 1 bytes @ 0x9
   533  0079                     	ds	1
   534  007A                     LCDPutStr@i:
   535  007A                     _LCDGoto$118:	
   536                           ; 1 bytes @ 0xA
   537                           
   538  007A                     ___lwmod@dividend:	
   539                           ; 2 bytes @ 0xA
   540                           
   541                           
   542                           ; 2 bytes @ 0xA
   543  007A                     	ds	2
   544  007C                     ??___lwmod:
   545  007C                     LCDGoto@pos:	
   546                           ; 1 bytes @ 0xC
   547                           
   548                           
   549                           ; 1 bytes @ 0xC
   550  007C                     	ds	1
   551  007D                     ___lwmod@counter:
   552                           
   553                           ; 1 bytes @ 0xD
   554  007D                     	ds	1
   555                           
   556                           	psect	cstackBANK0
   557  0020                     __pcstackBANK0:
   558  0020                     ?_sprintf:
   559  0020                     sprintf@f:	
   560                           ; 2 bytes @ 0x0
   561                           
   562                           
   563                           ; 1 bytes @ 0x0
   564  0020                     	ds	7
   565  0027                     ??_sprintf:
   566                           
   567                           ; 1 bytes @ 0x7
   568  0027                     	ds	3
   569  002A                     sprintf@ap:
   570                           
   571                           ; 1 bytes @ 0xA
   572  002A                     	ds	1
   573  002B                     sprintf@flag:
   574                           
   575                           ; 1 bytes @ 0xB
   576  002B                     	ds	1
   577  002C                     sprintf@val:
   578                           
   579                           ; 2 bytes @ 0xC
   580  002C                     	ds	2
   581  002E                     sprintf@prec:
   582                           
   583                           ; 1 bytes @ 0xE
   584  002E                     	ds	1
   585  002F                     sprintf@sp:
   586                           
   587                           ; 1 bytes @ 0xF
   588  002F                     	ds	1
   589  0030                     sprintf@width:
   590                           
   591                           ; 2 bytes @ 0x10
   592  0030                     	ds	2
   593  0032                     sprintf@c:
   594                           
   595                           ; 1 bytes @ 0x12
   596  0032                     	ds	1
   597  0033                     ??_main:
   598                           
   599                           ; 1 bytes @ 0x13
   600  0033                     	ds	7
   601  003A                     main@i:
   602                           
   603                           ; 1 bytes @ 0x1A
   604  003A                     	ds	1
   605  003B                     main@j:
   606                           
   607                           ; 1 bytes @ 0x1B
   608  003B                     	ds	1
   609  003C                     main@k:
   610                           
   611                           ; 1 bytes @ 0x1C
   612  003C                     	ds	1
   613                           
   614                           	psect	maintext
   615  05EC                     __pmaintext:	
   616 ;;
   617 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   618 ;;
   619 ;; *************** function _main *****************
   620 ;; Defined at:
   621 ;;		line 31 in file "newmain.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  k               1   28[BANK0 ] unsigned char 
   626 ;;  j               1   27[BANK0 ] unsigned char 
   627 ;;  i               1   26[BANK0 ] unsigned char 
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : B00/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   637 ;;      Params:         0       0       0       0       0
   638 ;;      Locals:         0       3       0       0       0
   639 ;;      Temps:          0       7       0       0       0
   640 ;;      Totals:         0      10       0       0       0
   641 ;;Total ram usage:       10 bytes
   642 ;; Hardware stack levels required when called: 3
   643 ;; This function calls:
   644 ;;		_LCDGoto
   645 ;;		_LCDPutStr
   646 ;;		_LCD_Initialize
   647 ;;		_sprintf
   648 ;; This function is called by:
   649 ;;		Startup code after reset
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653  05EC                     _main:	
   654                           ;psect for function _main
   655                           
   656  05EC                     l1235:	
   657                           ;incstack = 0
   658                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   659                           
   660                           
   661                           ;newmain.c: 32: TRISC = 1;
   662  05EC  3001               	movlw	1
   663  05ED  1683               	bsf	3,5	;RP0=1, select bank1
   664  05EE  1303               	bcf	3,6	;RP1=0, select bank1
   665  05EF  0087               	movwf	7	;volatile
   666  05F0                     l1237:
   667                           
   668                           ;newmain.c: 33: TRISD = 0;
   669  05F0  0188               	clrf	8	;volatile
   670  05F1                     l1239:
   671                           
   672                           ;newmain.c: 34: ANSEL = 0;
   673  05F1  1683               	bsf	3,5	;RP0=1, select bank3
   674  05F2  1703               	bsf	3,6	;RP1=1, select bank3
   675  05F3  0188               	clrf	8	;volatile
   676  05F4                     l1241:
   677                           
   678                           ;newmain.c: 35: PORTC = 0;
   679  05F4  1283               	bcf	3,5	;RP0=0, select bank0
   680  05F5  1303               	bcf	3,6	;RP1=0, select bank0
   681  05F6  0187               	clrf	7	;volatile
   682  05F7                     l1243:
   683                           
   684                           ;newmain.c: 36: LCD_Initialize();
   685  05F7  120A  118A  253E  120A  118A  	fcall	_LCD_Initialize
   686  05FC                     l1245:
   687                           
   688                           ;newmain.c: 37: LCDGoto(0,0);
   689  05FC  01F7               	clrf	LCDGoto@ln
   690  05FD  3000               	movlw	0
   691  05FE  120A  118A  24E1  120A  118A  	fcall	_LCDGoto
   692  0603                     l1247:
   693                           
   694                           ;newmain.c: 38: LCDPutStr("TRUONG DUC THANG");
   695  0603  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   696  0604  00F7               	movwf	LCDPutStr@str
   697  0605  3080               	movlw	128
   698  0606  00F8               	movwf	LCDPutStr@str+1
   699  0607  120A  118A  24B6  120A  118A  	fcall	_LCDPutStr
   700  060C                     l1249:
   701                           
   702                           ;newmain.c: 40: {;newmain.c: 41: for(unsigned char i = 0; i < 24; i++)
   703  060C  1283               	bcf	3,5	;RP0=0, select bank0
   704  060D  1303               	bcf	3,6	;RP1=0, select bank0
   705  060E  01BA               	clrf	main@i
   706  060F                     l1255:
   707                           
   708                           ;newmain.c: 42: {;newmain.c: 43: for(unsigned char j = 0; j < 60; j++)
   709  060F  01BB               	clrf	main@j
   710  0610                     l1261:
   711                           
   712                           ;newmain.c: 44: {;newmain.c: 45: for(unsigned char k = 0; k < 60; k++)
   713  0610  01BC               	clrf	main@k
   714  0611                     l1267:
   715                           
   716                           ;newmain.c: 46: {;newmain.c: 47: sprintf(buffer, "%02u:%02u:%02u", i, j, k);
   717  0611  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   718  0612  00B3               	movwf	??_main
   719  0613  0833               	movf	??_main,w
   720  0614  00A0               	movwf	sprintf@f
   721  0615  083A               	movf	main@i,w
   722  0616  00B4               	movwf	??_main+1
   723  0617  01B5               	clrf	??_main+2
   724  0618  0834               	movf	??_main+1,w
   725  0619  00A1               	movwf	?_sprintf+1
   726  061A  0835               	movf	??_main+2,w
   727  061B  00A2               	movwf	?_sprintf+2
   728  061C  083B               	movf	main@j,w
   729  061D  00B6               	movwf	??_main+3
   730  061E  01B7               	clrf	??_main+4
   731  061F  0836               	movf	??_main+3,w
   732  0620  00A3               	movwf	?_sprintf+3
   733  0621  0837               	movf	??_main+4,w
   734  0622  00A4               	movwf	?_sprintf+4
   735  0623  083C               	movf	main@k,w
   736  0624  00B8               	movwf	??_main+5
   737  0625  01B9               	clrf	??_main+6
   738  0626  0838               	movf	??_main+5,w
   739  0627  00A5               	movwf	?_sprintf+5
   740  0628  0839               	movf	??_main+6,w
   741  0629  00A6               	movwf	?_sprintf+6
   742  062A  303D               	movlw	(low (_buffer| 0))& (0+255)
   743  062B  120A  118A  266F  120A  118A  	fcall	_sprintf
   744  0630                     l1269:
   745                           
   746                           ;newmain.c: 48: LCDGoto(3, 1);
   747  0630  01F7               	clrf	LCDGoto@ln
   748  0631  0AF7               	incf	LCDGoto@ln,f
   749  0632  3003               	movlw	3
   750  0633  120A  118A  24E1  120A  118A  	fcall	_LCDGoto
   751  0638                     l1271:
   752                           
   753                           ;newmain.c: 49: LCDPutStr(buffer);
   754  0638  303D               	movlw	(low (_buffer| 0))& (0+255)
   755  0639  00F7               	movwf	LCDPutStr@str
   756  063A  3000               	movlw	0
   757  063B  00F8               	movwf	LCDPutStr@str+1
   758  063C  120A  118A  24B6  120A  118A  	fcall	_LCDPutStr
   759  0641                     l1273:
   760                           
   761                           ;newmain.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
   762  0641  3082               	movlw	130
   763  0642  1283               	bcf	3,5	;RP0=0, select bank0
   764  0643  1303               	bcf	3,6	;RP1=0, select bank0
   765  0644  00B4               	movwf	??_main+1
   766  0645  30DD               	movlw	221
   767  0646  00B3               	movwf	??_main
   768  0647                     u857:
   769  0647  0BB3               	decfsz	??_main,f
   770  0648  2E47               	goto	u857
   771  0649  0BB4               	decfsz	??_main+1,f
   772  064A  2E47               	goto	u857
   773  064B                     l1275:
   774  064B  3001               	movlw	1
   775  064C  1283               	bcf	3,5	;RP0=0, select bank0
   776  064D  1303               	bcf	3,6	;RP1=0, select bank0
   777  064E  00B3               	movwf	??_main
   778  064F  0833               	movf	??_main,w
   779  0650  07BC               	addwf	main@k,f
   780  0651                     l1277:
   781  0651  303C               	movlw	60
   782  0652  023C               	subwf	main@k,w
   783  0653  1C03               	skipc
   784  0654  2E56               	goto	u821
   785  0655  2E57               	goto	u820
   786  0656                     u821:
   787  0656  2E11               	goto	l1267
   788  0657                     u820:
   789  0657                     l1279:
   790  0657  3001               	movlw	1
   791  0658  00B3               	movwf	??_main
   792  0659  0833               	movf	??_main,w
   793  065A  07BB               	addwf	main@j,f
   794  065B                     l1281:
   795  065B  303C               	movlw	60
   796  065C  023B               	subwf	main@j,w
   797  065D  1C03               	skipc
   798  065E  2E60               	goto	u831
   799  065F  2E61               	goto	u830
   800  0660                     u831:
   801  0660  2E10               	goto	l1261
   802  0661                     u830:
   803  0661                     l1283:
   804  0661  3001               	movlw	1
   805  0662  00B3               	movwf	??_main
   806  0663  0833               	movf	??_main,w
   807  0664  07BA               	addwf	main@i,f
   808  0665                     l1285:
   809  0665  3018               	movlw	24
   810  0666  023A               	subwf	main@i,w
   811  0667  1C03               	skipc
   812  0668  2E6A               	goto	u841
   813  0669  2E6B               	goto	u840
   814  066A                     u841:
   815  066A  2E0F               	goto	l1255
   816  066B                     u840:
   817  066B  2E0C               	goto	l1249
   818  066C  120A  118A  2800   	ljmp	start
   819  066F                     __end_of_main:
   820                           
   821                           	psect	text1
   822  066F                     __ptext1:	
   823 ;; *************** function _sprintf *****************
   824 ;; Defined at:
   825 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  sp              1    wreg     PTR unsigned char 
   828 ;;		 -> buffer(20), 
   829 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   830 ;;		 -> STR_2(15), 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  sp              1   15[BANK0 ] PTR unsigned char 
   833 ;;		 -> buffer(20), 
   834 ;;  tmpval          4    0        struct .
   835 ;;  width           2   16[BANK0 ] int 
   836 ;;  val             2   12[BANK0 ] unsigned int 
   837 ;;  cp              2    0        PTR const unsigned char 
   838 ;;  len             2    0        unsigned int 
   839 ;;  c               1   18[BANK0 ] unsigned char 
   840 ;;  prec            1   14[BANK0 ] char 
   841 ;;  flag            1   11[BANK0 ] unsigned char 
   842 ;;  ap              1   10[BANK0 ] PTR void [1]
   843 ;;		 -> ?_sprintf(2), 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  2    0[BANK0 ] int 
   846 ;; Registers used:
   847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   853 ;;      Params:         0       7       0       0       0
   854 ;;      Locals:         0       9       0       0       0
   855 ;;      Temps:          0       3       0       0       0
   856 ;;      Totals:         0      19       0       0       0
   857 ;;Total ram usage:       19 bytes
   858 ;; Hardware stack levels used: 1
   859 ;; Hardware stack levels required when called: 1
   860 ;; This function calls:
   861 ;;		___lwdiv
   862 ;;		___lwmod
   863 ;;		___wmul
   864 ;;		_isdigit
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870  066F                     _sprintf:	
   871                           ;psect for function _sprintf
   872                           
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   876                           ;sprintf@sp stored from wreg
   877  066F  1283               	bcf	3,5	;RP0=0, select bank0
   878  0670  1303               	bcf	3,6	;RP1=0, select bank0
   879  0671  00AF               	movwf	sprintf@sp
   880  0672                     l1145:
   881                           
   882                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
   883  0672  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   884  0673  00A7               	movwf	??_sprintf
   885  0674  0827               	movf	??_sprintf,w
   886  0675  00AA               	movwf	sprintf@ap
   887                           
   888                           ;doprnt.c: 553: while((c = *f++)) {
   889  0676  2FDC               	goto	l1229
   890  0677                     l1147:
   891                           
   892                           ;doprnt.c: 555: if(c != '%')
   893  0677  3025               	movlw	37
   894  0678  0632               	xorwf	sprintf@c,w
   895  0679  1903               	btfsc	3,2
   896  067A  2E7C               	goto	u691
   897  067B  2E7D               	goto	u690
   898  067C                     u691:
   899  067C  2E89               	goto	l1153
   900  067D                     u690:
   901  067D                     l1149:
   902                           
   903                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   904  067D  0832               	movf	sprintf@c,w
   905  067E  00A7               	movwf	??_sprintf
   906  067F  082F               	movf	sprintf@sp,w
   907  0680  0084               	movwf	4
   908  0681  0827               	movf	??_sprintf,w
   909  0682  1383               	bcf	3,7	;select IRP bank0
   910  0683  0080               	movwf	0
   911  0684                     l1151:
   912  0684  3001               	movlw	1
   913  0685  00A7               	movwf	??_sprintf
   914  0686  0827               	movf	??_sprintf,w
   915  0687  07AF               	addwf	sprintf@sp,f
   916                           
   917                           ;doprnt.c: 559: continue;
   918  0688  2FDC               	goto	l1229
   919  0689                     l1153:
   920                           
   921                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
   922  0689  01B0               	clrf	sprintf@width
   923  068A  01B1               	clrf	sprintf@width+1
   924                           
   925                           ;doprnt.c: 565: flag = 0;
   926  068B  01AB               	clrf	sprintf@flag
   927  068C  2E92               	goto	l1159
   928  068D                     l170:	
   929                           ;doprnt.c: 596: case '0':
   930                           
   931                           
   932                           ;doprnt.c: 597: flag |= 0x04;
   933  068D  152B               	bsf	sprintf@flag,2
   934  068E                     l1155:
   935                           
   936                           ;doprnt.c: 598: f++;
   937  068E  3001               	movlw	1
   938  068F  00A7               	movwf	??_sprintf
   939  0690  0827               	movf	??_sprintf,w
   940  0691  07A0               	addwf	sprintf@f,f
   941  0692                     l1159:	
   942                           ;doprnt.c: 599: continue;
   943                           
   944  0692  0820               	movf	sprintf@f,w
   945  0693  0084               	movwf	4
   946  0694  120A  118A  200D  120A  118A  	fcall	stringdir
   947                           
   948                           ; Switch size 1, requested type "simple"
   949                           ; Number of cases is 1, Range of values is 48 to 48
   950                           ; switch strategies available:
   951                           ; Name         Instructions Cycles
   952                           ; simple_byte            4     3 (average)
   953                           ; direct_byte           14    11 (fixed)
   954                           ; jumptable            263     9 (fixed)
   955                           ;	Chosen strategy is simple_byte
   956  0699  3A30               	xorlw	48	; case 48
   957  069A  1903               	skipnz
   958  069B  2E8D               	goto	l170
   959  069C  2E9D               	goto	l1161
   960  069D                     l1161:
   961                           
   962                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
   963  069D  0820               	movf	sprintf@f,w
   964  069E  0084               	movwf	4
   965  069F  120A  118A  200D  120A  118A  	fcall	stringdir
   966  06A4  120A  118A  2434  120A  118A  	fcall	_isdigit
   967  06A9  1C03               	btfss	3,0
   968  06AA  2EAC               	goto	u701
   969  06AB  2EAD               	goto	u700
   970  06AC                     u701:
   971  06AC  2EF3               	goto	l1177
   972  06AD                     u700:
   973  06AD                     l1163:
   974                           
   975                           ;doprnt.c: 615: width = 0;
   976  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   977  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   978  06AF  01B0               	clrf	sprintf@width
   979  06B0  01B1               	clrf	sprintf@width+1
   980  06B1                     l1165:
   981                           
   982                           ;doprnt.c: 617: width *= 10;
   983  06B1  300A               	movlw	10
   984  06B2  00F0               	movwf	___wmul@multiplier
   985  06B3  3000               	movlw	0
   986  06B4  00F1               	movwf	___wmul@multiplier+1
   987  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   988  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   989  06B7  0831               	movf	sprintf@width+1,w
   990  06B8  00F3               	movwf	___wmul@multiplicand+1
   991  06B9  0830               	movf	sprintf@width,w
   992  06BA  00F2               	movwf	___wmul@multiplicand
   993  06BB  120A  118A  2469  120A  118A  	fcall	___wmul
   994  06C0  0871               	movf	?___wmul+1,w
   995  06C1  1283               	bcf	3,5	;RP0=0, select bank0
   996  06C2  1303               	bcf	3,6	;RP1=0, select bank0
   997  06C3  00B1               	movwf	sprintf@width+1
   998  06C4  0870               	movf	?___wmul,w
   999  06C5  00B0               	movwf	sprintf@width
  1000  06C6                     l1167:
  1001                           
  1002                           ;doprnt.c: 618: width += *f++ - '0';
  1003  06C6  0820               	movf	sprintf@f,w
  1004  06C7  0084               	movwf	4
  1005  06C8  120A  118A  200D  120A  118A  	fcall	stringdir
  1006  06CD  3ED0               	addlw	208
  1007  06CE  00A7               	movwf	??_sprintf
  1008  06CF  30FF               	movlw	255
  1009  06D0  1803               	skipnc
  1010  06D1  3000               	movlw	0
  1011  06D2  00A8               	movwf	??_sprintf+1
  1012  06D3  0827               	movf	??_sprintf,w
  1013  06D4  07B0               	addwf	sprintf@width,f
  1014  06D5  1803               	skipnc
  1015  06D6  0AB1               	incf	sprintf@width+1,f
  1016  06D7  0828               	movf	??_sprintf+1,w
  1017  06D8  07B1               	addwf	sprintf@width+1,f
  1018  06D9                     l1169:
  1019  06D9  3001               	movlw	1
  1020  06DA  00A7               	movwf	??_sprintf
  1021  06DB  0827               	movf	??_sprintf,w
  1022  06DC  07A0               	addwf	sprintf@f,f
  1023  06DD                     l1171:
  1024                           
  1025                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  1026  06DD  0820               	movf	sprintf@f,w
  1027  06DE  0084               	movwf	4
  1028  06DF  120A  118A  200D  120A  118A  	fcall	stringdir
  1029  06E4  120A  118A  2434  120A  118A  	fcall	_isdigit
  1030  06E9  1803               	btfsc	3,0
  1031  06EA  2EEC               	goto	u711
  1032  06EB  2EED               	goto	u710
  1033  06EC                     u711:
  1034  06EC  2EB1               	goto	l1165
  1035  06ED                     u710:
  1036  06ED  2EF3               	goto	l1177
  1037  06EE                     l1173:
  1038                           
  1039                           ;doprnt.c: 844: flag |= 0xC0;
  1040  06EE  30C0               	movlw	192
  1041  06EF  00A7               	movwf	??_sprintf
  1042  06F0  0827               	movf	??_sprintf,w
  1043  06F1  04AB               	iorwf	sprintf@flag,f
  1044                           
  1045                           ;doprnt.c: 845: break;
  1046  06F2  2F07               	goto	l1179
  1047  06F3                     l1177:
  1048  06F3  3001               	movlw	1
  1049  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  1050  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  1051  06F6  07A0               	addwf	sprintf@f,f
  1052  06F7  30FF               	movlw	-1
  1053  06F8  0720               	addwf	sprintf@f,w
  1054  06F9  0084               	movwf	4
  1055  06FA  120A  118A  200D  120A  118A  	fcall	stringdir
  1056  06FF  00B2               	movwf	sprintf@c
  1057                           
  1058                           ; Switch size 1, requested type "simple"
  1059                           ; Number of cases is 2, Range of values is 0 to 117
  1060                           ; switch strategies available:
  1061                           ; Name         Instructions Cycles
  1062                           ; simple_byte            7     4 (average)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065  0700  3A00               	xorlw	0	; case 0
  1066  0701  1903               	skipnz
  1067  0702  2FEE               	goto	l1231
  1068  0703  3A75               	xorlw	117	; case 117
  1069  0704  1903               	skipnz
  1070  0705  2EEE               	goto	l1173
  1071  0706  2FDC               	goto	l1229
  1072  0707                     l1179:
  1073                           
  1074                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  1075  0707  082A               	movf	sprintf@ap,w
  1076  0708  0084               	movwf	4
  1077  0709  1383               	bcf	3,7	;select IRP bank0
  1078  070A  0800               	movf	0,w
  1079  070B  00AC               	movwf	sprintf@val
  1080  070C  0A84               	incf	4,f
  1081  070D  0800               	movf	0,w
  1082  070E  00AD               	movwf	sprintf@val+1
  1083  070F                     l1181:
  1084  070F  3002               	movlw	2
  1085  0710  00A7               	movwf	??_sprintf
  1086  0711  0827               	movf	??_sprintf,w
  1087  0712  07AA               	addwf	sprintf@ap,f
  1088  0713                     l1183:
  1089                           
  1090                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  1091  0713  01B2               	clrf	sprintf@c
  1092  0714  0AB2               	incf	sprintf@c,f
  1093  0715                     l1189:
  1094                           
  1095                           ;doprnt.c: 1332: if(val < dpowers[c])
  1096  0715  0832               	movf	sprintf@c,w
  1097  0716  00A7               	movwf	??_sprintf
  1098  0717  0727               	addwf	??_sprintf,w
  1099  0718  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1100  0719  0084               	movwf	4
  1101  071A  120A  118A  200D  120A  118A  	fcall	stringdir
  1102  071F  00A8               	movwf	??_sprintf+1
  1103  0720  120A  118A  200D  120A  118A  	fcall	stringdir
  1104  0725  00A9               	movwf	??_sprintf+2
  1105  0726  0829               	movf	??_sprintf+2,w
  1106  0727  022D               	subwf	sprintf@val+1,w
  1107  0728  1D03               	skipz
  1108  0729  2F2C               	goto	u725
  1109  072A  0828               	movf	??_sprintf+1,w
  1110  072B  022C               	subwf	sprintf@val,w
  1111  072C                     u725:
  1112  072C  1803               	skipnc
  1113  072D  2F2F               	goto	u721
  1114  072E  2F30               	goto	u720
  1115  072F                     u721:
  1116  072F  2F31               	goto	l1193
  1117  0730                     u720:
  1118  0730  2F3B               	goto	l1195
  1119  0731                     l1193:
  1120  0731  3001               	movlw	1
  1121  0732  00A7               	movwf	??_sprintf
  1122  0733  0827               	movf	??_sprintf,w
  1123  0734  07B2               	addwf	sprintf@c,f
  1124  0735  3005               	movlw	5
  1125  0736  0632               	xorwf	sprintf@c,w
  1126  0737  1D03               	btfss	3,2
  1127  0738  2F3A               	goto	u731
  1128  0739  2F3B               	goto	u730
  1129  073A                     u731:
  1130  073A  2F15               	goto	l1189
  1131  073B                     u730:
  1132  073B                     l1195:
  1133                           
  1134                           ;doprnt.c: 1407: if(width > c)
  1135  073B  0831               	movf	sprintf@width+1,w
  1136  073C  3A80               	xorlw	128
  1137  073D  3C80               	sublw	128
  1138  073E  1D03               	skipz
  1139  073F  2F42               	goto	u745
  1140  0740  0830               	movf	sprintf@width,w
  1141  0741  0232               	subwf	sprintf@c,w
  1142  0742                     u745:
  1143  0742  1803               	skipnc
  1144  0743  2F45               	goto	u741
  1145  0744  2F46               	goto	u740
  1146  0745                     u741:
  1147  0745  2F52               	goto	l1199
  1148  0746                     u740:
  1149  0746                     l1197:
  1150                           
  1151                           ;doprnt.c: 1408: width -= c;
  1152  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0748  0832               	movf	sprintf@c,w
  1155  0749  00A7               	movwf	??_sprintf
  1156  074A  01A8               	clrf	??_sprintf+1
  1157  074B  0827               	movf	??_sprintf,w
  1158  074C  02B0               	subwf	sprintf@width,f
  1159  074D  0828               	movf	??_sprintf+1,w
  1160  074E  1C03               	skipc
  1161  074F  03B1               	decf	sprintf@width+1,f
  1162  0750  02B1               	subwf	sprintf@width+1,f
  1163  0751  2F56               	goto	l1201
  1164  0752                     l1199:
  1165                           
  1166                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  1167  0752  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0753  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0754  01B0               	clrf	sprintf@width
  1170  0755  01B1               	clrf	sprintf@width+1
  1171  0756                     l1201:
  1172                           
  1173                           ;doprnt.c: 1413: if(flag & 0x04) {
  1174  0756  1D2B               	btfss	sprintf@flag,2
  1175  0757  2F59               	goto	u751
  1176  0758  2F5A               	goto	u750
  1177  0759                     u751:
  1178  0759  2F78               	goto	l1211
  1179  075A                     u750:
  1180  075A                     l1203:
  1181                           
  1182                           ;doprnt.c: 1441: if(width)
  1183  075A  0830               	movf	sprintf@width,w
  1184  075B  0431               	iorwf	sprintf@width+1,w
  1185  075C  1903               	btfsc	3,2
  1186  075D  2F5F               	goto	u761
  1187  075E  2F60               	goto	u760
  1188  075F                     u761:
  1189  075F  2F95               	goto	l1219
  1190  0760                     u760:
  1191  0760                     l1205:
  1192                           
  1193                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  1194  0760  3030               	movlw	48
  1195  0761  00A7               	movwf	??_sprintf
  1196  0762  082F               	movf	sprintf@sp,w
  1197  0763  0084               	movwf	4
  1198  0764  0827               	movf	??_sprintf,w
  1199  0765  1383               	bcf	3,7	;select IRP bank0
  1200  0766  0080               	movwf	0
  1201  0767                     l1207:
  1202  0767  3001               	movlw	1
  1203  0768  00A7               	movwf	??_sprintf
  1204  0769  0827               	movf	??_sprintf,w
  1205  076A  07AF               	addwf	sprintf@sp,f
  1206  076B                     l1209:
  1207                           
  1208                           ;doprnt.c: 1444: while(--width);
  1209  076B  30FF               	movlw	255
  1210  076C  07B0               	addwf	sprintf@width,f
  1211  076D  1803               	skipnc
  1212  076E  0AB1               	incf	sprintf@width+1,f
  1213  076F  30FF               	movlw	255
  1214  0770  07B1               	addwf	sprintf@width+1,f
  1215  0771  0830               	movf	sprintf@width,w
  1216  0772  0431               	iorwf	sprintf@width+1,w
  1217  0773  1D03               	btfss	3,2
  1218  0774  2F76               	goto	u771
  1219  0775  2F77               	goto	u770
  1220  0776                     u771:
  1221  0776  2F60               	goto	l1205
  1222  0777                     u770:
  1223  0777  2F95               	goto	l1219
  1224  0778                     l1211:
  1225                           
  1226                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  1227  0778  0830               	movf	sprintf@width,w
  1228  0779  0431               	iorwf	sprintf@width+1,w
  1229  077A  1903               	btfsc	3,2
  1230  077B  2F7D               	goto	u781
  1231  077C  2F7E               	goto	u780
  1232  077D                     u781:
  1233  077D  2F95               	goto	l1219
  1234  077E                     u780:
  1235  077E                     l1213:
  1236                           
  1237                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  1238  077E  3020               	movlw	32
  1239  077F  00A7               	movwf	??_sprintf
  1240  0780  082F               	movf	sprintf@sp,w
  1241  0781  0084               	movwf	4
  1242  0782  0827               	movf	??_sprintf,w
  1243  0783  1383               	bcf	3,7	;select IRP bank0
  1244  0784  0080               	movwf	0
  1245  0785                     l1215:
  1246  0785  3001               	movlw	1
  1247  0786  00A7               	movwf	??_sprintf
  1248  0787  0827               	movf	??_sprintf,w
  1249  0788  07AF               	addwf	sprintf@sp,f
  1250  0789                     l1217:
  1251                           
  1252                           ;doprnt.c: 1457: while(--width);
  1253  0789  30FF               	movlw	255
  1254  078A  07B0               	addwf	sprintf@width,f
  1255  078B  1803               	skipnc
  1256  078C  0AB1               	incf	sprintf@width+1,f
  1257  078D  30FF               	movlw	255
  1258  078E  07B1               	addwf	sprintf@width+1,f
  1259  078F  0830               	movf	sprintf@width,w
  1260  0790  0431               	iorwf	sprintf@width+1,w
  1261  0791  1D03               	btfss	3,2
  1262  0792  2F94               	goto	u791
  1263  0793  2F95               	goto	u790
  1264  0794                     u791:
  1265  0794  2F7E               	goto	l1213
  1266  0795                     u790:
  1267  0795                     l1219:
  1268                           
  1269                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1270  0795  0832               	movf	sprintf@c,w
  1271  0796  00A7               	movwf	??_sprintf
  1272  0797  0827               	movf	??_sprintf,w
  1273  0798  00AE               	movwf	sprintf@prec
  1274                           
  1275                           ;doprnt.c: 1500: while(prec--) {
  1276  0799  2FD3               	goto	l1227
  1277  079A                     l1221:
  1278                           
  1279                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1280  079A  300A               	movlw	10
  1281  079B  00F8               	movwf	___lwmod@divisor
  1282  079C  3000               	movlw	0
  1283  079D  00F9               	movwf	___lwmod@divisor+1
  1284  079E  082E               	movf	sprintf@prec,w
  1285  079F  00A7               	movwf	??_sprintf
  1286  07A0  0727               	addwf	??_sprintf,w
  1287  07A1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1288  07A2  0084               	movwf	4
  1289  07A3  120A  118A  200D  120A  118A  	fcall	stringdir
  1290  07A8  00F0               	movwf	___lwdiv@divisor
  1291  07A9  120A  118A  200D  120A  118A  	fcall	stringdir
  1292  07AE  00F1               	movwf	___lwdiv@divisor+1
  1293  07AF  082D               	movf	sprintf@val+1,w
  1294  07B0  00F3               	movwf	___lwdiv@dividend+1
  1295  07B1  082C               	movf	sprintf@val,w
  1296  07B2  00F2               	movwf	___lwdiv@dividend
  1297  07B3  120A  118A  25A8  120A  118A  	fcall	___lwdiv
  1298  07B8  0871               	movf	?___lwdiv+1,w
  1299  07B9  00FB               	movwf	___lwmod@dividend+1
  1300  07BA  0870               	movf	?___lwdiv,w
  1301  07BB  00FA               	movwf	___lwmod@dividend
  1302  07BC  120A  118A  256E  120A  118A  	fcall	___lwmod
  1303  07C1  0878               	movf	?___lwmod,w
  1304  07C2  3E30               	addlw	48
  1305  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1306  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1307  07C5  00A8               	movwf	??_sprintf+1
  1308  07C6  0828               	movf	??_sprintf+1,w
  1309  07C7  00B2               	movwf	sprintf@c
  1310  07C8                     l1223:
  1311                           
  1312                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  1313  07C8  0832               	movf	sprintf@c,w
  1314  07C9  00A7               	movwf	??_sprintf
  1315  07CA  082F               	movf	sprintf@sp,w
  1316  07CB  0084               	movwf	4
  1317  07CC  0827               	movf	??_sprintf,w
  1318  07CD  1383               	bcf	3,7	;select IRP bank0
  1319  07CE  0080               	movwf	0
  1320  07CF                     l1225:
  1321  07CF  3001               	movlw	1
  1322  07D0  00A7               	movwf	??_sprintf
  1323  07D1  0827               	movf	??_sprintf,w
  1324  07D2  07AF               	addwf	sprintf@sp,f
  1325  07D3                     l1227:
  1326  07D3  30FF               	movlw	255
  1327  07D4  00A7               	movwf	??_sprintf
  1328  07D5  0827               	movf	??_sprintf,w
  1329  07D6  07AE               	addwf	sprintf@prec,f
  1330  07D7  0A2E               	incf	sprintf@prec,w
  1331  07D8  1D03               	btfss	3,2
  1332  07D9  2FDB               	goto	u801
  1333  07DA  2FDC               	goto	u800
  1334  07DB                     u801:
  1335  07DB  2F9A               	goto	l1221
  1336  07DC                     u800:
  1337  07DC                     l1229:
  1338  07DC  3001               	movlw	1
  1339  07DD  07A0               	addwf	sprintf@f,f
  1340  07DE  30FF               	movlw	-1
  1341  07DF  0720               	addwf	sprintf@f,w
  1342  07E0  0084               	movwf	4
  1343  07E1  120A  118A  200D  120A  118A  	fcall	stringdir
  1344  07E6  00A7               	movwf	??_sprintf
  1345  07E7  0827               	movf	??_sprintf,w
  1346  07E8  00B2               	movwf	sprintf@c
  1347  07E9  0832               	movf	sprintf@c,w
  1348  07EA  1D03               	btfss	3,2
  1349  07EB  2FED               	goto	u811
  1350  07EC  2FEE               	goto	u810
  1351  07ED                     u811:
  1352  07ED  2E77               	goto	l1147
  1353  07EE                     u810:
  1354  07EE                     l1231:
  1355                           
  1356                           ;doprnt.c: 1564: *sp = 0;
  1357  07EE  082F               	movf	sprintf@sp,w
  1358  07EF  0084               	movwf	4
  1359  07F0  1383               	bcf	3,7	;select IRP bank0
  1360  07F1  0180               	clrf	0
  1361  07F2                     l200:
  1362  07F2  0008               	return
  1363  07F3                     __end_of_sprintf:
  1364                           
  1365                           	psect	text2
  1366  0434                     __ptext2:	
  1367 ;; *************** function _isdigit *****************
  1368 ;; Defined at:
  1369 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  c               1    wreg     unsigned char 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  c               1    1[COMMON] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;		None               void
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1383 ;;      Params:         0       0       0       0       0
  1384 ;;      Locals:         2       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0
  1386 ;;      Totals:         2       0       0       0       0
  1387 ;;Total ram usage:        2 bytes
  1388 ;; Hardware stack levels used: 1
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sprintf
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396  0434                     _isdigit:	
  1397                           ;psect for function _isdigit
  1398                           
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1402                           ;isdigit@c stored from wreg
  1403  0434  00F1               	movwf	isdigit@c
  1404  0435                     l1033:
  1405  0435  01F0               	clrf	_isdigit$594
  1406  0436                     l1035:
  1407  0436  303A               	movlw	58
  1408  0437  0271               	subwf	isdigit@c,w
  1409  0438  1803               	skipnc
  1410  0439  2C3B               	goto	u461
  1411  043A  2C3C               	goto	u460
  1412  043B                     u461:
  1413  043B  2C44               	goto	l1041
  1414  043C                     u460:
  1415  043C                     l1037:
  1416  043C  3030               	movlw	48
  1417  043D  0271               	subwf	isdigit@c,w
  1418  043E  1C03               	skipc
  1419  043F  2C41               	goto	u471
  1420  0440  2C42               	goto	u470
  1421  0441                     u471:
  1422  0441  2C44               	goto	l1041
  1423  0442                     u470:
  1424  0442                     l1039:
  1425  0442  01F0               	clrf	_isdigit$594
  1426  0443  0AF0               	incf	_isdigit$594,f
  1427  0444                     l1041:
  1428  0444  0C70               	rrf	_isdigit$594,w
  1429  0445                     l657:
  1430  0445  0008               	return
  1431  0446                     __end_of_isdigit:
  1432                           
  1433                           	psect	text3
  1434  0469                     __ptext3:	
  1435 ;; *************** function ___wmul *****************
  1436 ;; Defined at:
  1437 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  multiplier      2    0[COMMON] unsigned int 
  1440 ;;  multiplicand    2    2[COMMON] unsigned int 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  product         2    4[COMMON] unsigned int 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  2    0[COMMON] unsigned int 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         4       0       0       0       0
  1453 ;;      Locals:         2       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         6       0       0       0       0
  1456 ;;Total ram usage:        6 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; This function calls:
  1459 ;;		Nothing
  1460 ;; This function is called by:
  1461 ;;		_sprintf
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465  0469                     ___wmul:	
  1466                           ;psect for function ___wmul
  1467                           
  1468  0469                     l1045:	
  1469                           ;incstack = 0
  1470                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1471                           
  1472  0469  01F4               	clrf	___wmul@product
  1473  046A  01F5               	clrf	___wmul@product+1
  1474  046B                     l1047:
  1475  046B  1C70               	btfss	___wmul@multiplier,0
  1476  046C  2C6E               	goto	u481
  1477  046D  2C6F               	goto	u480
  1478  046E                     u481:
  1479  046E  2C75               	goto	l204
  1480  046F                     u480:
  1481  046F                     l1049:
  1482  046F  0872               	movf	___wmul@multiplicand,w
  1483  0470  07F4               	addwf	___wmul@product,f
  1484  0471  1803               	skipnc
  1485  0472  0AF5               	incf	___wmul@product+1,f
  1486  0473  0873               	movf	___wmul@multiplicand+1,w
  1487  0474  07F5               	addwf	___wmul@product+1,f
  1488  0475                     l204:
  1489  0475  3001               	movlw	1
  1490  0476                     u495:
  1491  0476  1003               	clrc
  1492  0477  0DF2               	rlf	___wmul@multiplicand,f
  1493  0478  0DF3               	rlf	___wmul@multiplicand+1,f
  1494  0479  3EFF               	addlw	-1
  1495  047A  1D03               	skipz
  1496  047B  2C76               	goto	u495
  1497  047C                     l1051:
  1498  047C  3001               	movlw	1
  1499  047D                     u505:
  1500  047D  1003               	clrc
  1501  047E  0CF1               	rrf	___wmul@multiplier+1,f
  1502  047F  0CF0               	rrf	___wmul@multiplier,f
  1503  0480  3EFF               	addlw	-1
  1504  0481  1D03               	skipz
  1505  0482  2C7D               	goto	u505
  1506  0483                     l1053:
  1507  0483  0870               	movf	___wmul@multiplier,w
  1508  0484  0471               	iorwf	___wmul@multiplier+1,w
  1509  0485  1D03               	btfss	3,2
  1510  0486  2C88               	goto	u511
  1511  0487  2C89               	goto	u510
  1512  0488                     u511:
  1513  0488  2C6B               	goto	l1047
  1514  0489                     u510:
  1515  0489                     l1055:
  1516  0489  0875               	movf	___wmul@product+1,w
  1517  048A  00F1               	movwf	?___wmul+1
  1518  048B  0874               	movf	___wmul@product,w
  1519  048C  00F0               	movwf	?___wmul
  1520  048D                     l206:
  1521  048D  0008               	return
  1522  048E                     __end_of___wmul:
  1523                           
  1524                           	psect	text4
  1525  056E                     __ptext4:	
  1526 ;; *************** function ___lwmod *****************
  1527 ;; Defined at:
  1528 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  divisor         2    8[COMMON] unsigned int 
  1531 ;;  dividend        2   10[COMMON] unsigned int 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  counter         1   13[COMMON] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  2    8[COMMON] unsigned int 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1543 ;;      Params:         4       0       0       0       0
  1544 ;;      Locals:         1       0       0       0       0
  1545 ;;      Temps:          1       0       0       0       0
  1546 ;;      Totals:         6       0       0       0       0
  1547 ;;Total ram usage:        6 bytes
  1548 ;; Hardware stack levels used: 1
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_sprintf
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556  056E                     ___lwmod:	
  1557                           ;psect for function ___lwmod
  1558                           
  1559  056E                     l1085:	
  1560                           ;incstack = 0
  1561                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1562                           
  1563  056E  0878               	movf	___lwmod@divisor,w
  1564  056F  0479               	iorwf	___lwmod@divisor+1,w
  1565  0570  1903               	btfsc	3,2
  1566  0571  2D73               	goto	u591
  1567  0572  2D74               	goto	u590
  1568  0573                     u591:
  1569  0573  2DA3               	goto	l1103
  1570  0574                     u590:
  1571  0574                     l1087:
  1572  0574  01FD               	clrf	___lwmod@counter
  1573  0575  0AFD               	incf	___lwmod@counter,f
  1574  0576  2D82               	goto	l1093
  1575  0577                     l1089:
  1576  0577  3001               	movlw	1
  1577  0578                     u605:
  1578  0578  1003               	clrc
  1579  0579  0DF8               	rlf	___lwmod@divisor,f
  1580  057A  0DF9               	rlf	___lwmod@divisor+1,f
  1581  057B  3EFF               	addlw	-1
  1582  057C  1D03               	skipz
  1583  057D  2D78               	goto	u605
  1584  057E                     l1091:
  1585  057E  3001               	movlw	1
  1586  057F  00FC               	movwf	??___lwmod
  1587  0580  087C               	movf	??___lwmod,w
  1588  0581  07FD               	addwf	___lwmod@counter,f
  1589  0582                     l1093:
  1590  0582  1FF9               	btfss	___lwmod@divisor+1,7
  1591  0583  2D85               	goto	u611
  1592  0584  2D86               	goto	u610
  1593  0585                     u611:
  1594  0585  2D77               	goto	l1089
  1595  0586                     u610:
  1596  0586                     l1095:
  1597  0586  0879               	movf	___lwmod@divisor+1,w
  1598  0587  027B               	subwf	___lwmod@dividend+1,w
  1599  0588  1D03               	skipz
  1600  0589  2D8C               	goto	u625
  1601  058A  0878               	movf	___lwmod@divisor,w
  1602  058B  027A               	subwf	___lwmod@dividend,w
  1603  058C                     u625:
  1604  058C  1C03               	skipc
  1605  058D  2D8F               	goto	u621
  1606  058E  2D90               	goto	u620
  1607  058F                     u621:
  1608  058F  2D96               	goto	l1099
  1609  0590                     u620:
  1610  0590                     l1097:
  1611  0590  0878               	movf	___lwmod@divisor,w
  1612  0591  02FA               	subwf	___lwmod@dividend,f
  1613  0592  0879               	movf	___lwmod@divisor+1,w
  1614  0593  1C03               	skipc
  1615  0594  03FB               	decf	___lwmod@dividend+1,f
  1616  0595  02FB               	subwf	___lwmod@dividend+1,f
  1617  0596                     l1099:
  1618  0596  3001               	movlw	1
  1619  0597                     u635:
  1620  0597  1003               	clrc
  1621  0598  0CF9               	rrf	___lwmod@divisor+1,f
  1622  0599  0CF8               	rrf	___lwmod@divisor,f
  1623  059A  3EFF               	addlw	-1
  1624  059B  1D03               	skipz
  1625  059C  2D97               	goto	u635
  1626  059D                     l1101:
  1627  059D  3001               	movlw	1
  1628  059E  02FD               	subwf	___lwmod@counter,f
  1629  059F  1D03               	btfss	3,2
  1630  05A0  2DA2               	goto	u641
  1631  05A1  2DA3               	goto	u640
  1632  05A2                     u641:
  1633  05A2  2D86               	goto	l1095
  1634  05A3                     u640:
  1635  05A3                     l1103:
  1636  05A3  087B               	movf	___lwmod@dividend+1,w
  1637  05A4  00F9               	movwf	?___lwmod+1
  1638  05A5  087A               	movf	___lwmod@dividend,w
  1639  05A6  00F8               	movwf	?___lwmod
  1640  05A7                     l486:
  1641  05A7  0008               	return
  1642  05A8                     __end_of___lwmod:
  1643                           
  1644                           	psect	text5
  1645  05A8                     __ptext5:	
  1646 ;; *************** function ___lwdiv *****************
  1647 ;; Defined at:
  1648 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  divisor         2    0[COMMON] unsigned int 
  1651 ;;  dividend        2    2[COMMON] unsigned int 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  quotient        2    5[COMMON] unsigned int 
  1654 ;;  counter         1    7[COMMON] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2    0[COMMON] unsigned int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1664 ;;      Params:         4       0       0       0       0
  1665 ;;      Locals:         3       0       0       0       0
  1666 ;;      Temps:          1       0       0       0       0
  1667 ;;      Totals:         8       0       0       0       0
  1668 ;;Total ram usage:        8 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_sprintf
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677  05A8                     ___lwdiv:	
  1678                           ;psect for function ___lwdiv
  1679                           
  1680  05A8                     l1059:	
  1681                           ;incstack = 0
  1682                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1683                           
  1684  05A8  01F5               	clrf	___lwdiv@quotient
  1685  05A9  01F6               	clrf	___lwdiv@quotient+1
  1686  05AA                     l1061:
  1687  05AA  0870               	movf	___lwdiv@divisor,w
  1688  05AB  0471               	iorwf	___lwdiv@divisor+1,w
  1689  05AC  1903               	btfsc	3,2
  1690  05AD  2DAF               	goto	u521
  1691  05AE  2DB0               	goto	u520
  1692  05AF                     u521:
  1693  05AF  2DE7               	goto	l1081
  1694  05B0                     u520:
  1695  05B0                     l1063:
  1696  05B0  01F7               	clrf	___lwdiv@counter
  1697  05B1  0AF7               	incf	___lwdiv@counter,f
  1698  05B2  2DBE               	goto	l1069
  1699  05B3                     l1065:
  1700  05B3  3001               	movlw	1
  1701  05B4                     u535:
  1702  05B4  1003               	clrc
  1703  05B5  0DF0               	rlf	___lwdiv@divisor,f
  1704  05B6  0DF1               	rlf	___lwdiv@divisor+1,f
  1705  05B7  3EFF               	addlw	-1
  1706  05B8  1D03               	skipz
  1707  05B9  2DB4               	goto	u535
  1708  05BA                     l1067:
  1709  05BA  3001               	movlw	1
  1710  05BB  00F4               	movwf	??___lwdiv
  1711  05BC  0874               	movf	??___lwdiv,w
  1712  05BD  07F7               	addwf	___lwdiv@counter,f
  1713  05BE                     l1069:
  1714  05BE  1FF1               	btfss	___lwdiv@divisor+1,7
  1715  05BF  2DC1               	goto	u541
  1716  05C0  2DC2               	goto	u540
  1717  05C1                     u541:
  1718  05C1  2DB3               	goto	l1065
  1719  05C2                     u540:
  1720  05C2                     l1071:
  1721  05C2  3001               	movlw	1
  1722  05C3                     u555:
  1723  05C3  1003               	clrc
  1724  05C4  0DF5               	rlf	___lwdiv@quotient,f
  1725  05C5  0DF6               	rlf	___lwdiv@quotient+1,f
  1726  05C6  3EFF               	addlw	-1
  1727  05C7  1D03               	skipz
  1728  05C8  2DC3               	goto	u555
  1729  05C9  0871               	movf	___lwdiv@divisor+1,w
  1730  05CA  0273               	subwf	___lwdiv@dividend+1,w
  1731  05CB  1D03               	skipz
  1732  05CC  2DCF               	goto	u565
  1733  05CD  0870               	movf	___lwdiv@divisor,w
  1734  05CE  0272               	subwf	___lwdiv@dividend,w
  1735  05CF                     u565:
  1736  05CF  1C03               	skipc
  1737  05D0  2DD2               	goto	u561
  1738  05D1  2DD3               	goto	u560
  1739  05D2                     u561:
  1740  05D2  2DDA               	goto	l1077
  1741  05D3                     u560:
  1742  05D3                     l1073:
  1743  05D3  0870               	movf	___lwdiv@divisor,w
  1744  05D4  02F2               	subwf	___lwdiv@dividend,f
  1745  05D5  0871               	movf	___lwdiv@divisor+1,w
  1746  05D6  1C03               	skipc
  1747  05D7  03F3               	decf	___lwdiv@dividend+1,f
  1748  05D8  02F3               	subwf	___lwdiv@dividend+1,f
  1749  05D9                     l1075:
  1750  05D9  1475               	bsf	___lwdiv@quotient,0
  1751  05DA                     l1077:
  1752  05DA  3001               	movlw	1
  1753  05DB                     u575:
  1754  05DB  1003               	clrc
  1755  05DC  0CF1               	rrf	___lwdiv@divisor+1,f
  1756  05DD  0CF0               	rrf	___lwdiv@divisor,f
  1757  05DE  3EFF               	addlw	-1
  1758  05DF  1D03               	skipz
  1759  05E0  2DDB               	goto	u575
  1760  05E1                     l1079:
  1761  05E1  3001               	movlw	1
  1762  05E2  02F7               	subwf	___lwdiv@counter,f
  1763  05E3  1D03               	btfss	3,2
  1764  05E4  2DE6               	goto	u581
  1765  05E5  2DE7               	goto	u580
  1766  05E6                     u581:
  1767  05E6  2DC2               	goto	l1071
  1768  05E7                     u580:
  1769  05E7                     l1081:
  1770  05E7  0876               	movf	___lwdiv@quotient+1,w
  1771  05E8  00F1               	movwf	?___lwdiv+1
  1772  05E9  0875               	movf	___lwdiv@quotient,w
  1773  05EA  00F0               	movwf	?___lwdiv
  1774  05EB                     l476:
  1775  05EB  0008               	return
  1776  05EC                     __end_of___lwdiv:
  1777                           
  1778                           	psect	text6
  1779  053E                     __ptext6:	
  1780 ;; *************** function _LCD_Initialize *****************
  1781 ;; Defined at:
  1782 ;;		line 46 in file "lcd.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1796 ;;      Params:         0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0
  1798 ;;      Temps:          2       0       0       0       0
  1799 ;;      Totals:         2       0       0       0       0
  1800 ;;Total ram usage:        2 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; Hardware stack levels required when called: 2
  1803 ;; This function calls:
  1804 ;;		_LCDPutCmd
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810  053E                     _LCD_Initialize:	
  1811                           ;psect for function _LCD_Initialize
  1812                           
  1813  053E                     l1107:	
  1814                           ;incstack = 0
  1815                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1816                           
  1817                           
  1818                           ;lcd.c: 49: PORTD = 0;
  1819  053E  1283               	bcf	3,5	;RP0=0, select bank0
  1820  053F  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0540  0188               	clrf	8	;volatile
  1822                           
  1823                           ;lcd.c: 51: TRISD = 0x00;
  1824  0541  1683               	bsf	3,5	;RP0=1, select bank1
  1825  0542  1303               	bcf	3,6	;RP1=0, select bank1
  1826  0543  0188               	clrf	8	;volatile
  1827  0544                     l1109:
  1828                           
  1829                           ;lcd.c: 54: PORTDbits.RD7 = 1;
  1830  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0546  1788               	bsf	8,7	;volatile
  1833  0547                     l1111:
  1834                           
  1835                           ;lcd.c: 57: _delay((unsigned long)((15)*(8000000/4000.0)));
  1836  0547  3027               	movlw	39
  1837  0548  00F8               	movwf	??_LCD_Initialize+1
  1838  0549  30F5               	movlw	245
  1839  054A  00F7               	movwf	??_LCD_Initialize
  1840  054B                     u867:
  1841  054B  0BF7               	decfsz	??_LCD_Initialize,f
  1842  054C  2D4B               	goto	u867
  1843  054D  0BF8               	decfsz	??_LCD_Initialize+1,f
  1844  054E  2D4B               	goto	u867
  1845  054F                     l1113:
  1846                           
  1847                           ;lcd.c: 60: LCDPutCmd(0x32);
  1848  054F  3032               	movlw	50
  1849  0550  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  1850  0555                     l1115:
  1851                           
  1852                           ;lcd.c: 63: LCDPutCmd(0x28);
  1853  0555  3028               	movlw	40
  1854  0556  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  1855  055B                     l1117:
  1856                           
  1857                           ;lcd.c: 66: LCDPutCmd(0x0C);
  1858  055B  300C               	movlw	12
  1859  055C  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  1860  0561                     l1119:
  1861                           
  1862                           ;lcd.c: 68: LCDPutCmd(0x01);
  1863  0561  3001               	movlw	1
  1864  0562  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  1865  0567                     l1121:
  1866                           
  1867                           ;lcd.c: 71: LCDPutCmd(0x06);
  1868  0567  3006               	movlw	6
  1869  0568  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  1870  056D                     l47:
  1871  056D  0008               	return
  1872  056E                     __end_of_LCD_Initialize:
  1873                           
  1874                           	psect	text7
  1875  04B6                     __ptext7:	
  1876 ;; *************** function _LCDPutStr *****************
  1877 ;; Defined at:
  1878 ;;		line 135 in file "lcd.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  str             2    7[COMMON] PTR const unsigned char 
  1881 ;;		 -> buffer(20), STR_1(17), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  i               1   10[COMMON] unsigned char 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  1    wreg      void 
  1886 ;; Registers used:
  1887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1893 ;;      Params:         2       0       0       0       0
  1894 ;;      Locals:         1       0       0       0       0
  1895 ;;      Temps:          1       0       0       0       0
  1896 ;;      Totals:         4       0       0       0       0
  1897 ;;Total ram usage:        4 bytes
  1898 ;; Hardware stack levels used: 1
  1899 ;; Hardware stack levels required when called: 2
  1900 ;; This function calls:
  1901 ;;		_LCDPutChar
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907  04B6                     _LCDPutStr:	
  1908                           ;psect for function _LCDPutStr
  1909                           
  1910  04B6                     l1137:	
  1911                           ;incstack = 0
  1912                           ; Regs used in _LCDPutStr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1913                           
  1914                           
  1915                           ;lcd.c: 137: uint8_t i=0;
  1916  04B6  01FA               	clrf	LCDPutStr@i
  1917                           
  1918                           ;lcd.c: 140: while (str[i])
  1919  04B7  2CCD               	goto	l1143
  1920  04B8                     l1139:
  1921                           
  1922                           ;lcd.c: 141: {;lcd.c: 143: LCDPutChar(str[i++]);
  1923  04B8  087A               	movf	LCDPutStr@i,w
  1924  04B9  0777               	addwf	LCDPutStr@str,w
  1925  04BA  0084               	movwf	4
  1926  04BB  0878               	movf	LCDPutStr@str+1,w
  1927  04BC  1803               	skipnc
  1928  04BD  0A78               	incf	LCDPutStr@str+1,w
  1929  04BE  00FF               	movwf	btemp+1
  1930  04BF  120A  118A  2003  120A  118A  	fcall	stringtab
  1931  04C4  120A  118A  248E  120A  118A  	fcall	_LCDPutChar
  1932  04C9                     l1141:
  1933  04C9  3001               	movlw	1
  1934  04CA  00F9               	movwf	??_LCDPutStr
  1935  04CB  0879               	movf	??_LCDPutStr,w
  1936  04CC  07FA               	addwf	LCDPutStr@i,f
  1937  04CD                     l1143:
  1938  04CD  087A               	movf	LCDPutStr@i,w
  1939  04CE  0777               	addwf	LCDPutStr@str,w
  1940  04CF  0084               	movwf	4
  1941  04D0  0878               	movf	LCDPutStr@str+1,w
  1942  04D1  1803               	skipnc
  1943  04D2  0A78               	incf	LCDPutStr@str+1,w
  1944  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1945  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1946  04D5  00FF               	movwf	btemp+1
  1947  04D6  120A  118A  2003  120A  118A  	fcall	stringtab
  1948  04DB  3A00               	xorlw	0
  1949  04DC  1D03               	skipz
  1950  04DD  2CDF               	goto	u681
  1951  04DE  2CE0               	goto	u680
  1952  04DF                     u681:
  1953  04DF  2CB8               	goto	l1139
  1954  04E0                     u680:
  1955  04E0                     l62:
  1956  04E0  0008               	return
  1957  04E1                     __end_of_LCDPutStr:
  1958                           
  1959                           	psect	text8
  1960  048E                     __ptext8:	
  1961 ;; *************** function _LCDPutChar *****************
  1962 ;; Defined at:
  1963 ;;		line 103 in file "lcd.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  ch              1    wreg     unsigned char 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  ch              1    6[COMMON] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, status,0, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         1       0       0       0       0
  1979 ;;      Temps:          2       0       0       0       0
  1980 ;;      Totals:         3       0       0       0       0
  1981 ;;Total ram usage:        3 bytes
  1982 ;; Hardware stack levels used: 1
  1983 ;; Hardware stack levels required when called: 1
  1984 ;; This function calls:
  1985 ;;		_LCDWriteNibble
  1986 ;; This function is called by:
  1987 ;;		_LCDPutStr
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991  048E                     _LCDPutChar:	
  1992                           ;psect for function _LCDPutChar
  1993                           
  1994                           
  1995                           ;incstack = 0
  1996                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
  1997                           ;LCDPutChar@ch stored from wreg
  1998  048E  00F6               	movwf	LCDPutChar@ch
  1999  048F                     l1025:
  2000                           
  2001                           ;lcd.c: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  2002  048F  3003               	movlw	3
  2003  0490  00F5               	movwf	??_LCDPutChar+1
  2004  0491  3097               	movlw	151
  2005  0492  00F4               	movwf	??_LCDPutChar
  2006  0493                     u877:
  2007  0493  0BF4               	decfsz	??_LCDPutChar,f
  2008  0494  2C93               	goto	u877
  2009  0495  0BF5               	decfsz	??_LCDPutChar+1,f
  2010  0496  2C93               	goto	u877
  2011  0497  2C98               	nop2
  2012  0498                     l1027:
  2013                           
  2014                           ;lcd.c: 108: LCDWriteNibble(ch,1);
  2015  0498  01F0               	clrf	LCDWriteNibble@rs
  2016  0499  0AF0               	incf	LCDWriteNibble@rs,f
  2017  049A  0876               	movf	LCDPutChar@ch,w
  2018  049B  120A  118A  2446  120A  118A  	fcall	_LCDWriteNibble
  2019  04A0                     l1029:
  2020                           
  2021                           ;lcd.c: 111: ch = (ch << 4);
  2022  04A0  0876               	movf	LCDPutChar@ch,w
  2023  04A1  00F4               	movwf	??_LCDPutChar
  2024  04A2  3003               	movlw	3
  2025  04A3                     u455:
  2026  04A3  1003               	clrc
  2027  04A4  0DF4               	rlf	??_LCDPutChar,f
  2028  04A5  3EFF               	addlw	-1
  2029  04A6  1D03               	skipz
  2030  04A7  2CA3               	goto	u455
  2031  04A8  1003               	clrc
  2032  04A9  0D74               	rlf	??_LCDPutChar,w
  2033  04AA  00F5               	movwf	??_LCDPutChar+1
  2034  04AB  0875               	movf	??_LCDPutChar+1,w
  2035  04AC  00F6               	movwf	LCDPutChar@ch
  2036  04AD                     l1031:
  2037                           
  2038                           ;lcd.c: 114: LCDWriteNibble(ch,1);
  2039  04AD  01F0               	clrf	LCDWriteNibble@rs
  2040  04AE  0AF0               	incf	LCDWriteNibble@rs,f
  2041  04AF  0876               	movf	LCDPutChar@ch,w
  2042  04B0  120A  118A  2446  120A  118A  	fcall	_LCDWriteNibble
  2043  04B5                     l53:
  2044  04B5  0008               	return
  2045  04B6                     __end_of_LCDPutChar:
  2046                           
  2047                           	psect	text9
  2048  04E1                     __ptext9:	
  2049 ;; *************** function _LCDGoto *****************
  2050 ;; Defined at:
  2051 ;;		line 148 in file "lcd.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  pos             1    wreg     unsigned char 
  2054 ;;  ln              1    7[COMMON] unsigned char 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  pos             1   12[COMMON] unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0, pclath, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2066 ;;      Params:         1       0       0       0       0
  2067 ;;      Locals:         3       0       0       0       0
  2068 ;;      Temps:          2       0       0       0       0
  2069 ;;      Totals:         6       0       0       0       0
  2070 ;;Total ram usage:        6 bytes
  2071 ;; Hardware stack levels used: 1
  2072 ;; Hardware stack levels required when called: 2
  2073 ;; This function calls:
  2074 ;;		_LCDPutCmd
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080  04E1                     _LCDGoto:	
  2081                           ;psect for function _LCDGoto
  2082                           
  2083                           
  2084                           ;incstack = 0
  2085                           ; Regs used in _LCDGoto: [wreg+status,2+status,0+pclath+cstack]
  2086                           ;LCDGoto@pos stored from wreg
  2087  04E1  00FC               	movwf	LCDGoto@pos
  2088  04E2                     l1123:
  2089                           
  2090                           ;lcd.c: 151: if ((ln > (2-1)) || (pos > (16-1)))
  2091  04E2  3002               	movlw	2
  2092  04E3  0277               	subwf	LCDGoto@ln,w
  2093  04E4  1803               	skipnc
  2094  04E5  2CE7               	goto	u651
  2095  04E6  2CE8               	goto	u650
  2096  04E7                     u651:
  2097  04E7  2D0E               	goto	l68
  2098  04E8                     u650:
  2099  04E8                     l1125:
  2100  04E8  3010               	movlw	16
  2101  04E9  027C               	subwf	LCDGoto@pos,w
  2102  04EA  1C03               	skipc
  2103  04EB  2CED               	goto	u661
  2104  04EC  2CEE               	goto	u660
  2105  04ED                     u661:
  2106  04ED  2CEF               	goto	l1127
  2107  04EE                     u660:
  2108  04EE  2D0E               	goto	l68
  2109  04EF                     l1127:
  2110                           
  2111                           ;lcd.c: 155: };lcd.c: 158: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  2112  04EF  0377               	decf	LCDGoto@ln,w
  2113  04F0  1903               	btfsc	3,2
  2114  04F1  2CF3               	goto	u671
  2115  04F2  2CF4               	goto	u670
  2116  04F3                     u671:
  2117  04F3  2CFA               	goto	l1131
  2118  04F4                     u670:
  2119  04F4                     l1129:
  2120  04F4  3080               	movlw	128
  2121  04F5  047C               	iorwf	LCDGoto@pos,w
  2122  04F6  00FA               	movwf	_LCDGoto$118
  2123  04F7  3000               	movlw	0
  2124  04F8  00FB               	movwf	_LCDGoto$118+1
  2125  04F9  2CFF               	goto	l1133
  2126  04FA                     l1131:
  2127  04FA  30C0               	movlw	192
  2128  04FB  047C               	iorwf	LCDGoto@pos,w
  2129  04FC  00FA               	movwf	_LCDGoto$118
  2130  04FD  3000               	movlw	0
  2131  04FE  00FB               	movwf	_LCDGoto$118+1
  2132  04FF                     l1133:
  2133  04FF  087A               	movf	_LCDGoto$118,w
  2134  0500  120A  118A  250F  120A  118A  	fcall	_LCDPutCmd
  2135  0505                     l1135:
  2136                           
  2137                           ;lcd.c: 161: _delay((unsigned long)((1)*(8000000/4000.0)));
  2138  0505  3003               	movlw	3
  2139  0506  00F9               	movwf	??_LCDGoto+1
  2140  0507  3097               	movlw	151
  2141  0508  00F8               	movwf	??_LCDGoto
  2142  0509                     u887:
  2143  0509  0BF8               	decfsz	??_LCDGoto,f
  2144  050A  2D09               	goto	u887
  2145  050B  0BF9               	decfsz	??_LCDGoto+1,f
  2146  050C  2D09               	goto	u887
  2147  050D  2D0E               	nop2
  2148  050E                     l68:
  2149  050E  0008               	return
  2150  050F                     __end_of_LCDGoto:
  2151                           
  2152                           	psect	text10
  2153  050F                     __ptext10:	
  2154 ;; *************** function _LCDPutCmd *****************
  2155 ;; Defined at:
  2156 ;;		line 118 in file "lcd.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  ch              1    wreg     unsigned char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  ch              1    6[COMMON] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, pclath, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2170 ;;      Params:         0       0       0       0       0
  2171 ;;      Locals:         1       0       0       0       0
  2172 ;;      Temps:          2       0       0       0       0
  2173 ;;      Totals:         3       0       0       0       0
  2174 ;;Total ram usage:        3 bytes
  2175 ;; Hardware stack levels used: 1
  2176 ;; Hardware stack levels required when called: 1
  2177 ;; This function calls:
  2178 ;;		_LCDWriteNibble
  2179 ;; This function is called by:
  2180 ;;		_LCD_Initialize
  2181 ;;		_LCDGoto
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185  050F                     _LCDPutCmd:	
  2186                           ;psect for function _LCDPutCmd
  2187                           
  2188                           
  2189                           ;incstack = 0
  2190                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
  2191                           ;LCDPutCmd@ch stored from wreg
  2192  050F  00F6               	movwf	LCDPutCmd@ch
  2193  0510                     l1015:
  2194                           
  2195                           ;lcd.c: 120: _delay((unsigned long)((1)*(8000000/4000.0)));
  2196  0510  3003               	movlw	3
  2197  0511  00F5               	movwf	??_LCDPutCmd+1
  2198  0512  3097               	movlw	151
  2199  0513  00F4               	movwf	??_LCDPutCmd
  2200  0514                     u897:
  2201  0514  0BF4               	decfsz	??_LCDPutCmd,f
  2202  0515  2D14               	goto	u897
  2203  0516  0BF5               	decfsz	??_LCDPutCmd+1,f
  2204  0517  2D14               	goto	u897
  2205  0518  2D19               	nop2
  2206  0519                     l1017:
  2207                           
  2208                           ;lcd.c: 123: LCDWriteNibble(ch,0);
  2209  0519  01F0               	clrf	LCDWriteNibble@rs
  2210  051A  0876               	movf	LCDPutCmd@ch,w
  2211  051B  120A  118A  2446  120A  118A  	fcall	_LCDWriteNibble
  2212  0520                     l1019:
  2213                           
  2214                           ;lcd.c: 126: ch = (ch << 4);
  2215  0520  0876               	movf	LCDPutCmd@ch,w
  2216  0521  00F4               	movwf	??_LCDPutCmd
  2217  0522  3003               	movlw	3
  2218  0523                     u445:
  2219  0523  1003               	clrc
  2220  0524  0DF4               	rlf	??_LCDPutCmd,f
  2221  0525  3EFF               	addlw	-1
  2222  0526  1D03               	skipz
  2223  0527  2D23               	goto	u445
  2224  0528  1003               	clrc
  2225  0529  0D74               	rlf	??_LCDPutCmd,w
  2226  052A  00F5               	movwf	??_LCDPutCmd+1
  2227  052B  0875               	movf	??_LCDPutCmd+1,w
  2228  052C  00F6               	movwf	LCDPutCmd@ch
  2229  052D                     l1021:
  2230                           
  2231                           ;lcd.c: 128: _delay((unsigned long)((1)*(8000000/4000.0)));
  2232  052D  3003               	movlw	3
  2233  052E  00F5               	movwf	??_LCDPutCmd+1
  2234  052F  3097               	movlw	151
  2235  0530  00F4               	movwf	??_LCDPutCmd
  2236  0531                     u907:
  2237  0531  0BF4               	decfsz	??_LCDPutCmd,f
  2238  0532  2D31               	goto	u907
  2239  0533  0BF5               	decfsz	??_LCDPutCmd+1,f
  2240  0534  2D31               	goto	u907
  2241  0535  2D36               	nop2
  2242  0536                     l1023:
  2243                           
  2244                           ;lcd.c: 131: LCDWriteNibble(ch,0);
  2245  0536  01F0               	clrf	LCDWriteNibble@rs
  2246  0537  0876               	movf	LCDPutCmd@ch,w
  2247  0538  120A  118A  2446  120A  118A  	fcall	_LCDWriteNibble
  2248  053D                     l56:
  2249  053D  0008               	return
  2250  053E                     __end_of_LCDPutCmd:
  2251                           
  2252                           	psect	text11
  2253  0446                     __ptext11:	
  2254 ;; *************** function _LCDWriteNibble *****************
  2255 ;; Defined at:
  2256 ;;		line 76 in file "lcd.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  ch              1    wreg     unsigned char 
  2259 ;;  rs              1    0[COMMON] unsigned char 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  ch              1    3[COMMON] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         1       0       0       0       0
  2272 ;;      Locals:         1       0       0       0       0
  2273 ;;      Temps:          2       0       0       0       0
  2274 ;;      Totals:         4       0       0       0       0
  2275 ;;Total ram usage:        4 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_LCDPutChar
  2281 ;;		_LCDPutCmd
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285  0446                     _LCDWriteNibble:	
  2286                           ;psect for function _LCDWriteNibble
  2287                           
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0]
  2291                           ;LCDWriteNibble@ch stored from wreg
  2292  0446  00F3               	movwf	LCDWriteNibble@ch
  2293  0447                     l1001:
  2294                           
  2295                           ;lcd.c: 79: ch = (ch >> 4);
  2296  0447  0873               	movf	LCDWriteNibble@ch,w
  2297  0448  00F1               	movwf	??_LCDWriteNibble
  2298  0449  3004               	movlw	4
  2299  044A                     u435:
  2300  044A  1003               	clrc
  2301  044B  0CF1               	rrf	??_LCDWriteNibble,f
  2302  044C  3EFF               	addlw	-1
  2303  044D  1D03               	skipz
  2304  044E  2C4A               	goto	u435
  2305  044F  0871               	movf	??_LCDWriteNibble,w
  2306  0450  00F2               	movwf	??_LCDWriteNibble+1
  2307  0451  0872               	movf	??_LCDWriteNibble+1,w
  2308  0452  00F3               	movwf	LCDWriteNibble@ch
  2309  0453                     l1003:
  2310                           
  2311                           ;lcd.c: 82: ch = (ch & 0x0F);
  2312  0453  0873               	movf	LCDWriteNibble@ch,w
  2313  0454  390F               	andlw	15
  2314  0455  00F1               	movwf	??_LCDWriteNibble
  2315  0456  0871               	movf	??_LCDWriteNibble,w
  2316  0457  00F3               	movwf	LCDWriteNibble@ch
  2317  0458                     l1005:
  2318                           
  2319                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
  2320  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2322  045A  0808               	movf	8,w	;volatile
  2323  045B  39F0               	andlw	240
  2324  045C  0088               	movwf	8	;volatile
  2325                           
  2326                           ;lcd.c: 88: PORTD = (PORTD | ch);
  2327  045D  0808               	movf	8,w	;volatile
  2328  045E  0473               	iorwf	LCDWriteNibble@ch,w
  2329  045F  0088               	movwf	8	;volatile
  2330  0460                     l1007:
  2331                           
  2332                           ;lcd.c: 91: PORTDbits.RD4 = rs;
  2333  0460  0C70               	rrf	LCDWriteNibble@rs,w
  2334  0461  1C03               	skipc
  2335  0462  1208               	bcf	8,4	;volatile
  2336  0463  1803               	skipnc
  2337  0464  1608               	bsf	8,4	;volatile
  2338  0465                     l1009:
  2339                           
  2340                           ;lcd.c: 94: PORTDbits.RD5 = 0;
  2341  0465  1288               	bcf	8,5	;volatile
  2342  0466                     l1011:
  2343                           
  2344                           ;lcd.c: 97: PORTDbits.RD6 = 1;
  2345  0466  1708               	bsf	8,6	;volatile
  2346  0467                     l1013:
  2347                           
  2348                           ;lcd.c: 100: PORTDbits.RD6 = 0;
  2349  0467  1308               	bcf	8,6	;volatile
  2350  0468                     l50:
  2351  0468  0008               	return
  2352  0469                     __end_of_LCDWriteNibble:
  2353  007E                     btemp	set	126	;btemp
  2354  007E                     wtemp0	set	126
  2355                           
  2356                           	psect	idloc
  2357                           
  2358                           ;Config register IDLOC0 @ 0x2000
  2359                           ;	unspecified, using default values
  2360  2000                     	org	8192
  2361  2000  3FFF               	dw	16383
  2362                           
  2363                           ;Config register IDLOC1 @ 0x2001
  2364                           ;	unspecified, using default values
  2365  2001                     	org	8193
  2366  2001  3FFF               	dw	16383
  2367                           
  2368                           ;Config register IDLOC2 @ 0x2002
  2369                           ;	unspecified, using default values
  2370  2002                     	org	8194
  2371  2002  3FFF               	dw	16383
  2372                           
  2373                           ;Config register IDLOC3 @ 0x2003
  2374                           ;	unspecified, using default values
  2375  2003                     	org	8195
  2376  2003  3FFF               	dw	16383
  2377                           
  2378                           	psect	config
  2379                           
  2380                           ;Config register CONFIG1 @ 0x2007
  2381                           ;	Oscillator Selection bits
  2382                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2383                           ;	Watchdog Timer Enable bit
  2384                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2385                           ;	Power-up Timer Enable bit
  2386                           ;	PWRTE = OFF, PWRT disabled
  2387                           ;	RE3/MCLR pin function select bit
  2388                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2389                           ;	Code Protection bit
  2390                           ;	CP = OFF, Program memory code protection is disabled
  2391                           ;	Data Code Protection bit
  2392                           ;	CPD = OFF, Data memory code protection is disabled
  2393                           ;	Brown Out Reset Selection bits
  2394                           ;	BOREN = OFF, BOR disabled
  2395                           ;	Internal External Switchover bit
  2396                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2397                           ;	Fail-Safe Clock Monitor Enabled bit
  2398                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2399                           ;	Low Voltage Programming Enable bit
  2400                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2401                           ;	In-Circuit Debugger Mode bit
  2402                           ;	DEBUG = 0x1, unprogrammed default
  2403  2007                     	org	8199
  2404  2007  20D4               	dw	8404
  2405                           
  2406                           ;Config register CONFIG2 @ 0x2008
  2407                           ;	Brown-out Reset Selection bit
  2408                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2409                           ;	Flash Program Memory Self Write Enable bits
  2410                           ;	WRT = OFF, Write protection off
  2411  2008                     	org	8200
  2412  2008  3FFF               	dw	16383

Data Sizes:
    Strings     32
    Constant    10
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      49
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3889
                                             19 BANK0     10    10      0
                            _LCDGoto
                          _LCDPutStr
                     _LCD_Initialize
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    1774
                                              0 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     461
                                              7 COMMON     2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            4     2      2     703
                                              7 COMMON     4     2      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           3     3      0     461
                                              4 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     747
                                              7 COMMON     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            3     3      0     461
                                              4 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       4     3      1     394
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      31       5       61.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3F      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun May 29 20:53:49 2022

         _LCD_Initialize 053E                        pc 0002                       l50 0468  
            ?_LCDPutChar 0070                       l53 04B5                       l62 04E0  
                     l47 056D                       l56 053D                       l68 050E  
                     fsr 0004      ___wmul@multiplicand 0072                      l200 07F2  
                    l204 0475                      l206 048D                      l170 068D  
                    l476 05EB                      l486 05A7                      l657 0445  
                    u510 0489                      u511 0488                      u520 05B0  
                    u521 05AF                      u505 047D                      u610 0586  
                    u435 044A                      u611 0585                      u540 05C2  
                    u620 0590                      u460 043C                      u700 06AD  
                    u445 0523                      u541 05C1                      u621 058F  
                    u605 0578                      u461 043B                      u701 06AC  
                    u470 0442                      u710 06ED                      u455 04A3  
                    u535 05B4                      u471 0441                      u711 06EC  
                    u560 05D3                      u640 05A3                      u480 046F  
                    u800 07DC                      u720 0730                      u561 05D2  
                    u641 05A2                      u625 058C                      u481 046E  
                    u801 07DB                      u721 072F                      u650 04E8  
                    u810 07EE                      u730 073B                      u651 04E7  
                    u555 05C3                      u635 0597                      u811 07ED  
                    u731 073A                      u660 04EE                      u580 05E7  
                    u740 0746                      u820 0657                      u661 04ED  
                    u581 05E6                      u565 05CF                      u741 0745  
                    u725 072C                      u821 0656                      u670 04F4  
                    u590 0574                      u750 075A                      u830 0661  
                    u671 04F3                      u575 05DB                      u591 0573  
                    u495 0476                      u751 0759                      u831 0660  
                    u680 04E0                      u760 0760                      u840 066B  
                    u681 04DF                      u761 075F                      u745 0742  
                    u841 066A                      u770 0777                      u690 067D  
                    u907 0531                      u771 0776                      u691 067C  
                    u780 077E                      u781 077D                      u790 0795  
                    u791 0794                      u857 0647                      u867 054B  
                    u877 0493                      u887 0509                      u897 0514  
                    fsr0 0004                      indf 0000          __end_of_LCDGoto 050F  
                   l1001 0447                     l1011 0466                     l1003 0453  
                   l1013 0467                     l1005 0458                     l1021 052D  
                   l1101 059D                     l1007 0460                     l1023 0536  
                   l1015 0510                     l1031 04AD                     l1111 0547  
                   l1103 05A3                     l1009 0465                     l1017 0519  
                   l1025 048F                     l1121 0567                     l1113 054F  
                   l1041 0444                     l1033 0435                     l1201 0756  
                   l1019 0520                     l1131 04FA                     l1123 04E2  
                   l1027 0498                     l1115 0555                     l1107 053E  
                   l1051 047C                     l1035 0436                     l1203 075A  
                   l1211 0778                     l1133 04FF                     l1125 04E8  
                   l1029 04A0                     l1141 04C9                     l1117 055B  
                   l1109 0544                     l1061 05AA                     l1053 0483  
                   l1045 0469                     l1037 043C                     l1221 079A  
                   l1213 077E                     l1205 0760                     l1135 0505  
                   l1127 04EF                     l1143 04CD                     l1119 0561  
                   l1071 05C2                     l1063 05B0                     l1055 0489  
                   l1047 046B                     l1039 0442                     l1223 07C8  
                   l1215 0785                     l1207 0767                     l1231 07EE  
                   l1151 0684                     l1129 04F4                     l1137 04B6  
                   l1073 05D3                     l1065 05B3                     l1081 05E7  
                   l1049 046F                     l1225 07CF                     l1217 0789  
                   l1209 076B                     l1161 069D                     l1153 0689  
                   l1145 0672                     l1241 05F4                     l1139 04B8  
                   l1075 05D9                     l1067 05BA                     l1059 05A8  
                   l1091 057E                     l1227 07D3                     l1219 0795  
                   l1171 06DD                     l1163 06AD                     l1155 068E  
                   l1147 0677                     l1243 05F7                     l1235 05EC  
                   l1077 05DA                     l1069 05BE                     l1093 0582  
                   l1085 056E                     l1181 070F                     l1173 06EE  
                   l1165 06B1                     l1149 067D                     l1229 07DC  
                   l1261 0610                     l1245 05FC                     l1237 05F0  
                   l1079 05E1                     l1095 0586                     l1087 0574  
                   l1183 0713                     l1167 06C6                     l1159 0692  
                   l1271 0638                     l1255 060F                     l1247 0603  
                   l1239 05F1                     l1097 0590                     l1089 0577  
                   l1193 0731                     l1169 06D9                     l1177 06F3  
                   l1281 065B                     l1273 0641                     l1249 060C  
                   l1099 0596                     l1195 073B                     l1179 0707  
                   l1283 0661                     l1275 064B                     l1267 0611  
                   l1197 0746                     l1189 0715                     l1285 0665  
                   l1277 0651                     l1269 0630                     l1199 0752  
                   l1279 0657                     STR_1 001D                     STR_2 002E  
                   _main 05EC                     btemp 007E                     start 0000  
 __end_of_LCD_Initialize 056E              LCDPutCmd@ch 0076                    ?_main 0070  
                  _ANSEL 0188          __end_of___lwdiv 05EC          __end_of___lwmod 05A8  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088          __end_of_dpowers 001D          __end_of_isdigit 0446  
                  main@i 003A                    main@j 003B                    main@k 003C  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 07F3          ?_LCD_Initialize 0070          __initialization 07F3  
           __end_of_main 066F                   ??_main 0033                ??_LCDGoto 0078  
      __end_of_LCDPutCmd 053E             LCDPutChar@ch 0076        __end_of_LCDPutStr 04E1  
           LCDPutStr@str 0077           _LCDWriteNibble 0446                   ___wmul 0469  
              ??___lwdiv 0074                ??___lwmod 007C                   _buffer 003D  
              ??_isdigit 0070                ??_sprintf 0027   __end_of_LCDWriteNibble 0469  
__end_of__initialization 07FC                LCDGoto@ln 0077           __pcstackCOMMON 0070  
           ??_LCDPutChar 0074             sprintf@width 0030               __pbssBANK0 003D  
        ?_LCDWriteNibble 0070       __end_of_LCDPutChar 04B6               __pmaintext 05EC  
                ?___wmul 0070                  _LCDGoto 04E1               __stringtab 0003  
       ??_LCD_Initialize 0077                  ___lwdiv 05A8                  ___lwmod 056E  
                __ptext1 066F                  __ptext2 0434                  __ptext3 0469  
                __ptext4 056E                  __ptext5 05A8                  __ptext6 053E  
                __ptext7 04B6                  __ptext8 048E                  __ptext9 04E1  
                _dpowers 0013                  _isdigit 0434                _LCDPutCmd 050F  
                _sprintf 066F                  clrloop0 042D                _LCDPutStr 04B6  
   end_of_initialization 07FC                _PORTDbits 0008               ?_LCDPutCmd 0070  
             ?_LCDPutStr 0077               LCDGoto@pos 007C               LCDPutStr@i 007A  
         __end_of___wmul 048E      start_initialization 07F3         ??_LCDWriteNibble 0071  
               ??___wmul 0074                 ?_LCDGoto 0077                ___latbits 0002  
          __pcstackBANK0 0020              ??_LCDPutCmd 0074              ??_LCDPutStr 0079  
            sprintf@flag 002B              sprintf@prec 002E         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                 ?___lwmod 0078         LCDWriteNibble@ch 0073  
       LCDWriteNibble@rs 0070                __pstrings 0003                 ?_isdigit 0070  
       ___lwdiv@quotient 0075                 ?_sprintf 0020           ___wmul@product 0074  
              clear_ram0 042C              _LCDGoto$118 007A              __stringbase 0012  
      ___wmul@multiplier 0070       __end_of__stringtab 0013              _isdigit$594 0070  
             sprintf@val 002C          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               __ptext10 050F                 __ptext11 0446               _LCDPutChar 048E  
               isdigit@c 0071                sprintf@ap 002A                sprintf@sp 002F  
       ___lwmod@dividend 007A                stringcode 000D                 sprintf@c 0032  
               sprintf@f 0020          ___lwmod@divisor 0078          ___lwmod@counter 007D  
               stringdir 000D                 stringtab 0003  
