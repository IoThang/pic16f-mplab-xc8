

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 30 00:20:28 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0008                     _PORTDbits	set	8
   291  0008                     _PORTD	set	8
   292  0088                     _TRISD	set	136
   293  0188                     _ANSEL	set	392
   294                           
   295                           	psect	strings
   296  0003                     __pstrings:
   297  0003                     stringtab:
   298  0003                     __stringtab:
   299  0003                     stringcode:	
   300                           ;	String table - string pointers are 1 byte each
   301                           
   302  0003                     stringdir:
   303  0003  3000               	movlw	high stringdir
   304  0004  008A               	movwf	10
   305  0005  0804               	movf	4,w
   306  0006  0A84               	incf	4,f
   307  0007  0782               	addwf	2,f
   308  0008                     __stringbase:
   309  0008  3400               	retlw	0
   310  0009                     __end_of__stringtab:
   311  0009                     STR_2:
   312  0009  3420               	retlw	32	;' '
   313  000A  3420               	retlw	32	;' '
   314  000B  3420               	retlw	32	;' '
   315  000C  3420               	retlw	32	;' '
   316  000D  3432               	retlw	50	;'2'
   317  000E  3433               	retlw	51	;'3'
   318  000F  343A               	retlw	58	;':'
   319  0010  3435               	retlw	53	;'5'
   320  0011  3439               	retlw	57	;'9'
   321  0012  343A               	retlw	58	;':'
   322  0013  3430               	retlw	48	;'0'
   323  0014  3430               	retlw	48	;'0'
   324  0015  3420               	retlw	32	;' '
   325  0016  3420               	retlw	32	;' '
   326  0017  3400               	retlw	0
   327  0018                     STR_1:
   328  0018  3450               	retlw	80	;'P'
   329  0019  3449               	retlw	73	;'I'
   330  001A  3443               	retlw	67	;'C'
   331  001B  3431               	retlw	49	;'1'
   332  001C  3436               	retlw	54	;'6'
   333  001D  3446               	retlw	70	;'F'
   334  001E  3431               	retlw	49	;'1'
   335  001F  3435               	retlw	53	;'5'
   336  0020  3430               	retlw	48	;'0'
   337  0021  3439               	retlw	57	;'9'
   338  0022  3420               	retlw	32	;' '
   339  0023  344D               	retlw	77	;'M'
   340  0024  3443               	retlw	67	;'C'
   341  0025  3455               	retlw	85	;'U'
   342  0026  3400               	retlw	0
   343                           
   344                           	psect	cinit
   345  07F3                     start_initialization:	
   346                           ; #config settings
   347                           
   348  07F3                     __initialization:
   349                           
   350                           ; Clear objects allocated to BANK0
   351  07F3  1383               	bcf	3,7	;select IRP bank0
   352  07F4  3020               	movlw	low __pbssBANK0
   353  07F5  0084               	movwf	4
   354  07F6  3034               	movlw	low (__pbssBANK0+20)
   355  07F7  120A  118A  26AA  120A  118A  	fcall	clear_ram0
   356  07FC                     end_of_initialization:	
   357                           ;End of C runtime variable initialization code
   358                           
   359  07FC                     __end_of__initialization:
   360  07FC  0183               	clrf	3
   361  07FD  120A  118A  2EB2   	ljmp	_main	;jump to C main() function
   362                           
   363                           	psect	bssBANK0
   364  0020                     __pbssBANK0:
   365  0020                     _buffer:
   366  0020                     	ds	20
   367                           
   368                           	psect	clrtext
   369  06AA                     clear_ram0:	
   370                           ;	Called with FSR containing the base address, and
   371                           ;	W with the last address+1
   372                           
   373  06AA  0064               	clrwdt	;clear the watchdog before getting into this loop
   374  06AB                     clrloop0:
   375  06AB  0180               	clrf	0	;clear RAM location pointed to by FSR
   376  06AC  0A84               	incf	4,f	;increment pointer
   377  06AD  0604               	xorwf	4,w	;XOR with final address
   378  06AE  1903               	btfsc	3,2	;have we reached the end yet?
   379  06AF  3400               	retlw	0	;all done for this memory range, return
   380  06B0  0604               	xorwf	4,w	;XOR again to restore value
   381  06B1  2EAB               	goto	clrloop0	;do the next byte
   382                           
   383                           	psect	cstackCOMMON
   384  0070                     __pcstackCOMMON:
   385  0070                     ?_LCD_Initialize:
   386  0070                     ?_LCDPutCmd:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_main:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_LCDWriteNibble:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_LCDPutChar:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     LCDWriteNibble@rs:	
   399                           ; 1 bytes @ 0x0
   400                           
   401                           
   402                           ; 1 bytes @ 0x0
   403  0070                     	ds	1
   404  0071                     ??_LCDWriteNibble:
   405                           
   406                           ; 1 bytes @ 0x1
   407  0071                     	ds	2
   408  0073                     LCDWriteNibble@ch:
   409                           
   410                           ; 1 bytes @ 0x3
   411  0073                     	ds	1
   412  0074                     ??_LCDPutCmd:
   413  0074                     ??_LCDPutChar:	
   414                           ; 1 bytes @ 0x4
   415                           
   416                           
   417                           ; 1 bytes @ 0x4
   418  0074                     	ds	2
   419  0076                     LCDPutChar@ch:
   420  0076                     LCDPutCmd@ch:	
   421                           ; 1 bytes @ 0x6
   422                           
   423                           
   424                           ; 1 bytes @ 0x6
   425  0076                     	ds	1
   426  0077                     ??_LCD_Initialize:
   427  0077                     ?_LCDPutStr2:	
   428                           ; 1 bytes @ 0x7
   429                           
   430  0077                     ?_LCDPutStr3:	
   431                           ; 1 bytes @ 0x7
   432                           
   433  0077                     LCDPutStr2@_pos:	
   434                           ; 1 bytes @ 0x7
   435                           
   436  0077                     LCDPutStr3@_line:	
   437                           ; 1 bytes @ 0x7
   438                           
   439                           
   440                           ; 1 bytes @ 0x7
   441  0077                     	ds	1
   442  0078                     ??_LCDPutStr3:
   443  0078                     LCDPutStr2@_line:	
   444                           ; 1 bytes @ 0x8
   445                           
   446                           
   447                           ; 1 bytes @ 0x8
   448  0078                     	ds	1
   449  0079                     ??_LCDPutStr2:
   450  0079                     LCDPutStr3@str:	
   451                           ; 1 bytes @ 0x9
   452                           
   453                           
   454                           ; 1 bytes @ 0x9
   455  0079                     	ds	1
   456  007A                     LCDPutStr3@i:
   457                           
   458                           ; 1 bytes @ 0xA
   459  007A                     	ds	1
   460  007B                     ??_main:
   461                           
   462                           	psect	cstackBANK0
   463  0034                     __pcstackBANK0:	
   464                           ; 1 bytes @ 0xB
   465                           
   466  0034                     _LCDPutStr2$112:
   467                           
   468                           ; 2 bytes @ 0x0
   469  0034                     	ds	2
   470  0036                     LCDPutStr2@str:
   471                           
   472                           ; 1 bytes @ 0x2
   473  0036                     	ds	1
   474  0037                     LCDPutStr2@i:
   475                           
   476                           ; 1 bytes @ 0x3
   477  0037                     	ds	1
   478                           
   479                           	psect	maintext
   480  06B2                     __pmaintext:	
   481 ;;
   482 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   483 ;;
   484 ;; *************** function _main *****************
   485 ;; Defined at:
   486 ;;		line 31 in file "newmain.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : B00/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   500 ;;      Params:         0       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0
   503 ;;      Totals:         0       0       0       0       0
   504 ;;Total ram usage:        0 bytes
   505 ;; Hardware stack levels required when called: 3
   506 ;; This function calls:
   507 ;;		_LCDPutStr2
   508 ;;		_LCDPutStr3
   509 ;;		_LCD_Initialize
   510 ;; This function is called by:
   511 ;;		Startup code after reset
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515  06B2                     _main:	
   516                           ;psect for function _main
   517                           
   518  06B2                     l859:	
   519                           ;incstack = 0
   520                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   521                           
   522                           
   523                           ;newmain.c: 32: TRISD = 0;
   524  06B2  1683               	bsf	3,5	;RP0=1, select bank1
   525  06B3  1303               	bcf	3,6	;RP1=0, select bank1
   526  06B4  0188               	clrf	8	;volatile
   527                           
   528                           ;newmain.c: 33: ANSEL = 0;
   529  06B5  1683               	bsf	3,5	;RP0=1, select bank3
   530  06B6  1703               	bsf	3,6	;RP1=1, select bank3
   531  06B7  0188               	clrf	8	;volatile
   532  06B8                     l861:
   533                           
   534                           ;newmain.c: 34: LCD_Initialize();
   535  06B8  120A  118A  276F  120A  118A  	fcall	_LCD_Initialize
   536  06BD                     l863:
   537                           
   538                           ;newmain.c: 36: {;newmain.c: 37: LCDPutStr2("PIC16F1509 MCU",0,0);
   539  06BD  01F7               	clrf	LCDPutStr2@_pos
   540  06BE  01F8               	clrf	LCDPutStr2@_line
   541  06BF  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   542  06C0  120A  118A  27A0  120A  118A  	fcall	_LCDPutStr2
   543  06C5                     l865:
   544                           
   545                           ;newmain.c: 38: LCDPutStr3("    23:59:00  ", 1);
   546  06C5  01F7               	clrf	LCDPutStr3@_line
   547  06C6  0AF7               	incf	LCDPutStr3@_line,f
   548  06C7  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   549  06C8  120A  118A  271B  120A  118A  	fcall	_LCDPutStr3
   550  06CD  2EBD               	goto	l863
   551  06CE  120A  118A  2800   	ljmp	start
   552  06D1                     __end_of_main:
   553                           
   554                           	psect	text1
   555  076F                     __ptext1:	
   556 ;; *************** function _LCD_Initialize *****************
   557 ;; Defined at:
   558 ;;		line 46 in file "lcd.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, status,2, status,0, pclath, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   572 ;;      Params:         0       0       0       0       0
   573 ;;      Locals:         0       0       0       0       0
   574 ;;      Temps:          2       0       0       0       0
   575 ;;      Totals:         2       0       0       0       0
   576 ;;Total ram usage:        2 bytes
   577 ;; Hardware stack levels used: 1
   578 ;; Hardware stack levels required when called: 2
   579 ;; This function calls:
   580 ;;		_LCDPutCmd
   581 ;; This function is called by:
   582 ;;		_main
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586  076F                     _LCD_Initialize:	
   587                           ;psect for function _LCD_Initialize
   588                           
   589  076F                     l811:	
   590                           ;incstack = 0
   591                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
   592                           
   593                           
   594                           ;lcd.c: 49: PORTD = 0;
   595  076F  1283               	bcf	3,5	;RP0=0, select bank0
   596  0770  1303               	bcf	3,6	;RP1=0, select bank0
   597  0771  0188               	clrf	8	;volatile
   598                           
   599                           ;lcd.c: 51: TRISD = 0x00;
   600  0772  1683               	bsf	3,5	;RP0=1, select bank1
   601  0773  1303               	bcf	3,6	;RP1=0, select bank1
   602  0774  0188               	clrf	8	;volatile
   603  0775                     l813:
   604                           
   605                           ;lcd.c: 54: PORTDbits.RD7 = 1;
   606  0775  1283               	bcf	3,5	;RP0=0, select bank0
   607  0776  1303               	bcf	3,6	;RP1=0, select bank0
   608  0777  1788               	bsf	8,7	;volatile
   609  0778                     l815:
   610                           
   611                           ;lcd.c: 57: _delay((unsigned long)((15)*(4000000/4000.0)));
   612  0778  3014               	movlw	20
   613  0779  00F8               	movwf	??_LCD_Initialize+1
   614  077A  3079               	movlw	121
   615  077B  00F7               	movwf	??_LCD_Initialize
   616  077C                     u257:
   617  077C  0BF7               	decfsz	??_LCD_Initialize,f
   618  077D  2F7C               	goto	u257
   619  077E  0BF8               	decfsz	??_LCD_Initialize+1,f
   620  077F  2F7C               	goto	u257
   621  0780  2F81               	nop2
   622  0781                     l817:
   623                           
   624                           ;lcd.c: 60: LCDPutCmd(0x32);
   625  0781  3032               	movlw	50
   626  0782  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   627  0787                     l819:
   628                           
   629                           ;lcd.c: 63: LCDPutCmd(0x28);
   630  0787  3028               	movlw	40
   631  0788  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   632  078D                     l821:
   633                           
   634                           ;lcd.c: 66: LCDPutCmd(0x0C);
   635  078D  300C               	movlw	12
   636  078E  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   637  0793                     l823:
   638                           
   639                           ;lcd.c: 68: LCDPutCmd(0x01);
   640  0793  3001               	movlw	1
   641  0794  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   642  0799                     l825:
   643                           
   644                           ;lcd.c: 71: LCDPutCmd(0x06);
   645  0799  3006               	movlw	6
   646  079A  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   647  079F                     l33:
   648  079F  0008               	return
   649  07A0                     __end_of_LCD_Initialize:
   650                           
   651                           	psect	text2
   652  071B                     __ptext2:	
   653 ;; *************** function _LCDPutStr3 *****************
   654 ;; Defined at:
   655 ;;		line 187 in file "lcd.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;  str             1    wreg     PTR const unsigned char 
   658 ;;		 -> STR_2(15), 
   659 ;;  _line           1    7[COMMON] unsigned char 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  str             1    9[COMMON] PTR const unsigned char 
   662 ;;		 -> STR_2(15), 
   663 ;;  i               1   10[COMMON] char 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   673 ;;      Params:         1       0       0       0       0
   674 ;;      Locals:         2       0       0       0       0
   675 ;;      Temps:          1       0       0       0       0
   676 ;;      Totals:         4       0       0       0       0
   677 ;;Total ram usage:        4 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 2
   680 ;; This function calls:
   681 ;;		_LCDPutChar
   682 ;;		_LCDPutCmd
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688  071B                     _LCDPutStr3:	
   689                           ;psect for function _LCDPutStr3
   690                           
   691                           
   692                           ;incstack = 0
   693                           ; Regs used in _LCDPutStr3: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   694                           ;LCDPutStr3@str stored from wreg
   695  071B  00F9               	movwf	LCDPutStr3@str
   696  071C                     l849:
   697                           
   698                           ;lcd.c: 189: LCDPutCmd(0xC0);
   699  071C  30C0               	movlw	192
   700  071D  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   701  0722                     l851:
   702                           
   703                           ;lcd.c: 190: int8_t i=0;
   704  0722  01FA               	clrf	LCDPutStr3@i
   705                           
   706                           ;lcd.c: 192: while (str[i])
   707  0723  2F35               	goto	l857
   708  0724                     l853:
   709                           
   710                           ;lcd.c: 193: {;lcd.c: 195: LCDPutChar(str[i++]);
   711  0724  087A               	movf	LCDPutStr3@i,w
   712  0725  0779               	addwf	LCDPutStr3@str,w
   713  0726  0084               	movwf	4
   714  0727  120A  118A  2003  120A  118A  	fcall	stringdir
   715  072C  120A  118A  26F4  120A  118A  	fcall	_LCDPutChar
   716  0731                     l855:
   717  0731  3001               	movlw	1
   718  0732  00F8               	movwf	??_LCDPutStr3
   719  0733  0878               	movf	??_LCDPutStr3,w
   720  0734  07FA               	addwf	LCDPutStr3@i,f
   721  0735                     l857:
   722  0735  087A               	movf	LCDPutStr3@i,w
   723  0736  0779               	addwf	LCDPutStr3@str,w
   724  0737  0084               	movwf	4
   725  0738  120A  118A  2003  120A  118A  	fcall	stringdir
   726  073D  3A00               	xorlw	0
   727  073E  1D03               	skipz
   728  073F  2F41               	goto	u201
   729  0740  2F42               	goto	u200
   730  0741                     u201:
   731  0741  2F24               	goto	l853
   732  0742                     u200:
   733  0742                     l77:
   734  0742  0008               	return
   735  0743                     __end_of_LCDPutStr3:
   736                           
   737                           	psect	text3
   738  07A0                     __ptext3:	
   739 ;; *************** function _LCDPutStr2 *****************
   740 ;; Defined at:
   741 ;;		line 163 in file "lcd.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;  str             1    wreg     PTR const unsigned char 
   744 ;;		 -> STR_1(15), 
   745 ;;  _pos            1    7[COMMON] unsigned char 
   746 ;;  _line           1    8[COMMON] unsigned char 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  str             1    2[BANK0 ] PTR const unsigned char 
   749 ;;		 -> STR_1(15), 
   750 ;;  i               1    3[BANK0 ] unsigned char 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         2       0       0       0       0
   761 ;;      Locals:         0       4       0       0       0
   762 ;;      Temps:          2       0       0       0       0
   763 ;;      Totals:         4       4       0       0       0
   764 ;;Total ram usage:        8 bytes
   765 ;; Hardware stack levels used: 1
   766 ;; Hardware stack levels required when called: 2
   767 ;; This function calls:
   768 ;;		_LCDPutChar
   769 ;;		_LCDPutCmd
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775  07A0                     _LCDPutStr2:	
   776                           ;psect for function _LCDPutStr2
   777                           
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _LCDPutStr2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   781                           ;LCDPutStr2@str stored from wreg
   782  07A0  1283               	bcf	3,5	;RP0=0, select bank0
   783  07A1  1303               	bcf	3,6	;RP1=0, select bank0
   784  07A2  00B6               	movwf	LCDPutStr2@str
   785  07A3                     l827:
   786                           
   787                           ;lcd.c: 166: if ((_line > (2-1)) || (_pos > (16-1)))
   788  07A3  3002               	movlw	2
   789  07A4  0278               	subwf	LCDPutStr2@_line,w
   790  07A5  1803               	skipnc
   791  07A6  2FA8               	goto	u161
   792  07A7  2FA9               	goto	u160
   793  07A8                     u161:
   794  07A8  2FF2               	goto	l64
   795  07A9                     u160:
   796  07A9                     l829:
   797  07A9  3010               	movlw	16
   798  07AA  0277               	subwf	LCDPutStr2@_pos,w
   799  07AB  1C03               	skipc
   800  07AC  2FAE               	goto	u171
   801  07AD  2FAF               	goto	u170
   802  07AE                     u171:
   803  07AE  2FB0               	goto	l831
   804  07AF                     u170:
   805  07AF  2FF2               	goto	l64
   806  07B0                     l831:
   807                           
   808                           ;lcd.c: 170: };lcd.c: 173: LCDPutCmd((_line == 1) ? (0xC0 | _pos) : (0x80 | _pos));
   809  07B0  0378               	decf	LCDPutStr2@_line,w
   810  07B1  1903               	btfsc	3,2
   811  07B2  2FB4               	goto	u181
   812  07B3  2FB5               	goto	u180
   813  07B4                     u181:
   814  07B4  2FBB               	goto	l835
   815  07B5                     u180:
   816  07B5                     l833:
   817  07B5  3080               	movlw	128
   818  07B6  0477               	iorwf	LCDPutStr2@_pos,w
   819  07B7  00B4               	movwf	_LCDPutStr2$112
   820  07B8  3000               	movlw	0
   821  07B9  00B5               	movwf	_LCDPutStr2$112+1
   822  07BA  2FC0               	goto	l837
   823  07BB                     l835:
   824  07BB  30C0               	movlw	192
   825  07BC  0477               	iorwf	LCDPutStr2@_pos,w
   826  07BD  00B4               	movwf	_LCDPutStr2$112
   827  07BE  3000               	movlw	0
   828  07BF  00B5               	movwf	_LCDPutStr2$112+1
   829  07C0                     l837:
   830  07C0  0834               	movf	_LCDPutStr2$112,w
   831  07C1  120A  118A  2743  120A  118A  	fcall	_LCDPutCmd
   832  07C6                     l839:
   833                           
   834                           ;lcd.c: 176: _delay((unsigned long)((5)*(4000000/4000.0)));
   835  07C6  3007               	movlw	7
   836  07C7  00FA               	movwf	??_LCDPutStr2+1
   837  07C8  307D               	movlw	125
   838  07C9  00F9               	movwf	??_LCDPutStr2
   839  07CA                     u267:
   840  07CA  0BF9               	decfsz	??_LCDPutStr2,f
   841  07CB  2FCA               	goto	u267
   842  07CC  0BFA               	decfsz	??_LCDPutStr2+1,f
   843  07CD  2FCA               	goto	u267
   844  07CE                     l841:
   845                           
   846                           ;lcd.c: 178: uint8_t i=0;
   847  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   848  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   849  07D0  01B7               	clrf	LCDPutStr2@i
   850                           
   851                           ;lcd.c: 181: while (str[i])
   852  07D1  2FE5               	goto	l847
   853  07D2                     l843:
   854                           
   855                           ;lcd.c: 182: {;lcd.c: 184: LCDPutChar(str[i++]);
   856  07D2  0837               	movf	LCDPutStr2@i,w
   857  07D3  0736               	addwf	LCDPutStr2@str,w
   858  07D4  0084               	movwf	4
   859  07D5  120A  118A  2003  120A  118A  	fcall	stringdir
   860  07DA  120A  118A  26F4  120A  118A  	fcall	_LCDPutChar
   861  07DF                     l845:
   862  07DF  3001               	movlw	1
   863  07E0  00F9               	movwf	??_LCDPutStr2
   864  07E1  0879               	movf	??_LCDPutStr2,w
   865  07E2  1283               	bcf	3,5	;RP0=0, select bank0
   866  07E3  1303               	bcf	3,6	;RP1=0, select bank0
   867  07E4  07B7               	addwf	LCDPutStr2@i,f
   868  07E5                     l847:
   869  07E5  0837               	movf	LCDPutStr2@i,w
   870  07E6  0736               	addwf	LCDPutStr2@str,w
   871  07E7  0084               	movwf	4
   872  07E8  120A  118A  2003  120A  118A  	fcall	stringdir
   873  07ED  3A00               	xorlw	0
   874  07EE  1D03               	skipz
   875  07EF  2FF1               	goto	u191
   876  07F0  2FF2               	goto	u190
   877  07F1                     u191:
   878  07F1  2FD2               	goto	l843
   879  07F2                     u190:
   880  07F2                     l64:
   881  07F2  0008               	return
   882  07F3                     __end_of_LCDPutStr2:
   883                           
   884                           	psect	text4
   885  0743                     __ptext4:	
   886 ;; *************** function _LCDPutCmd *****************
   887 ;; Defined at:
   888 ;;		line 118 in file "lcd.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  ch              1    wreg     unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  ch              1    6[COMMON] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, pclath, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   902 ;;      Params:         0       0       0       0       0
   903 ;;      Locals:         1       0       0       0       0
   904 ;;      Temps:          2       0       0       0       0
   905 ;;      Totals:         3       0       0       0       0
   906 ;;Total ram usage:        3 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 1
   909 ;; This function calls:
   910 ;;		_LCDWriteNibble
   911 ;; This function is called by:
   912 ;;		_LCD_Initialize
   913 ;;		_LCDPutStr2
   914 ;;		_LCDPutStr3
   915 ;;		_LCDGoto
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919  0743                     _LCDPutCmd:	
   920                           ;psect for function _LCDPutCmd
   921                           
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
   925                           ;LCDPutCmd@ch stored from wreg
   926  0743  00F6               	movwf	LCDPutCmd@ch
   927  0744                     l793:
   928                           
   929                           ;lcd.c: 120: _delay((unsigned long)((5)*(4000000/4000.0)));
   930  0744  3007               	movlw	7
   931  0745  00F5               	movwf	??_LCDPutCmd+1
   932  0746  307D               	movlw	125
   933  0747  00F4               	movwf	??_LCDPutCmd
   934  0748                     u277:
   935  0748  0BF4               	decfsz	??_LCDPutCmd,f
   936  0749  2F48               	goto	u277
   937  074A  0BF5               	decfsz	??_LCDPutCmd+1,f
   938  074B  2F48               	goto	u277
   939  074C                     l795:
   940                           
   941                           ;lcd.c: 123: LCDWriteNibble(ch,0);
   942  074C  01F0               	clrf	LCDWriteNibble@rs
   943  074D  0876               	movf	LCDPutCmd@ch,w
   944  074E  120A  118A  26D1  120A  118A  	fcall	_LCDWriteNibble
   945  0753                     l797:
   946                           
   947                           ;lcd.c: 126: ch = (ch << 4);
   948  0753  0876               	movf	LCDPutCmd@ch,w
   949  0754  00F4               	movwf	??_LCDPutCmd
   950  0755  3003               	movlw	3
   951  0756                     u145:
   952  0756  1003               	clrc
   953  0757  0DF4               	rlf	??_LCDPutCmd,f
   954  0758  3EFF               	addlw	-1
   955  0759  1D03               	skipz
   956  075A  2F56               	goto	u145
   957  075B  1003               	clrc
   958  075C  0D74               	rlf	??_LCDPutCmd,w
   959  075D  00F5               	movwf	??_LCDPutCmd+1
   960  075E  0875               	movf	??_LCDPutCmd+1,w
   961  075F  00F6               	movwf	LCDPutCmd@ch
   962  0760                     l799:
   963                           
   964                           ;lcd.c: 128: _delay((unsigned long)((1)*(4000000/4000.0)));
   965  0760  30C7               	movlw	199
   966  0761  00F4               	movwf	??_LCDPutCmd
   967  0762                     u287:
   968  0762  2F63               	nop2
   969  0763  0BF4               	decfsz	??_LCDPutCmd,f
   970  0764  2F62               	goto	u287
   971  0765  2F66               	nop2
   972  0766  2F67               	nop2
   973  0767                     l801:
   974                           
   975                           ;lcd.c: 131: LCDWriteNibble(ch,0);
   976  0767  01F0               	clrf	LCDWriteNibble@rs
   977  0768  0876               	movf	LCDPutCmd@ch,w
   978  0769  120A  118A  26D1  120A  118A  	fcall	_LCDWriteNibble
   979  076E                     l42:
   980  076E  0008               	return
   981  076F                     __end_of_LCDPutCmd:
   982                           
   983                           	psect	text5
   984  06F4                     __ptext5:	
   985 ;; *************** function _LCDPutChar *****************
   986 ;; Defined at:
   987 ;;		line 103 in file "lcd.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  ch              1    wreg     unsigned char 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  ch              1    6[COMMON] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0, pclath, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1001 ;;      Params:         0       0       0       0       0
  1002 ;;      Locals:         1       0       0       0       0
  1003 ;;      Temps:          2       0       0       0       0
  1004 ;;      Totals:         3       0       0       0       0
  1005 ;;Total ram usage:        3 bytes
  1006 ;; Hardware stack levels used: 1
  1007 ;; Hardware stack levels required when called: 1
  1008 ;; This function calls:
  1009 ;;		_LCDWriteNibble
  1010 ;; This function is called by:
  1011 ;;		_LCDPutStr2
  1012 ;;		_LCDPutStr3
  1013 ;;		_LCDPutStr
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017  06F4                     _LCDPutChar:	
  1018                           ;psect for function _LCDPutChar
  1019                           
  1020                           
  1021                           ;incstack = 0
  1022                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
  1023                           ;LCDPutChar@ch stored from wreg
  1024  06F4  00F6               	movwf	LCDPutChar@ch
  1025  06F5                     l803:
  1026                           
  1027                           ;lcd.c: 105: _delay((unsigned long)((5)*(4000000/4000.0)));
  1028  06F5  3007               	movlw	7
  1029  06F6  00F5               	movwf	??_LCDPutChar+1
  1030  06F7  307D               	movlw	125
  1031  06F8  00F4               	movwf	??_LCDPutChar
  1032  06F9                     u297:
  1033  06F9  0BF4               	decfsz	??_LCDPutChar,f
  1034  06FA  2EF9               	goto	u297
  1035  06FB  0BF5               	decfsz	??_LCDPutChar+1,f
  1036  06FC  2EF9               	goto	u297
  1037  06FD                     l805:
  1038                           
  1039                           ;lcd.c: 108: LCDWriteNibble(ch,1);
  1040  06FD  01F0               	clrf	LCDWriteNibble@rs
  1041  06FE  0AF0               	incf	LCDWriteNibble@rs,f
  1042  06FF  0876               	movf	LCDPutChar@ch,w
  1043  0700  120A  118A  26D1  120A  118A  	fcall	_LCDWriteNibble
  1044  0705                     l807:
  1045                           
  1046                           ;lcd.c: 111: ch = (ch << 4);
  1047  0705  0876               	movf	LCDPutChar@ch,w
  1048  0706  00F4               	movwf	??_LCDPutChar
  1049  0707  3003               	movlw	3
  1050  0708                     u155:
  1051  0708  1003               	clrc
  1052  0709  0DF4               	rlf	??_LCDPutChar,f
  1053  070A  3EFF               	addlw	-1
  1054  070B  1D03               	skipz
  1055  070C  2F08               	goto	u155
  1056  070D  1003               	clrc
  1057  070E  0D74               	rlf	??_LCDPutChar,w
  1058  070F  00F5               	movwf	??_LCDPutChar+1
  1059  0710  0875               	movf	??_LCDPutChar+1,w
  1060  0711  00F6               	movwf	LCDPutChar@ch
  1061  0712                     l809:
  1062                           
  1063                           ;lcd.c: 114: LCDWriteNibble(ch,1);
  1064  0712  01F0               	clrf	LCDWriteNibble@rs
  1065  0713  0AF0               	incf	LCDWriteNibble@rs,f
  1066  0714  0876               	movf	LCDPutChar@ch,w
  1067  0715  120A  118A  26D1  120A  118A  	fcall	_LCDWriteNibble
  1068  071A                     l39:
  1069  071A  0008               	return
  1070  071B                     __end_of_LCDPutChar:
  1071                           
  1072                           	psect	text6
  1073  06D1                     __ptext6:	
  1074 ;; *************** function _LCDWriteNibble *****************
  1075 ;; Defined at:
  1076 ;;		line 76 in file "lcd.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  ch              1    wreg     unsigned char 
  1079 ;;  rs              1    0[COMMON] unsigned char 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  ch              1    3[COMMON] unsigned char 
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2, status,0
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1091 ;;      Params:         1       0       0       0       0
  1092 ;;      Locals:         1       0       0       0       0
  1093 ;;      Temps:          2       0       0       0       0
  1094 ;;      Totals:         4       0       0       0       0
  1095 ;;Total ram usage:        4 bytes
  1096 ;; Hardware stack levels used: 1
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_LCDPutChar
  1101 ;;		_LCDPutCmd
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105  06D1                     _LCDWriteNibble:	
  1106                           ;psect for function _LCDWriteNibble
  1107                           
  1108                           
  1109                           ;incstack = 0
  1110                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0]
  1111                           ;LCDWriteNibble@ch stored from wreg
  1112  06D1  00F3               	movwf	LCDWriteNibble@ch
  1113  06D2                     l779:
  1114                           
  1115                           ;lcd.c: 79: ch = (ch >> 4);
  1116  06D2  0873               	movf	LCDWriteNibble@ch,w
  1117  06D3  00F1               	movwf	??_LCDWriteNibble
  1118  06D4  3004               	movlw	4
  1119  06D5                     u135:
  1120  06D5  1003               	clrc
  1121  06D6  0CF1               	rrf	??_LCDWriteNibble,f
  1122  06D7  3EFF               	addlw	-1
  1123  06D8  1D03               	skipz
  1124  06D9  2ED5               	goto	u135
  1125  06DA  0871               	movf	??_LCDWriteNibble,w
  1126  06DB  00F2               	movwf	??_LCDWriteNibble+1
  1127  06DC  0872               	movf	??_LCDWriteNibble+1,w
  1128  06DD  00F3               	movwf	LCDWriteNibble@ch
  1129  06DE                     l781:
  1130                           
  1131                           ;lcd.c: 82: ch = (ch & 0x0F);
  1132  06DE  0873               	movf	LCDWriteNibble@ch,w
  1133  06DF  390F               	andlw	15
  1134  06E0  00F1               	movwf	??_LCDWriteNibble
  1135  06E1  0871               	movf	??_LCDWriteNibble,w
  1136  06E2  00F3               	movwf	LCDWriteNibble@ch
  1137  06E3                     l783:
  1138                           
  1139                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
  1140  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1141  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1142  06E5  0808               	movf	8,w	;volatile
  1143  06E6  39F0               	andlw	240
  1144  06E7  0088               	movwf	8	;volatile
  1145                           
  1146                           ;lcd.c: 88: PORTD = (PORTD | ch);
  1147  06E8  0808               	movf	8,w	;volatile
  1148  06E9  0473               	iorwf	LCDWriteNibble@ch,w
  1149  06EA  0088               	movwf	8	;volatile
  1150  06EB                     l785:
  1151                           
  1152                           ;lcd.c: 91: PORTDbits.RD4 = rs;
  1153  06EB  0C70               	rrf	LCDWriteNibble@rs,w
  1154  06EC  1C03               	skipc
  1155  06ED  1208               	bcf	8,4	;volatile
  1156  06EE  1803               	skipnc
  1157  06EF  1608               	bsf	8,4	;volatile
  1158  06F0                     l787:
  1159                           
  1160                           ;lcd.c: 94: PORTDbits.RD5 = 0;
  1161  06F0  1288               	bcf	8,5	;volatile
  1162  06F1                     l789:
  1163                           
  1164                           ;lcd.c: 97: PORTDbits.RD6 = 1;
  1165  06F1  1708               	bsf	8,6	;volatile
  1166  06F2                     l791:
  1167                           
  1168                           ;lcd.c: 100: PORTDbits.RD6 = 0;
  1169  06F2  1308               	bcf	8,6	;volatile
  1170  06F3                     l36:
  1171  06F3  0008               	return
  1172  06F4                     __end_of_LCDWriteNibble:
  1173  007E                     btemp	set	126	;btemp
  1174  007E                     wtemp0	set	126
  1175                           
  1176                           	psect	idloc
  1177                           
  1178                           ;Config register IDLOC0 @ 0x2000
  1179                           ;	unspecified, using default values
  1180  2000                     	org	8192
  1181  2000  3FFF               	dw	16383
  1182                           
  1183                           ;Config register IDLOC1 @ 0x2001
  1184                           ;	unspecified, using default values
  1185  2001                     	org	8193
  1186  2001  3FFF               	dw	16383
  1187                           
  1188                           ;Config register IDLOC2 @ 0x2002
  1189                           ;	unspecified, using default values
  1190  2002                     	org	8194
  1191  2002  3FFF               	dw	16383
  1192                           
  1193                           ;Config register IDLOC3 @ 0x2003
  1194                           ;	unspecified, using default values
  1195  2003                     	org	8195
  1196  2003  3FFF               	dw	16383
  1197                           
  1198                           	psect	config
  1199                           
  1200                           ;Config register CONFIG1 @ 0x2007
  1201                           ;	Oscillator Selection bits
  1202                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1203                           ;	Watchdog Timer Enable bit
  1204                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1205                           ;	Power-up Timer Enable bit
  1206                           ;	PWRTE = OFF, PWRT disabled
  1207                           ;	RE3/MCLR pin function select bit
  1208                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1209                           ;	Code Protection bit
  1210                           ;	CP = OFF, Program memory code protection is disabled
  1211                           ;	Data Code Protection bit
  1212                           ;	CPD = OFF, Data memory code protection is disabled
  1213                           ;	Brown Out Reset Selection bits
  1214                           ;	BOREN = OFF, BOR disabled
  1215                           ;	Internal External Switchover bit
  1216                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1217                           ;	Fail-Safe Clock Monitor Enabled bit
  1218                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1219                           ;	Low Voltage Programming Enable bit
  1220                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1221                           ;	In-Circuit Debugger Mode bit
  1222                           ;	DEBUG = 0x1, unprogrammed default
  1223  2007                     	org	8199
  1224  2007  20D4               	dw	8404
  1225                           
  1226                           ;Config register CONFIG2 @ 0x2008
  1227                           ;	Brown-out Reset Selection bit
  1228                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1229                           ;	Flash Program Memory Self Write Enable bits
  1230                           ;	WRT = OFF, Write protection off
  1231  2008                     	org	8200
  1232  2008  3FFF               	dw	16383

Data Sizes:
    Strings     30
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      4      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDPutStr3@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[15]), 

    LCDPutStr2@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_LCDPutStr2
    _main->_LCDPutStr3
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr3->_LCDPutChar
    _LCDPutStr3->_LCDPutCmd
    _LCDPutStr2->_LCDPutChar
    _LCDPutStr2->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _LCDPutChar->_LCDWriteNibble

Critical Paths under _main in BANK0

    _main->_LCDPutStr2

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2913
                         _LCDPutStr2
                         _LCDPutStr3
                     _LCD_Initialize
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     461
                                              7 COMMON     2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr3                                           4     3      1    1121
                                              7 COMMON     4     3      1
                         _LCDPutChar
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr2                                           8     6      2    1331
                                              7 COMMON     4     2      2
                                              0 BANK0      4     4      0
                         _LCDPutChar
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            3     3      0     461
                                              4 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           3     3      0     461
                                              4 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       4     3      1     394
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDPutStr2
     _LCDPutChar
       _LCDWriteNibble
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutStr3
     _LCDPutChar
     _LCDPutCmd
   _LCD_Initialize
     _LCDPutCmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      23       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      18       5       30.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      23      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 30 00:20:28 2022

         _LCD_Initialize 076F                        pc 0002                       l33 079F  
                     l42 076E              ?_LCDPutChar 0070                       l36 06F3  
                     l39 071A                       l64 07F2                       l77 0742  
            ?_LCDPutStr2 0077              ?_LCDPutStr3 0077                       fsr 0004  
                    l801 0767                      l803 06F5                      l811 076F  
                    l805 06FD                      l821 078D                      l813 0775  
                    l807 0705                      l831 07B0                      l823 0793  
                    l815 0778                      l809 0712                      l841 07CE  
                    l833 07B5                      l825 0799                      l817 0781  
                    l843 07D2                      l835 07BB                      l827 07A3  
                    l851 0722                      l819 0787                      l781 06DE  
                    l845 07DF                      l837 07C0                      l829 07A9  
                    l853 0724                      l861 06B8                      l791 06F2  
                    l783 06E3                      l847 07E5                      l839 07C6  
                    l855 0731                      l863 06BD                      l785 06EB  
                    l793 0744                      l857 0735                      l849 071C  
                    l865 06C5                      l787 06F0                      l779 06D2  
                    l795 074C                      l859 06B2                      l789 06F1  
                    l797 0753                      l799 0760                      u200 0742  
                    u201 0741                      u135 06D5                      u160 07A9  
                    u145 0756                      u161 07A8                      u170 07AF  
                    u155 0708                      u171 07AE                      u180 07B5  
                    u181 07B4                      u190 07F2                      u191 07F1  
                    u257 077C                      u267 07CA                      u277 0748  
                    u287 0762                      u297 06F9                      fsr0 0004  
                    indf 0000                     STR_1 0018                     STR_2 0009  
                   _main 06B2                     btemp 007E                     start 0000  
 __end_of_LCD_Initialize 07A0              LCDPutCmd@ch 0076           _LCDPutStr2$112 0034  
                  ?_main 0070                    _ANSEL 0188              LCDPutStr2@i 0037  
            LCDPutStr3@i 007A                    _PORTD 0008                    _TRISD 0088  
                  pclath 000A                    status 0003                    wtemp0 007E  
        ?_LCD_Initialize 0070          __initialization 07F3             __end_of_main 06D1  
                 ??_main 007B        __end_of_LCDPutCmd 076F             LCDPutChar@ch 0076  
         _LCDWriteNibble 06D1                   _buffer 0020   __end_of_LCDWriteNibble 06F4  
__end_of__initialization 07FC           __pcstackCOMMON 0070             ??_LCDPutChar 0074  
           ??_LCDPutStr2 0079             ??_LCDPutStr3 0078               __pbssBANK0 0020  
        ?_LCDWriteNibble 0070       __end_of_LCDPutChar 071B       __end_of_LCDPutStr2 07F3  
     __end_of_LCDPutStr3 0743               __pmaintext 06B2            LCDPutStr2@str 0036  
          LCDPutStr3@str 0079               __stringtab 0003         ??_LCD_Initialize 0077  
                __ptext1 076F                  __ptext2 071B                  __ptext3 07A0  
                __ptext4 0743                  __ptext5 06F4                  __ptext6 06D1  
        LCDPutStr2@_line 0078                _LCDPutCmd 0743          LCDPutStr3@_line 0077  
                clrloop0 06AB     end_of_initialization 07FC                _PORTDbits 0008  
             ?_LCDPutCmd 0070      start_initialization 07F3         ??_LCDWriteNibble 0071  
              ___latbits 0002            __pcstackBANK0 0034              ??_LCDPutCmd 0074  
       LCDWriteNibble@ch 0073         LCDWriteNibble@rs 0070                __pstrings 0003  
         LCDPutStr2@_pos 0077                clear_ram0 06AA              __stringbase 0008  
     __end_of__stringtab 0009               _LCDPutChar 06F4               _LCDPutStr2 07A0  
             _LCDPutStr3 071B                stringcode 0003                 stringdir 0003  
               stringtab 0003  
