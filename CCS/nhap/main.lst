CCS PCM C Compiler, Version 5.015, 5967               29-Thg3-22 21:10

               Filename:   C:\PIC16F887\CCS\nhap\main.lst

               ROM used:   204 words (2%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           13 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   073
0003:  NOP
....................  
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  MOVF   26,W
0013:  CLRF   78
0014:  SUBWF  25,W
0015:  BTFSC  03.0
0016:  GOTO   01A
0017:  MOVF   25,W
0018:  MOVWF  77
0019:  GOTO   026
001A:  CLRF   77
001B:  MOVLW  08
001C:  MOVWF  27
001D:  RLF    25,F
001E:  RLF    77,F
001F:  MOVF   26,W
0020:  SUBWF  77,W
0021:  BTFSC  03.0
0022:  MOVWF  77
0023:  RLF    78,F
0024:  DECFSZ 27,F
0025:  GOTO   01D
0026:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0027:  MOVLW  25
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03A
002D:  MOVLW  06
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  7B
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 00,F
0039:  GOTO   02D
003A:  RETURN
....................  
....................  
....................  
.................... UNSIGNED INT8 DEM, I,a,m ; 
.................... #DEFINE UP PIN_E0 
.................... #DEFINE DOWN PIN_E1 
.................... #DEFINE START PIN_E2 
.................... const UNSIGNED char MA7DOAN[]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0b11111000, 0x80, 0x90}; 
.................... VOID HIENTHI_DELAY(INT8 DEM) 
.................... { 
....................    FOR (I = 0; I < 200; I++) 
003B:  CLRF   21
003C:  MOVF   21,W
003D:  SUBLW  C7
003E:  BTFSS  03.0
003F:  GOTO   072
....................    { 
....................       OUTPUT_B (MA7DOAN[DEM % 10]); OUTPUT_LOW (PIN_D0); 
0040:  MOVF   24,W
0041:  MOVWF  25
0042:  MOVLW  0A
0043:  MOVWF  26
0044:  CALL   012
0045:  MOVF   77,W
0046:  CALL   004
0047:  MOVWF  25
0048:  BSF    03.5
0049:  CLRF   06
004A:  BCF    03.5
004B:  MOVF   25,W
004C:  MOVWF  06
004D:  BSF    03.5
004E:  BCF    08.0
004F:  BCF    03.5
0050:  BCF    08.0
....................       DELAY_MS (1); OUTPUT_HIGH (PIN_D0); 
0051:  MOVLW  01
0052:  MOVWF  25
0053:  CALL   027
0054:  BSF    03.5
0055:  BCF    08.0
0056:  BCF    03.5
0057:  BSF    08.0
....................       OUTPUT_B (MA7DOAN[DEM / 10]); OUTPUT_LOW (PIN_D1); 
0058:  MOVF   24,W
0059:  MOVWF  25
005A:  MOVLW  0A
005B:  MOVWF  26
005C:  CALL   012
005D:  MOVF   78,W
005E:  CALL   004
005F:  MOVWF  25
0060:  BSF    03.5
0061:  CLRF   06
0062:  BCF    03.5
0063:  MOVF   25,W
0064:  MOVWF  06
0065:  BSF    03.5
0066:  BCF    08.1
0067:  BCF    03.5
0068:  BCF    08.1
....................       DELAY_MS (1); OUTPUT_HIGH (PIN_D1); 
0069:  MOVLW  01
006A:  MOVWF  25
006B:  CALL   027
006C:  BSF    03.5
006D:  BCF    08.1
006E:  BCF    03.5
006F:  BSF    08.1
0070:  INCF   21,F
0071:  GOTO   03C
....................    } 
0072:  RETURN
.................... } 
.................... VOID MAIN() 
0073:  MOVF   03,W
0074:  ANDLW  1F
0075:  MOVWF  03
0076:  BSF    03.5
0077:  BSF    03.6
0078:  MOVF   09,W
0079:  ANDLW  C0
007A:  MOVWF  09
007B:  BCF    03.6
007C:  BCF    1F.4
007D:  BCF    1F.5
007E:  MOVLW  00
007F:  BSF    03.6
0080:  MOVWF  08
0081:  BCF    03.5
0082:  CLRF   07
0083:  CLRF   08
0084:  CLRF   09
0085:  BCF    03.7
....................  { 
....................    SET_TRIS_B (0x00); SET_TRIS_E (0xFF); SET_TRIS_D (0x00); 
0086:  MOVLW  00
0087:  BSF    03.5
0088:  BCF    03.6
0089:  MOVWF  06
008A:  BSF    09.0
008B:  BSF    09.1
008C:  BSF    09.2
008D:  BSF    09.3
008E:  MOVWF  08
....................    OUTPUT_D (0XFF) ; 
008F:  CLRF   08
0090:  MOVLW  FF
0091:  BCF    03.5
0092:  MOVWF  08
....................    DEM = 5; 
0093:  MOVLW  05
0094:  MOVWF  20
....................    WHILE (TRUE) 
....................    { 
....................       HIENTHI_DELAY (DEM) ; 
0095:  MOVF   20,W
0096:  MOVWF  24
0097:  CALL   03B
....................       WHILE (input (UP) == 0) 
0098:  BSF    03.5
0099:  BSF    09.0
009A:  BCF    03.5
009B:  BTFSC  09.0
009C:  GOTO   0A9
....................       { 
....................          IF (DEM == 15) break; 
009D:  MOVF   20,W
009E:  SUBLW  0F
009F:  BTFSS  03.2
00A0:  GOTO   0A3
00A1:  GOTO   0A9
00A2:  GOTO   0A8
....................          ELSE 
....................          { 
....................             DEM = DEM + 1; 
00A3:  MOVLW  01
00A4:  ADDWF  20,F
....................             HIENTHI_DELAY (DEM) ; 
00A5:  MOVF   20,W
00A6:  MOVWF  24
00A7:  CALL   03B
....................          } 
00A8:  GOTO   098
....................       } 
....................  
....................       WHILE (input (DOWN) == 0) 
00A9:  BSF    03.5
00AA:  BSF    09.1
00AB:  BCF    03.5
00AC:  BTFSC  09.1
00AD:  GOTO   0BA
....................       { 
....................          IF (DEM <= 6) break; 
00AE:  MOVF   20,W
00AF:  SUBLW  06
00B0:  BTFSS  03.0
00B1:  GOTO   0B4
00B2:  GOTO   0BA
00B3:  GOTO   0B9
....................          ELSE 
....................          { 
....................             DEM = DEM - 2; 
00B4:  MOVLW  02
00B5:  SUBWF  20,F
....................             HIENTHI_DELAY (DEM) ; 
00B6:  MOVF   20,W
00B7:  MOVWF  24
00B8:  CALL   03B
....................          } 
00B9:  GOTO   0A9
....................       } 
....................  
....................       WHILE (input (START) == 0) 
00BA:  BSF    03.5
00BB:  BSF    09.2
00BC:  BCF    03.5
00BD:  BTFSC  09.2
00BE:  GOTO   0CA
....................       { 
....................          FOR (m = 0; m <= DEM; m++) 
00BF:  CLRF   23
00C0:  MOVF   23,W
00C1:  SUBWF  20,W
00C2:  BTFSS  03.0
00C3:  GOTO   0C9
....................          { 
....................             HIENTHI_DELAY (m) ; 
00C4:  MOVF   23,W
00C5:  MOVWF  24
00C6:  CALL   03B
00C7:  INCF   23,F
00C8:  GOTO   0C0
....................          } 
00C9:  GOTO   0BA
....................       }}} 
00CA:  GOTO   095
....................  
00CB:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
