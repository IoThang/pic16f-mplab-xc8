CCS PCM C Compiler, Version 5.015, 5967               06-Thg3-22 21:22

               Filename:   C:\PIC16F887\CCS\LEDBLINK\main.lst

               ROM used:   107 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #FUSES HS //Declare crystal 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #use fast_io(b) 
.................... #byte portb=0x6 
.................... #use delay(crystal=4000000) 
0004:  MOVLW  24
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #Define LED_1(x)  output_bit(PIN_B0, x) 
.................... #Define LED_2(x)  output_bit(PIN_B1, x) 
.................... #Define LED_3(x)  output_bit(PIN_B2, x) 
.................... #Define LED_4(x)  output_bit(PIN_B3, x) 
.................... #Define LED_5(x)  output_bit(PIN_B4, x) 
.................... #Define LED_6(x)  output_bit(PIN_B5, x) 
.................... #Define LED_7(x)  output_bit(PIN_B6, x) 
.................... #Define LED_8(x)  output_bit(PIN_B7, x) 
....................  
.................... //Den sang duoi theo 
....................  
.................... //UNSIGNED CHAR NUMBER1[] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000}; 
.................... //Den sang dan 
.................... //UNSIGNED CHAR NUMBER2[] = {0b00000001, 0b00000011, 0b00000111, 0b00001111, 0b00011111, 0b00111111, 0b01111111, 0b11111111}; 
.................... //Den sang don 
.................... //UNSIGNED CHAR NUMBER3[] = {0b10000000, 0b11000000, 0b11100000, 0b11110000, 0b11111000, 0b11111100, 0b11111110, 0b11111111}; 
.................... void led(INT tenLed, int level) 
.................... { 
....................    IF(tenLed == 1) 
....................       output_bit(PIN_B0, level); 
....................  
....................    else IF(tenLed == 2) 
....................       output_bit(PIN_B1, level); 
....................  
....................    else IF(tenLed == 3) 
....................       output_bit(PIN_B2, level); 
....................  
....................    else IF(tenLed == 4) 
....................       output_bit(PIN_B3, level); 
....................  
....................    else IF(tenLed == 5) 
....................       output_bit(PIN_B4, level); 
....................  
....................    else IF(tenLed == 6) 
....................       output_bit(PIN_B5, level); 
....................  
....................    else IF(tenLed == 7) 
....................       output_bit(PIN_B6, level); 
....................  
....................    else IF(tenLed == 8) 
....................       output_bit(PIN_B7, level); 
.................... } 
....................  
.................... void blink (INT time) 
.................... { 
....................    UNSIGNED char i; 
....................    FOR (i = 0; i < time; i++) 
....................    { 
....................       output_b (0xFF); 
....................       delay_ms (100); 
....................       output_b (0x00); 
....................       delay_ms (100); 
....................    } 
.................... } 
....................  
.................... void ledSangDuoiTheo(INT time) 
.................... { 
....................    CHAR i, j; 
....................    FOR(j = 0; j < time; j++) 
....................    { 
....................       FOR (i = 0; i < 8; i++) //led sang duoi theo 
....................       { 
....................          //Cach 1 
....................          //output_b (NUMBER1[i]); 
....................          //delay_ms (300); 
....................           
....................          //Cach 2 
....................          led (i + 1, 1); 
....................          delay_ms (300); 
....................          led (i + 1, 0); 
....................       } 
....................    } 
.................... } 
....................  
.................... void ledSangDan(INT time) 
.................... { 
....................    CHAR i, j; 
....................    FOR (j = 0; j < time; j++) 
....................    { 
....................       FOR (i = 0; i < 8; i++) //Led sang dan 
....................       { 
....................          //Cach 1 
....................          //output_b (NUMBER2[j]); 
....................          //delay_ms (300); 
....................           
....................          //Cach 2 
....................          led (i + 1, 1); 
....................          delay_ms (300) ; 
....................       } 
....................  
....................       output_b (0x00); 
....................       delay_ms (300); 
....................    } 
.................... } 
....................  
.................... void ledSangDon(INT time) 
.................... { 
....................    CHAR i, j, k; 
....................    FOR (j = 0; j < time; j++) 
....................    { 
....................       FOR (i = 8; i >= 1; i--) //Led sang dan 
....................       { 
....................          FOR (k = 1; k < i + 1; k++) 
....................          { 
....................             led (k, 1); 
....................             delay_ms (300) ; 
....................             led (k, 0); 
....................          } 
....................  
....................          led (i, 1); 
....................       } 
....................  
....................       output_b (0x00); 
....................       delay_ms (300); 
....................    } 
.................... } 
....................  
.................... void main() 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  BSF    03.5
001D:  BSF    03.6
001E:  MOVF   09,W
001F:  ANDLW  C0
0020:  MOVWF  09
0021:  BCF    03.6
0022:  BCF    1F.4
0023:  BCF    1F.5
0024:  MOVLW  00
0025:  BSF    03.6
0026:  MOVWF  08
0027:  BCF    03.5
0028:  CLRF   07
0029:  CLRF   08
002A:  CLRF   09
002B:  BCF    03.7
.................... { 
.................... set_tris_b(0); //configure pins of PORTB as output  0: output; 1: input 
002C:  MOVLW  00
002D:  BSF    03.5
002E:  BCF    03.6
002F:  MOVWF  06
....................  
....................    WHILE (TRUE) 
....................    { 
....................       /*blink (10); 
....................        
....................       output_b (0x00); //tat het led 
....................       delay_ms (300); 
....................        
....................       ledSangDuoiTheo (3) ; 
....................        
....................       output_b (0x00); 
....................       delay_ms (300); 
....................        
....................       ledSangDan (3) ; 
....................        
....................       output_b (0x00); 
....................       delay_ms (300); 
....................        
....................       ledSangDon (3) ;*/ 
....................        
....................       for(int j = 0; j < 2; j++) 
0030:  BCF    03.5
0031:  CLRF   21
0032:  MOVF   21,W
0033:  SUBLW  01
0034:  BTFSS  03.0
0035:  GOTO   069
....................       { 
....................          for(int i = 0; i < 3; i++) 
0036:  CLRF   22
0037:  MOVF   22,W
0038:  SUBLW  02
0039:  BTFSS  03.0
003A:  GOTO   055
....................          { 
....................             output_bit(pin_b0, 1); 
003B:  BSF    06.0
....................             delay_ms(500); 
003C:  MOVLW  02
003D:  MOVWF  23
003E:  MOVLW  FA
003F:  MOVWF  24
0040:  CALL   004
0041:  DECFSZ 23,F
0042:  GOTO   03E
....................             output_bit(pin_b1, 1); 
0043:  BSF    06.1
....................             delay_ms(500); 
0044:  MOVLW  02
0045:  MOVWF  23
0046:  MOVLW  FA
0047:  MOVWF  24
0048:  CALL   004
0049:  DECFSZ 23,F
004A:  GOTO   046
....................             output_bit(pin_b2, 1); 
004B:  BSF    06.2
....................             delay_ms(500); 
004C:  MOVLW  02
004D:  MOVWF  23
004E:  MOVLW  FA
004F:  MOVWF  24
0050:  CALL   004
0051:  DECFSZ 23,F
0052:  GOTO   04E
0053:  INCF   22,F
0054:  GOTO   037
....................          } 
....................          output_bit(pin_b5, 1); 
0055:  BSF    06.5
....................          delay_ms(500); 
0056:  MOVLW  02
0057:  MOVWF  23
0058:  MOVLW  FA
0059:  MOVWF  24
005A:  CALL   004
005B:  DECFSZ 23,F
005C:  GOTO   058
....................          if(j == 1) 
005D:  DECFSZ 21,W
005E:  GOTO   067
....................          { 
....................             output_bit(pin_b6, 1); 
005F:  BSF    06.6
....................             delay_ms(500); 
0060:  MOVLW  02
0061:  MOVWF  23
0062:  MOVLW  FA
0063:  MOVWF  24
0064:  CALL   004
0065:  DECFSZ 23,F
0066:  GOTO   062
....................          } 
0067:  INCF   21,F
0068:  GOTO   032
....................       } 
0069:  GOTO   031
....................        
....................        
....................        
.................... /*portb=255;  
.................... delay_ms(300); 
.................... portb=0;  
.................... delay_ms(300);*/ 
....................    } 
.................... } 
....................  
006A:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
