CCS PCM C Compiler, Version 5.015, 5967               11-Thg3-22 19:03

               Filename:   C:\PIC16F887\CCS\TIMER_P5\main.lst

               ROM used:   685 words (8%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           29 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   207
0003:  NOP
.................... //chua hoan thanh nhung code duoc, bat buoc xem lai t1_external :(( 
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C6,2A
0005:  DATA 4C,26
0006:  DATA 00,00
0007:  DATA 20,10
0008:  DATA D2,2A
0009:  DATA 4E,00
000A:  DATA A0,29
000B:  DATA D4,27
000C:  DATA 50,00
000D:  DATA C2,37
000E:  DATA F8,1E
000F:  DATA 25,18
0010:  DATA 34,36
0011:  DATA 75,00
*
00F5:  MOVF   0B,W
00F6:  MOVWF  25
00F7:  BCF    0B.7
00F8:  BSF    03.5
00F9:  BSF    03.6
00FA:  BSF    0C.7
00FB:  BSF    0C.0
00FC:  NOP
00FD:  NOP
00FE:  BCF    03.5
00FF:  BCF    03.6
0100:  BTFSC  25.7
0101:  BSF    0B.7
0102:  BSF    03.6
0103:  MOVF   0C,W
0104:  ANDLW  7F
0105:  BTFSC  03.2
0106:  GOTO   149
0107:  BCF    03.6
0108:  MOVWF  25
0109:  BSF    03.6
010A:  MOVF   0D,W
010B:  BCF    03.6
010C:  MOVWF  26
010D:  BSF    03.6
010E:  MOVF   0F,W
010F:  BCF    03.6
0110:  MOVWF  27
0111:  MOVF   25,W
0112:  MOVWF  2E
0113:  CALL   0C9
0114:  MOVF   26,W
0115:  BSF    03.6
0116:  MOVWF  0D
0117:  BCF    03.6
0118:  MOVF   27,W
0119:  BSF    03.6
011A:  MOVWF  0F
011B:  BCF    03.6
011C:  MOVF   0B,W
011D:  MOVWF  28
011E:  BCF    0B.7
011F:  BSF    03.5
0120:  BSF    03.6
0121:  BSF    0C.7
0122:  BSF    0C.0
0123:  NOP
0124:  NOP
0125:  BCF    03.5
0126:  BCF    03.6
0127:  BTFSC  28.7
0128:  BSF    0B.7
0129:  BSF    03.6
012A:  RLF    0C,W
012B:  RLF    0E,W
012C:  ANDLW  7F
012D:  BTFSC  03.2
012E:  GOTO   149
012F:  BCF    03.6
0130:  MOVWF  25
0131:  BSF    03.6
0132:  MOVF   0D,W
0133:  BCF    03.6
0134:  MOVWF  26
0135:  BSF    03.6
0136:  MOVF   0F,W
0137:  BCF    03.6
0138:  MOVWF  27
0139:  MOVF   25,W
013A:  MOVWF  2E
013B:  CALL   0C9
013C:  MOVF   26,W
013D:  BSF    03.6
013E:  MOVWF  0D
013F:  BCF    03.6
0140:  MOVF   27,W
0141:  BSF    03.6
0142:  MOVWF  0F
0143:  INCF   0D,F
0144:  BTFSC  03.2
0145:  INCF   0F,F
0146:  BCF    03.6
0147:  GOTO   0F5
0148:  BSF    03.6
0149:  BCF    03.6
014A:  RETURN
014B:  CLRF   2D
014C:  MOVF   04,W
014D:  MOVWF  2C
014E:  BCF    2D.0
014F:  BTFSC  03.7
0150:  BSF    2D.0
0151:  SWAPF  26,W
0152:  IORLW  F0
0153:  MOVWF  28
0154:  ADDWF  28,F
0155:  ADDLW  E2
0156:  MOVWF  29
0157:  ADDLW  32
0158:  MOVWF  2B
0159:  MOVF   26,W
015A:  ANDLW  0F
015B:  ADDWF  29,F
015C:  ADDWF  29,F
015D:  ADDWF  2B,F
015E:  ADDLW  E9
015F:  MOVWF  2A
0160:  ADDWF  2A,F
0161:  ADDWF  2A,F
0162:  SWAPF  25,W
0163:  ANDLW  0F
0164:  ADDWF  2A,F
0165:  ADDWF  2B,F
0166:  RLF    2A,F
0167:  RLF    2B,F
0168:  COMF   2B,F
0169:  RLF    2B,F
016A:  MOVF   25,W
016B:  ANDLW  0F
016C:  ADDWF  2B,F
016D:  RLF    28,F
016E:  MOVLW  07
016F:  MOVWF  27
0170:  MOVLW  0A
0171:  ADDWF  2B,F
0172:  DECF   2A,F
0173:  BTFSS  03.0
0174:  GOTO   171
0175:  ADDWF  2A,F
0176:  DECF   29,F
0177:  BTFSS  03.0
0178:  GOTO   175
0179:  ADDWF  29,F
017A:  DECF   28,F
017B:  BTFSS  03.0
017C:  GOTO   179
017D:  ADDWF  28,F
017E:  DECF   27,F
017F:  BTFSS  03.0
0180:  GOTO   17D
0181:  MOVLW  27
0182:  MOVWF  04
0183:  BCF    03.7
0184:  MOVLW  07
0185:  ANDWF  2C,W
0186:  BCF    2C.6
0187:  ADDWF  04,F
0188:  MOVLW  2B
0189:  SUBWF  04,W
018A:  BTFSC  03.2
018B:  BSF    2C.6
018C:  MOVF   00,W
018D:  MOVWF  77
018E:  BTFSS  03.2
018F:  GOTO   198
0190:  BTFSC  2C.6
0191:  GOTO   198
0192:  BTFSC  2C.4
0193:  GOTO   1AA
0194:  BTFSC  2C.3
0195:  GOTO   198
0196:  MOVLW  20
0197:  GOTO   19B
0198:  BSF    2C.3
0199:  BCF    2C.4
019A:  MOVLW  30
019B:  ADDWF  77,F
019C:  CLRF   26
019D:  MOVF   04,W
019E:  MOVWF  25
019F:  BCF    26.0
01A0:  BTFSC  03.7
01A1:  BSF    26.0
01A2:  MOVF   77,W
01A3:  MOVWF  2E
01A4:  CALL   0C9
01A5:  MOVF   25,W
01A6:  MOVWF  04
01A7:  BCF    03.7
01A8:  BTFSC  26.0
01A9:  BSF    03.7
01AA:  INCF   04,F
01AB:  BTFSS  2C.6
01AC:  GOTO   188
01AD:  RETURN
01AE:  MOVF   0B,W
01AF:  MOVWF  26
01B0:  BCF    0B.7
01B1:  BSF    03.5
01B2:  BSF    03.6
01B3:  BSF    0C.7
01B4:  BSF    0C.0
01B5:  NOP
01B6:  NOP
01B7:  BCF    03.5
01B8:  BCF    03.6
01B9:  BTFSC  26.7
01BA:  BSF    0B.7
01BB:  BTFSC  03.0
01BC:  GOTO   1E5
01BD:  BSF    03.6
01BE:  MOVF   0C,W
01BF:  ANDLW  7F
01C0:  BCF    03.6
01C1:  MOVWF  26
01C2:  BSF    03.6
01C3:  MOVF   0D,W
01C4:  BCF    03.6
01C5:  MOVWF  27
01C6:  BSF    03.6
01C7:  MOVF   0F,W
01C8:  BCF    03.6
01C9:  MOVWF  28
01CA:  MOVF   26,W
01CB:  MOVWF  2E
01CC:  CALL   0C9
01CD:  MOVF   27,W
01CE:  BSF    03.6
01CF:  MOVWF  0D
01D0:  BCF    03.6
01D1:  MOVF   28,W
01D2:  BSF    03.6
01D3:  MOVWF  0F
01D4:  BCF    03.6
01D5:  MOVF   0B,W
01D6:  MOVWF  29
01D7:  BCF    0B.7
01D8:  BSF    03.5
01D9:  BSF    03.6
01DA:  BSF    0C.7
01DB:  BSF    0C.0
01DC:  NOP
01DD:  NOP
01DE:  BCF    03.5
01DF:  BCF    03.6
01E0:  BTFSC  29.7
01E1:  BSF    0B.7
01E2:  DECFSZ 25,F
01E3:  GOTO   1E5
01E4:  GOTO   204
01E5:  BSF    03.6
01E6:  RLF    0C,W
01E7:  RLF    0E,W
01E8:  ANDLW  7F
01E9:  BCF    03.6
01EA:  MOVWF  26
01EB:  BSF    03.6
01EC:  MOVF   0D,W
01ED:  BCF    03.6
01EE:  MOVWF  27
01EF:  BSF    03.6
01F0:  MOVF   0F,W
01F1:  BCF    03.6
01F2:  MOVWF  28
01F3:  MOVF   26,W
01F4:  MOVWF  2E
01F5:  CALL   0C9
01F6:  MOVF   27,W
01F7:  BSF    03.6
01F8:  MOVWF  0D
01F9:  BCF    03.6
01FA:  MOVF   28,W
01FB:  BSF    03.6
01FC:  MOVWF  0F
01FD:  INCF   0D,F
01FE:  BTFSC  03.2
01FF:  INCF   0F,F
0200:  BCF    03.0
0201:  BCF    03.6
0202:  DECFSZ 25,F
0203:  GOTO   1AE
0204:  BCF    0A.3
0205:  BCF    0A.4
0206:  GOTO   2A4 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8000000) 
*
0012:  MOVLW  2F
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   025
0018:  MOVLW  02
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  97
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 00,F
0024:  GOTO   018
0025:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003F:  MOVLW  0F
0040:  BSF    03.5
0041:  ANDWF  08,W
0042:  IORLW  F0
0043:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0044:  BCF    03.5
0045:  BSF    08.2
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    08.0
....................    delay_cycles(1); 
0048:  NOP
....................    high = lcd_read_nibble(); 
0049:  CALL   033
004A:  MOVF   78,W
004B:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
004C:  BCF    08.0
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    08.0
....................    delay_us(1); 
004F:  GOTO   050
....................    low = lcd_read_nibble(); 
0050:  CALL   033
0051:  MOVF   78,W
0052:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0053:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0054:  MOVLW  0F
0055:  BSF    03.5
0056:  ANDWF  08,W
0057:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0058:  BCF    03.5
0059:  SWAPF  36,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  IORWF  35,W
005F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0033:  MOVF   08,W
0034:  MOVWF  77
0035:  SWAPF  08,W
0036:  ANDLW  0F
0037:  MOVWF  78
....................   #endif 
0038:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0026:  SWAPF  36,W
0027:  ANDLW  F0
0028:  MOVWF  77
0029:  MOVLW  0F
002A:  ANDWF  08,W
002B:  IORWF  77,W
002C:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002D:  NOP
....................    lcd_output_enable(1); 
002E:  BSF    08.0
....................    delay_us(2); 
002F:  GOTO   030
0030:  GOTO   031
....................    lcd_output_enable(0); 
0031:  BCF    08.0
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0039:  BSF    03.5
003A:  BCF    08.0
....................    lcd_rs_tris(); 
003B:  BCF    08.1
....................    lcd_rw_tris(); 
003C:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003D:  BCF    03.5
003E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0060:  MOVF   78,W
0061:  MOVWF  35
0062:  BTFSC  35.7
0063:  GOTO   03F
....................    lcd_output_rs(address); 
0064:  BTFSS  33.0
0065:  BCF    08.1
0066:  BTFSC  33.0
0067:  BSF    08.1
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_rw(0); 
0069:  BCF    08.2
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_enable(0); 
006B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006C:  SWAPF  34,W
006D:  MOVWF  35
006E:  MOVLW  0F
006F:  ANDWF  35,F
0070:  MOVF   35,W
0071:  MOVWF  36
0072:  CALL   026
....................    lcd_send_nibble(n & 0xf); 
0073:  MOVF   34,W
0074:  ANDLW  0F
0075:  MOVWF  35
0076:  MOVWF  36
0077:  CALL   026
0078:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0079:  MOVLW  28
007A:  MOVWF  26
007B:  MOVLW  0C
007C:  MOVWF  27
007D:  MOVLW  01
007E:  MOVWF  28
007F:  MOVLW  06
0080:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0081:  BCF    08.0
....................    lcd_output_rs(0); 
0082:  BCF    08.1
....................    lcd_output_rw(0); 
0083:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0084:  MOVLW  0F
0085:  BSF    03.5
0086:  ANDWF  08,W
0087:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0088:  BCF    08.0
....................    lcd_rs_tris(); 
0089:  BCF    08.1
....................    lcd_rw_tris(); 
008A:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008B:  MOVLW  0F
008C:  BCF    03.5
008D:  MOVWF  2F
008E:  CALL   012
....................    for(i=1;i<=3;++i) 
008F:  MOVLW  01
0090:  MOVWF  25
0091:  MOVF   25,W
0092:  SUBLW  03
0093:  BTFSS  03.0
0094:  GOTO   09D
....................    { 
....................        lcd_send_nibble(3); 
0095:  MOVLW  03
0096:  MOVWF  36
0097:  CALL   026
....................        delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  2F
009A:  CALL   012
009B:  INCF   25,F
009C:  GOTO   091
....................    } 
....................     
....................    lcd_send_nibble(2); 
009D:  MOVLW  02
009E:  MOVWF  36
009F:  CALL   026
....................    delay_ms(5); 
00A0:  MOVLW  05
00A1:  MOVWF  2F
00A2:  CALL   012
....................    for(i=0;i<=3;++i) 
00A3:  CLRF   25
00A4:  MOVF   25,W
00A5:  SUBLW  03
00A6:  BTFSS  03.0
00A7:  GOTO   0B4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A8:  MOVLW  26
00A9:  ADDWF  25,W
00AA:  MOVWF  04
00AB:  BCF    03.7
00AC:  MOVF   00,W
00AD:  MOVWF  2A
00AE:  CLRF   33
00AF:  MOVF   2A,W
00B0:  MOVWF  34
00B1:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B2:  INCF   25,F
00B3:  GOTO   0A4
00B4:  BCF    0A.3
00B5:  BCF    0A.4
00B6:  GOTO   221 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B7:  DECFSZ 30,W
00B8:  GOTO   0BA
00B9:  GOTO   0BD
....................       address=LCD_LINE_TWO; 
00BA:  MOVLW  40
00BB:  MOVWF  31
00BC:  GOTO   0BE
....................    else 
....................       address=0; 
00BD:  CLRF   31
....................       
....................    address+=x-1; 
00BE:  MOVLW  01
00BF:  SUBWF  2F,W
00C0:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
00C1:  MOVF   31,W
00C2:  IORLW  80
00C3:  MOVWF  32
00C4:  CLRF   33
00C5:  MOVF   32,W
00C6:  MOVWF  34
00C7:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C9:  MOVF   2E,W
00CA:  XORLW  07
00CB:  BTFSC  03.2
00CC:  GOTO   0D7
00CD:  XORLW  0B
00CE:  BTFSC  03.2
00CF:  GOTO   0DC
00D0:  XORLW  06
00D1:  BTFSC  03.2
00D2:  GOTO   0E4
00D3:  XORLW  02
00D4:  BTFSC  03.2
00D5:  GOTO   0EA
00D6:  GOTO   0EF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D7:  MOVLW  01
00D8:  MOVWF  2F
00D9:  MOVWF  30
00DA:  CALL   0B7
00DB:  GOTO   0F4
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DC:  CLRF   33
00DD:  MOVLW  01
00DE:  MOVWF  34
00DF:  CALL   039
....................                      delay_ms(2); 
00E0:  MOVLW  02
00E1:  MOVWF  2F
00E2:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E3:  GOTO   0F4
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E4:  MOVLW  01
00E5:  MOVWF  2F
00E6:  MOVLW  02
00E7:  MOVWF  30
00E8:  CALL   0B7
00E9:  GOTO   0F4
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00EA:  CLRF   33
00EB:  MOVLW  10
00EC:  MOVWF  34
00ED:  CALL   039
00EE:  GOTO   0F4
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00EF:  MOVLW  01
00F0:  MOVWF  33
00F1:  MOVF   2E,W
00F2:  MOVWF  34
00F3:  CALL   039
....................      #endif 
....................    } 
00F4:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... unsigned int16 sp = 0; 
.................... unsigned int16 box = 0; 
.................... unsigned char mode= 0; 
.................... void main() 
*
0207:  MOVF   03,W
0208:  ANDLW  1F
0209:  MOVWF  03
020A:  CLRF   21
020B:  CLRF   20
020C:  CLRF   23
020D:  CLRF   22
020E:  CLRF   24
020F:  BSF    03.5
0210:  BSF    03.6
0211:  MOVF   09,W
0212:  ANDLW  C0
0213:  MOVWF  09
0214:  BCF    03.6
0215:  BCF    1F.4
0216:  BCF    1F.5
0217:  MOVLW  00
0218:  BSF    03.6
0219:  MOVWF  08
021A:  BCF    03.5
021B:  CLRF   07
021C:  CLRF   08
021D:  CLRF   09
021E:  BCF    03.7
.................... { 
....................    lcd_init(); 
021F:  BCF    03.6
0220:  GOTO   079
....................    setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1); 
0221:  MOVLW  07
0222:  MOVWF  10
....................    set_timer1(0); 
0223:  CLRF   0E
0224:  CLRF   0F
0225:  CLRF   0E
....................    /*while(true) 
....................    { 
....................       if(input(pin_b0) == 0) 
....................       mode = 1; 
....................       if(input(pin_b1) == 0) 
....................       mode = 2; 
....................       if(mode == 1) 
....................       { 
....................          sp = get_timer1(); 
....................          if(sp == 11) 
....................          { 
....................             box++; 
....................             set_timer1( 
....................          } 
....................       } 
....................    }*/ 
....................    while(TRUE) 
....................    { 
....................       if(input(pin_b0) == 0)  { mode = 1; } 
0226:  BSF    03.5
0227:  BSF    06.0
0228:  BCF    03.5
0229:  BTFSC  06.0
022A:  GOTO   22D
022B:  MOVLW  01
022C:  MOVWF  24
....................       if(input(pin_b1) == 0)  { mode = 2; } 
022D:  BSF    03.5
022E:  BSF    06.1
022F:  BCF    03.5
0230:  BTFSC  06.1
0231:  GOTO   234
0232:  MOVLW  02
0233:  MOVWF  24
....................       //if(input(pin_e3) == 0)  { mode = 0; } 
....................       if(mode == 1) 
0234:  DECFSZ 24,W
0235:  GOTO   273
....................       { 
....................          setup_timer_1(T1_EXTERNAL); 
0236:  MOVLW  07
0237:  MOVWF  10
....................          sp = get_timer1(); 
0238:  MOVF   0F,W
0239:  MOVWF  7A
023A:  MOVF   0E,W
023B:  MOVWF  77
023C:  MOVF   0F,W
023D:  SUBWF  7A,W
023E:  BTFSS  03.2
023F:  GOTO   238
0240:  MOVF   77,W
0241:  MOVWF  20
0242:  MOVF   7A,W
0243:  MOVWF  21
....................          if(sp == 10) 
0244:  MOVF   20,W
0245:  SUBLW  0A
0246:  BTFSS  03.2
0247:  GOTO   251
0248:  MOVF   21,F
0249:  BTFSS  03.2
024A:  GOTO   251
....................          { 
....................             set_timer1(0); 
024B:  CLRF   0E
024C:  CLRF   0F
024D:  CLRF   0E
....................             box++; 
024E:  INCF   22,F
024F:  BTFSC  03.2
0250:  INCF   23,F
....................          } 
....................          if(box == 2) 
0251:  MOVF   22,W
0252:  SUBLW  02
0253:  BTFSS  03.2
0254:  GOTO   266
0255:  MOVF   23,F
0256:  BTFSS  03.2
0257:  GOTO   266
....................          { 
....................             lcd_gotoxy(13,2); 
0258:  MOVLW  0D
0259:  MOVWF  2F
025A:  MOVLW  02
025B:  MOVWF  30
025C:  CALL   0B7
....................             lcd_putc("FULL"); 
025D:  MOVLW  04
025E:  BSF    03.6
025F:  MOVWF  0D
0260:  MOVLW  00
0261:  MOVWF  0F
0262:  BCF    03.6
0263:  CALL   0F5
....................             mode = 2; 
0264:  MOVLW  02
0265:  MOVWF  24
....................          } 
....................          lcd_gotoxy(12,1); 
0266:  MOVLW  0C
0267:  MOVWF  2F
0268:  MOVLW  01
0269:  MOVWF  30
026A:  CALL   0B7
....................          lcd_putc("  RUN"); 
026B:  MOVLW  07
026C:  BSF    03.6
026D:  MOVWF  0D
026E:  MOVLW  00
026F:  MOVWF  0F
0270:  BCF    03.6
0271:  CALL   0F5
....................       } 
0272:  GOTO   284
....................       else if(mode == 2) 
0273:  MOVF   24,W
0274:  SUBLW  02
0275:  BTFSS  03.2
0276:  GOTO   284
....................       { 
....................          setup_timer_1(T1_DISABLED); 
0277:  CLRF   10
....................          lcd_gotoxy(12,1); 
0278:  MOVLW  0C
0279:  MOVWF  2F
027A:  MOVLW  01
027B:  MOVWF  30
027C:  CALL   0B7
....................          lcd_putc(" STOP");         
027D:  MOVLW  0A
027E:  BSF    03.6
027F:  MOVWF  0D
0280:  MOVLW  00
0281:  MOVWF  0F
0282:  BCF    03.6
0283:  CALL   0F5
....................       } 
....................        
....................       lcd_gotoxy(1, 1); 
0284:  MOVLW  01
0285:  MOVWF  2F
0286:  MOVWF  30
0287:  CALL   0B7
....................       printf(lcd_putc,"P=%2lu", sp); 
0288:  MOVLW  50
0289:  MOVWF  2E
028A:  CALL   0C9
028B:  MOVLW  3D
028C:  MOVWF  2E
028D:  CALL   0C9
028E:  MOVLW  03
028F:  MOVWF  04
0290:  MOVF   21,W
0291:  MOVWF  26
0292:  MOVF   20,W
0293:  MOVWF  25
0294:  CALL   14B
....................       //delay_ms(500); 
....................       lcd_gotoxy(1,2); 
0295:  MOVLW  01
0296:  MOVWF  2F
0297:  MOVLW  02
0298:  MOVWF  30
0299:  CALL   0B7
....................       printf(lcd_putc,"Box=%04lu", box); 
029A:  MOVLW  0D
029B:  BSF    03.6
029C:  MOVWF  0D
029D:  MOVLW  00
029E:  MOVWF  0F
029F:  BCF    03.0
02A0:  MOVLW  04
02A1:  BCF    03.6
02A2:  MOVWF  25
02A3:  GOTO   1AE
02A4:  MOVLW  09
02A5:  MOVWF  04
02A6:  MOVF   23,W
02A7:  MOVWF  26
02A8:  MOVF   22,W
02A9:  MOVWF  25
02AA:  CALL   14B
02AB:  GOTO   226
....................    } 
....................  
.................... } 
....................  
02AC:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
