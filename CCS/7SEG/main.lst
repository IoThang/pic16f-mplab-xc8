CCS PCM C Compiler, Version 5.015, 5967               22-Thg2-22 17:04

               Filename:   C:\PIC16F887\7SEG\main.lst

               ROM used:   122 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           8 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   057
0003:  NOP
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  40
0009:  RETLW  79
000A:  RETLW  24
000B:  RETLW  30
000C:  RETLW  19
000D:  RETLW  12
000E:  RETLW  02
000F:  RETLW  78
0010:  RETLW  00
0011:  RETLW  10
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
0012:  MOVLW  22
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
....................  
....................  
.................... #define BUTTON PIN_D0 
....................  
.................... const UNSIGNED char maLed[]={0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10}; 
.................... void count() 
.................... { 
....................    SIGNED char i; 
....................    FOR (i = 0; i <= 9; i++) 
....................    { 
....................       output_c (maLed[i]); 
....................       delay_ms (500); 
....................    } 
.................... } 
....................  
.................... void countDown() 
.................... { 
....................    SIGNED char j; //Ko dung int duoc 
....................    FOR (j = 9; j >= 0; j--) 
....................    { 
....................       output_c (maLed[j]); 
....................       delay_ms (500); 
....................    } 
.................... } 
....................  
.................... void buttonLed() 
0027:  CLRF   21
.................... { 
....................    char cnt = 0; 
....................    output_c(0xFF); 
0028:  MOVLW  00
0029:  MOVWF  20
002A:  BSF    03.5
002B:  CLRF   07
002C:  MOVLW  FF
002D:  BCF    03.5
002E:  MOVWF  07
....................    WHILE(1) 
....................    { 
....................       IF (input (BUTTON) == 0) 
002F:  BSF    03.5
0030:  BSF    08.0
0031:  BCF    03.5
0032:  BTFSC  08.0
0033:  GOTO   053
....................       { 
....................          delay_ms (20); 
0034:  MOVLW  14
0035:  MOVWF  22
0036:  CALL   012
....................  
....................          IF (input (BUTTON) == 0) 
0037:  BSF    03.5
0038:  BSF    08.0
0039:  BCF    03.5
003A:  BTFSC  08.0
003B:  GOTO   053
....................          { 
....................             IF (cnt > 9) 
003C:  MOVF   21,W
003D:  SUBLW  09
003E:  BTFSS  03.0
....................             { 
....................                cnt = 0; 
003F:  CLRF   21
....................             } 
....................             output_c (maLed[cnt]); 
0040:  MOVF   21,W
0041:  CALL   004
0042:  MOVWF  22
0043:  MOVLW  00
0044:  MOVWF  20
0045:  BSF    03.5
0046:  CLRF   07
0047:  BCF    03.5
0048:  MOVF   22,W
0049:  MOVWF  07
....................             delay_ms (100); 
004A:  MOVLW  64
004B:  MOVWF  22
004C:  CALL   012
....................             cnt++; 
004D:  INCF   21,F
....................             WHILE (input (BUTTON) == 0); 
004E:  BSF    03.5
004F:  BSF    08.0
0050:  BCF    03.5
0051:  BTFSS  08.0
0052:  GOTO   04E
....................          } 
....................       } 
0053:  GOTO   02F
....................  
....................    } 
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   078 (RETURN)
.................... } 
....................  
.................... void main() 
0057:  MOVF   03,W
0058:  ANDLW  1F
0059:  MOVWF  03
005A:  MOVLW  FF
005B:  MOVWF  20
005C:  BSF    03.5
005D:  BSF    03.6
005E:  MOVF   09,W
005F:  ANDLW  C0
0060:  MOVWF  09
0061:  BCF    03.6
0062:  BCF    1F.4
0063:  BCF    1F.5
0064:  MOVLW  00
0065:  BSF    03.6
0066:  MOVWF  08
0067:  BCF    03.5
0068:  CLRF   07
0069:  CLRF   08
006A:  CLRF   09
006B:  BCF    03.7
.................... { 
....................    output_c (0x00); //tat het port c chong nhieu 
006C:  MOVLW  00
006D:  BCF    03.6
006E:  MOVWF  20
006F:  BSF    03.5
0070:  CLRF   07
0071:  BCF    03.5
0072:  CLRF   07
....................    set_tris_c (0); //configues 
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  MOVWF  20
....................    WHILE (TRUE) 
....................    { 
....................       /* count () ; 
....................       output_c (0xFF); //Delete Screen in 300ms 
....................       delay_ms (300); 
....................       countDown (); 
....................       output_c (0xFF); //Delete Screen in 300ms 
....................       delay_ms (300); */ 
....................       buttonLed (); 
0077:  GOTO   027
0078:  GOTO   077
....................    } 
.................... } 
....................  
0079:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
