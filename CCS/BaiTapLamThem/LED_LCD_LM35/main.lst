CCS PCM C Compiler, Version 5.015, 5967               02-Thg3-22 09:55

               Filename:   C:\PIC16F887\LED_LCD_LM35\main.lst

               ROM used:   979 words (12%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           31 (8%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   361
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,27
0005:  DATA 20,27
0006:  DATA C8,24
0007:  DATA 45,2A
0008:  DATA 20,22
0009:  DATA 4F,00
*
00F3:  MOVF   0B,W
00F4:  MOVWF  22
00F5:  BCF    0B.7
00F6:  BSF    03.5
00F7:  BSF    03.6
00F8:  BSF    0C.7
00F9:  BSF    0C.0
00FA:  NOP
00FB:  NOP
00FC:  BCF    03.5
00FD:  BCF    03.6
00FE:  BTFSC  22.7
00FF:  BSF    0B.7
0100:  BSF    03.6
0101:  MOVF   0C,W
0102:  ANDLW  7F
0103:  BTFSC  03.2
0104:  GOTO   147
0105:  BCF    03.6
0106:  MOVWF  22
0107:  BSF    03.6
0108:  MOVF   0D,W
0109:  BCF    03.6
010A:  MOVWF  23
010B:  BSF    03.6
010C:  MOVF   0F,W
010D:  BCF    03.6
010E:  MOVWF  24
010F:  MOVF   22,W
0110:  MOVWF  30
0111:  CALL   0C7
0112:  MOVF   23,W
0113:  BSF    03.6
0114:  MOVWF  0D
0115:  BCF    03.6
0116:  MOVF   24,W
0117:  BSF    03.6
0118:  MOVWF  0F
0119:  BCF    03.6
011A:  MOVF   0B,W
011B:  MOVWF  25
011C:  BCF    0B.7
011D:  BSF    03.5
011E:  BSF    03.6
011F:  BSF    0C.7
0120:  BSF    0C.0
0121:  NOP
0122:  NOP
0123:  BCF    03.5
0124:  BCF    03.6
0125:  BTFSC  25.7
0126:  BSF    0B.7
0127:  BSF    03.6
0128:  RLF    0C,W
0129:  RLF    0E,W
012A:  ANDLW  7F
012B:  BTFSC  03.2
012C:  GOTO   147
012D:  BCF    03.6
012E:  MOVWF  22
012F:  BSF    03.6
0130:  MOVF   0D,W
0131:  BCF    03.6
0132:  MOVWF  23
0133:  BSF    03.6
0134:  MOVF   0F,W
0135:  BCF    03.6
0136:  MOVWF  24
0137:  MOVF   22,W
0138:  MOVWF  30
0139:  CALL   0C7
013A:  MOVF   23,W
013B:  BSF    03.6
013C:  MOVWF  0D
013D:  BCF    03.6
013E:  MOVF   24,W
013F:  BSF    03.6
0140:  MOVWF  0F
0141:  INCF   0D,F
0142:  BTFSC  03.2
0143:  INCF   0F,F
0144:  BCF    03.6
0145:  GOTO   0F3
0146:  BSF    03.6
0147:  BCF    03.6
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   3A5 (RETURN)
014B:  MOVLW  8E
014C:  MOVWF  77
014D:  MOVF   2A,W
014E:  MOVWF  78
014F:  MOVF   29,W
0150:  MOVWF  79
0151:  CLRF   7A
0152:  MOVF   78,F
0153:  BTFSS  03.2
0154:  GOTO   15F
0155:  MOVF   79,W
0156:  MOVWF  78
0157:  CLRF   79
0158:  MOVLW  08
0159:  SUBWF  77,F
015A:  MOVF   78,F
015B:  BTFSS  03.2
015C:  GOTO   15F
015D:  CLRF   77
015E:  GOTO   167
015F:  BCF    03.0
0160:  BTFSC  78.7
0161:  GOTO   166
0162:  RLF    79,F
0163:  RLF    78,F
0164:  DECF   77,F
0165:  GOTO   15F
0166:  BCF    78.7
0167:  RETURN
0168:  MOVF   29,W
0169:  BTFSC  03.2
016A:  GOTO   22D
016B:  MOVWF  35
016C:  MOVF   2D,W
016D:  BTFSC  03.2
016E:  GOTO   22D
016F:  SUBWF  35,F
0170:  BTFSS  03.0
0171:  GOTO   177
0172:  MOVLW  7F
0173:  ADDWF  35,F
0174:  BTFSC  03.0
0175:  GOTO   22D
0176:  GOTO   17D
0177:  MOVLW  81
0178:  SUBWF  35,F
0179:  BTFSS  03.0
017A:  GOTO   22D
017B:  BTFSC  03.2
017C:  GOTO   22D
017D:  MOVF   35,W
017E:  MOVWF  77
017F:  CLRF   78
0180:  CLRF   79
0181:  CLRF   7A
0182:  CLRF   34
0183:  MOVF   2A,W
0184:  MOVWF  33
0185:  BSF    33.7
0186:  MOVF   2B,W
0187:  MOVWF  32
0188:  MOVF   2C,W
0189:  MOVWF  31
018A:  MOVLW  19
018B:  MOVWF  35
018C:  MOVF   30,W
018D:  SUBWF  31,F
018E:  BTFSC  03.0
018F:  GOTO   1A0
0190:  MOVLW  01
0191:  SUBWF  32,F
0192:  BTFSC  03.0
0193:  GOTO   1A0
0194:  SUBWF  33,F
0195:  BTFSC  03.0
0196:  GOTO   1A0
0197:  SUBWF  34,F
0198:  BTFSC  03.0
0199:  GOTO   1A0
019A:  INCF   34,F
019B:  INCF   33,F
019C:  INCF   32,F
019D:  MOVF   30,W
019E:  ADDWF  31,F
019F:  GOTO   1D2
01A0:  MOVF   2F,W
01A1:  SUBWF  32,F
01A2:  BTFSC  03.0
01A3:  GOTO   1BB
01A4:  MOVLW  01
01A5:  SUBWF  33,F
01A6:  BTFSC  03.0
01A7:  GOTO   1BB
01A8:  SUBWF  34,F
01A9:  BTFSC  03.0
01AA:  GOTO   1BB
01AB:  INCF   34,F
01AC:  INCF   33,F
01AD:  MOVF   2F,W
01AE:  ADDWF  32,F
01AF:  MOVF   30,W
01B0:  ADDWF  31,F
01B1:  BTFSS  03.0
01B2:  GOTO   1D2
01B3:  INCF   32,F
01B4:  BTFSS  03.2
01B5:  GOTO   1D2
01B6:  INCF   33,F
01B7:  BTFSS  03.2
01B8:  GOTO   1D2
01B9:  INCF   34,F
01BA:  GOTO   1D2
01BB:  MOVF   2E,W
01BC:  IORLW  80
01BD:  SUBWF  33,F
01BE:  BTFSC  03.0
01BF:  GOTO   1D1
01C0:  MOVLW  01
01C1:  SUBWF  34,F
01C2:  BTFSC  03.0
01C3:  GOTO   1D1
01C4:  INCF   34,F
01C5:  MOVF   2E,W
01C6:  IORLW  80
01C7:  ADDWF  33,F
01C8:  MOVF   2F,W
01C9:  ADDWF  32,F
01CA:  BTFSS  03.0
01CB:  GOTO   1AF
01CC:  INCF   33,F
01CD:  BTFSS  03.2
01CE:  GOTO   1AF
01CF:  INCF   34,F
01D0:  GOTO   1AF
01D1:  BSF    7A.0
01D2:  DECFSZ 35,F
01D3:  GOTO   1D5
01D4:  GOTO   1E0
01D5:  BCF    03.0
01D6:  RLF    31,F
01D7:  RLF    32,F
01D8:  RLF    33,F
01D9:  RLF    34,F
01DA:  BCF    03.0
01DB:  RLF    7A,F
01DC:  RLF    79,F
01DD:  RLF    78,F
01DE:  RLF    36,F
01DF:  GOTO   18C
01E0:  BTFSS  36.0
01E1:  GOTO   1E8
01E2:  BCF    03.0
01E3:  RRF    78,F
01E4:  RRF    79,F
01E5:  RRF    7A,F
01E6:  RRF    36,F
01E7:  GOTO   1EB
01E8:  DECF   77,F
01E9:  BTFSC  03.2
01EA:  GOTO   22D
01EB:  BTFSC  36.7
01EC:  GOTO   214
01ED:  BCF    03.0
01EE:  RLF    31,F
01EF:  RLF    32,F
01F0:  RLF    33,F
01F1:  RLF    34,F
01F2:  MOVF   30,W
01F3:  SUBWF  31,F
01F4:  BTFSC  03.0
01F5:  GOTO   200
01F6:  MOVLW  01
01F7:  SUBWF  32,F
01F8:  BTFSC  03.0
01F9:  GOTO   200
01FA:  SUBWF  33,F
01FB:  BTFSC  03.0
01FC:  GOTO   200
01FD:  SUBWF  34,F
01FE:  BTFSS  03.0
01FF:  GOTO   223
0200:  MOVF   2F,W
0201:  SUBWF  32,F
0202:  BTFSC  03.0
0203:  GOTO   20B
0204:  MOVLW  01
0205:  SUBWF  33,F
0206:  BTFSC  03.0
0207:  GOTO   20B
0208:  SUBWF  34,F
0209:  BTFSS  03.0
020A:  GOTO   223
020B:  MOVF   2E,W
020C:  IORLW  80
020D:  SUBWF  33,F
020E:  BTFSC  03.0
020F:  GOTO   214
0210:  MOVLW  01
0211:  SUBWF  34,F
0212:  BTFSS  03.0
0213:  GOTO   223
0214:  INCF   7A,F
0215:  BTFSS  03.2
0216:  GOTO   223
0217:  INCF   79,F
0218:  BTFSS  03.2
0219:  GOTO   223
021A:  INCF   78,F
021B:  BTFSS  03.2
021C:  GOTO   223
021D:  INCF   77,F
021E:  BTFSC  03.2
021F:  GOTO   22D
0220:  RRF    78,F
0221:  RRF    79,F
0222:  RRF    7A,F
0223:  MOVF   2A,W
0224:  MOVWF  35
0225:  MOVF   2E,W
0226:  XORWF  35,F
0227:  BTFSS  35.7
0228:  GOTO   22B
0229:  BSF    78.7
022A:  GOTO   231
022B:  BCF    78.7
022C:  GOTO   231
022D:  CLRF   77
022E:  CLRF   78
022F:  CLRF   79
0230:  CLRF   7A
0231:  RETURN
0232:  MOVLW  8E
0233:  MOVWF  77
0234:  MOVF   27,W
0235:  SUBWF  77,F
0236:  MOVF   28,W
0237:  MOVWF  79
0238:  MOVF   29,W
0239:  MOVWF  78
023A:  BSF    79.7
023B:  MOVF   77,F
023C:  BTFSC  03.2
023D:  GOTO   249
023E:  BCF    03.0
023F:  MOVF   79,F
0240:  BTFSS  03.2
0241:  GOTO   245
0242:  MOVF   78,F
0243:  BTFSC  03.2
0244:  GOTO   249
0245:  RRF    79,F
0246:  RRF    78,F
0247:  DECFSZ 77,F
0248:  GOTO   23E
0249:  BTFSS  28.7
024A:  GOTO   250
024B:  COMF   78,F
024C:  COMF   79,F
024D:  INCF   78,F
024E:  BTFSC  03.2
024F:  INCF   79,F
0250:  RETURN
0251:  CLRF   2F
0252:  MOVF   04,W
0253:  MOVWF  2E
0254:  BCF    2F.0
0255:  BTFSC  03.7
0256:  BSF    2F.0
0257:  SWAPF  28,W
0258:  IORLW  F0
0259:  MOVWF  2A
025A:  ADDWF  2A,F
025B:  ADDLW  E2
025C:  MOVWF  2B
025D:  ADDLW  32
025E:  MOVWF  2D
025F:  MOVF   28,W
0260:  ANDLW  0F
0261:  ADDWF  2B,F
0262:  ADDWF  2B,F
0263:  ADDWF  2D,F
0264:  ADDLW  E9
0265:  MOVWF  2C
0266:  ADDWF  2C,F
0267:  ADDWF  2C,F
0268:  SWAPF  27,W
0269:  ANDLW  0F
026A:  ADDWF  2C,F
026B:  ADDWF  2D,F
026C:  RLF    2C,F
026D:  RLF    2D,F
026E:  COMF   2D,F
026F:  RLF    2D,F
0270:  MOVF   27,W
0271:  ANDLW  0F
0272:  ADDWF  2D,F
0273:  RLF    2A,F
0274:  MOVLW  07
0275:  MOVWF  29
0276:  MOVLW  0A
0277:  ADDWF  2D,F
0278:  DECF   2C,F
0279:  BTFSS  03.0
027A:  GOTO   277
027B:  ADDWF  2C,F
027C:  DECF   2B,F
027D:  BTFSS  03.0
027E:  GOTO   27B
027F:  ADDWF  2B,F
0280:  DECF   2A,F
0281:  BTFSS  03.0
0282:  GOTO   27F
0283:  ADDWF  2A,F
0284:  DECF   29,F
0285:  BTFSS  03.0
0286:  GOTO   283
0287:  MOVLW  29
0288:  MOVWF  04
0289:  BCF    03.7
028A:  MOVLW  07
028B:  ANDWF  2E,W
028C:  BCF    2E.6
028D:  ADDWF  04,F
028E:  MOVLW  2D
028F:  SUBWF  04,W
0290:  BTFSC  03.2
0291:  BSF    2E.6
0292:  MOVF   00,W
0293:  MOVWF  77
0294:  BTFSS  03.2
0295:  GOTO   29E
0296:  BTFSC  2E.6
0297:  GOTO   29E
0298:  BTFSC  2E.4
0299:  GOTO   2B0
029A:  BTFSC  2E.3
029B:  GOTO   29E
029C:  MOVLW  20
029D:  GOTO   2A1
029E:  BSF    2E.3
029F:  BCF    2E.4
02A0:  MOVLW  30
02A1:  ADDWF  77,F
02A2:  CLRF   28
02A3:  MOVF   04,W
02A4:  MOVWF  27
02A5:  BCF    28.0
02A6:  BTFSC  03.7
02A7:  BSF    28.0
02A8:  MOVF   77,W
02A9:  MOVWF  30
02AA:  CALL   0C7
02AB:  MOVF   27,W
02AC:  MOVWF  04
02AD:  BCF    03.7
02AE:  BTFSC  28.0
02AF:  BSF    03.7
02B0:  INCF   04,F
02B1:  BTFSS  2E.6
02B2:  GOTO   28E
02B3:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
000A:  MOVLW  31
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01D
0010:  MOVLW  06
0011:  MOVWF  78
0012:  CLRF   77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 78,F
0016:  GOTO   012
0017:  MOVLW  7B
0018:  MOVWF  77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 00,F
001C:  GOTO   010
001D:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003B:  MOVLW  0F
003C:  BSF    03.5
003D:  ANDWF  08,W
003E:  IORLW  F0
003F:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0040:  BCF    03.5
0041:  BSF    08.2
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    08.0
....................    delay_cycles(1); 
0044:  NOP
....................    high = lcd_read_nibble(); 
0045:  CALL   02F
0046:  MOVF   78,W
0047:  MOVWF  38
....................        
....................    lcd_output_enable(0); 
0048:  BCF    08.0
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    08.0
....................    delay_us(1); 
004B:  GOTO   04C
004C:  GOTO   04D
004D:  NOP
....................    low = lcd_read_nibble(); 
004E:  CALL   02F
004F:  MOVF   78,W
0050:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
0051:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0052:  MOVLW  0F
0053:  BSF    03.5
0054:  ANDWF  08,W
0055:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0056:  BCF    03.5
0057:  SWAPF  38,W
0058:  MOVWF  77
0059:  MOVLW  F0
005A:  ANDWF  77,F
005B:  MOVF   77,W
005C:  IORWF  37,W
005D:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002F:  MOVF   08,W
0030:  MOVWF  77
0031:  SWAPF  08,W
0032:  ANDLW  0F
0033:  MOVWF  78
....................   #endif 
0034:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
001E:  SWAPF  38,W
001F:  ANDLW  F0
0020:  MOVWF  77
0021:  MOVLW  0F
0022:  ANDWF  08,W
0023:  IORWF  77,W
0024:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0025:  NOP
....................    lcd_output_enable(1); 
0026:  BSF    08.0
....................    delay_us(2); 
0027:  MOVLW  02
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  GOTO   02C
002C:  NOP
....................    lcd_output_enable(0); 
002D:  BCF    08.0
002E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0035:  BSF    03.5
0036:  BCF    08.0
....................    lcd_rs_tris(); 
0037:  BCF    08.1
....................    lcd_rw_tris(); 
0038:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0039:  BCF    03.5
003A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005E:  MOVF   78,W
005F:  MOVWF  37
0060:  BTFSC  37.7
0061:  GOTO   03B
....................    lcd_output_rs(address); 
0062:  BTFSS  35.0
0063:  BCF    08.1
0064:  BTFSC  35.0
0065:  BSF    08.1
....................    delay_cycles(1); 
0066:  NOP
....................    lcd_output_rw(0); 
0067:  BCF    08.2
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(0); 
0069:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006A:  SWAPF  36,W
006B:  MOVWF  37
006C:  MOVLW  0F
006D:  ANDWF  37,F
006E:  MOVF   37,W
006F:  MOVWF  38
0070:  CALL   01E
....................    lcd_send_nibble(n & 0xf); 
0071:  MOVF   36,W
0072:  ANDLW  0F
0073:  MOVWF  37
0074:  MOVWF  38
0075:  CALL   01E
0076:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0077:  MOVLW  28
0078:  MOVWF  23
0079:  MOVLW  0C
007A:  MOVWF  24
007B:  MOVLW  01
007C:  MOVWF  25
007D:  MOVLW  06
007E:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007F:  BCF    08.0
....................    lcd_output_rs(0); 
0080:  BCF    08.1
....................    lcd_output_rw(0); 
0081:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0082:  MOVLW  0F
0083:  BSF    03.5
0084:  ANDWF  08,W
0085:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0086:  BCF    08.0
....................    lcd_rs_tris(); 
0087:  BCF    08.1
....................    lcd_rw_tris(); 
0088:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0089:  MOVLW  0F
008A:  BCF    03.5
008B:  MOVWF  31
008C:  CALL   00A
....................    for(i=1;i<=3;++i) 
008D:  MOVLW  01
008E:  MOVWF  22
008F:  MOVF   22,W
0090:  SUBLW  03
0091:  BTFSS  03.0
0092:  GOTO   09B
....................    { 
....................        lcd_send_nibble(3); 
0093:  MOVLW  03
0094:  MOVWF  38
0095:  CALL   01E
....................        delay_ms(5); 
0096:  MOVLW  05
0097:  MOVWF  31
0098:  CALL   00A
0099:  INCF   22,F
009A:  GOTO   08F
....................    } 
....................     
....................    lcd_send_nibble(2); 
009B:  MOVLW  02
009C:  MOVWF  38
009D:  CALL   01E
....................    delay_ms(5); 
009E:  MOVLW  05
009F:  MOVWF  31
00A0:  CALL   00A
....................    for(i=0;i<=3;++i) 
00A1:  CLRF   22
00A2:  MOVF   22,W
00A3:  SUBLW  03
00A4:  BTFSS  03.0
00A5:  GOTO   0B2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A6:  MOVLW  23
00A7:  ADDWF  22,W
00A8:  MOVWF  04
00A9:  BCF    03.7
00AA:  MOVF   00,W
00AB:  MOVWF  27
00AC:  CLRF   35
00AD:  MOVF   27,W
00AE:  MOVWF  36
00AF:  CALL   035
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B0:  INCF   22,F
00B1:  GOTO   0A2
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   379 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B5:  DECFSZ 32,W
00B6:  GOTO   0B8
00B7:  GOTO   0BB
....................       address=LCD_LINE_TWO; 
00B8:  MOVLW  40
00B9:  MOVWF  33
00BA:  GOTO   0BC
....................    else 
....................       address=0; 
00BB:  CLRF   33
....................       
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  31,W
00BE:  ADDWF  33,F
....................    lcd_send_byte(0,0x80|address); 
00BF:  MOVF   33,W
00C0:  IORLW  80
00C1:  MOVWF  34
00C2:  CLRF   35
00C3:  MOVF   34,W
00C4:  MOVWF  36
00C5:  CALL   035
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C7:  MOVF   30,W
00C8:  XORLW  07
00C9:  BTFSC  03.2
00CA:  GOTO   0D5
00CB:  XORLW  0B
00CC:  BTFSC  03.2
00CD:  GOTO   0DA
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E2
00D1:  XORLW  02
00D2:  BTFSC  03.2
00D3:  GOTO   0E8
00D4:  GOTO   0ED
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D5:  MOVLW  01
00D6:  MOVWF  31
00D7:  MOVWF  32
00D8:  CALL   0B5
00D9:  GOTO   0F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DA:  CLRF   35
00DB:  MOVLW  01
00DC:  MOVWF  36
00DD:  CALL   035
....................                      delay_ms(2); 
00DE:  MOVLW  02
00DF:  MOVWF  31
00E0:  CALL   00A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E1:  GOTO   0F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E2:  MOVLW  01
00E3:  MOVWF  31
00E4:  MOVLW  02
00E5:  MOVWF  32
00E6:  CALL   0B5
00E7:  GOTO   0F2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E8:  CLRF   35
00E9:  MOVLW  10
00EA:  MOVWF  36
00EB:  CALL   035
00EC:  GOTO   0F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  35
00EF:  MOVF   30,W
00F0:  MOVWF  36
00F1:  CALL   035
....................      #endif 
....................    } 
00F2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define _BUTTON1 PIN_E0 
.................... int mode = 0; 
.................... const unsigned char led[2] = {0b01000000, 0b01111001}; 
.................... //xem lai device adc = 16 thu xem 
....................  
.................... void fun(int mode) 
.................... { 
....................    if (mode == 0) 
*
02B4:  MOVF   22,F
02B5:  BTFSS  03.2
02B6:  GOTO   30A
....................    { 
....................       output_c(led[0]); 
02B7:  MOVLW  00
02B8:  MOVWF  21
02B9:  BSF    03.5
02BA:  CLRF   07
02BB:  MOVLW  40
02BC:  BCF    03.5
02BD:  MOVWF  07
....................       set_adc_channel(0);   //only 1 channel is selected at a time; 
02BE:  MOVLW  00
02BF:  MOVWF  78
02C0:  MOVF   1F,W
02C1:  ANDLW  C3
02C2:  IORWF  78,W
02C3:  MOVWF  1F
....................       delay_ms(10); 
02C4:  MOVLW  0A
02C5:  MOVWF  31
02C6:  CALL   00A
....................       int16 temp = read_adc() / 2.046; 
02C7:  BSF    1F.1
02C8:  BTFSC  1F.1
02C9:  GOTO   2C8
02CA:  MOVF   1E,W
02CB:  MOVWF  7A
02CC:  BSF    03.5
02CD:  MOVF   1E,W
02CE:  BCF    03.5
02CF:  MOVWF  27
02D0:  MOVF   1E,W
02D1:  MOVWF  28
02D2:  MOVWF  2A
02D3:  MOVF   27,W
02D4:  MOVWF  29
02D5:  CALL   14B
02D6:  MOVF   7A,W
02D7:  MOVWF  2C
02D8:  MOVF   79,W
02D9:  MOVWF  2B
02DA:  MOVF   78,W
02DB:  MOVWF  2A
02DC:  MOVF   77,W
02DD:  MOVWF  29
02DE:  MOVLW  AA
02DF:  MOVWF  30
02E0:  MOVLW  F1
02E1:  MOVWF  2F
02E2:  MOVLW  02
02E3:  MOVWF  2E
02E4:  MOVLW  80
02E5:  MOVWF  2D
02E6:  CALL   168
02E7:  MOVF   7A,W
02E8:  MOVWF  2A
02E9:  MOVF   79,W
02EA:  MOVWF  29
02EB:  MOVF   78,W
02EC:  MOVWF  28
02ED:  MOVF   77,W
02EE:  MOVWF  27
02EF:  CALL   232
02F0:  MOVF   79,W
02F1:  MOVWF  24
02F2:  MOVF   78,W
02F3:  MOVWF  23
....................       lcd_gotoxy(8,2); 
02F4:  MOVLW  08
02F5:  MOVWF  31
02F6:  MOVLW  02
02F7:  MOVWF  32
02F8:  CALL   0B5
....................       printf(lcd_putc,"%02lu  C", temp);   // int16 -> %lu 
02F9:  MOVLW  0B
02FA:  MOVWF  04
02FB:  MOVF   24,W
02FC:  MOVWF  28
02FD:  MOVF   23,W
02FE:  MOVWF  27
02FF:  CALL   251
0300:  MOVLW  20
0301:  MOVWF  30
0302:  CALL   0C7
0303:  MOVLW  20
0304:  MOVWF  30
0305:  CALL   0C7
0306:  MOVLW  43
0307:  MOVWF  30
0308:  CALL   0C7
....................    } 
0309:  GOTO   35E
....................    else if(mode == 1) 
030A:  DECFSZ 22,W
030B:  GOTO   35E
....................    { 
....................       output_c(led[1]); 
030C:  MOVLW  00
030D:  MOVWF  21
030E:  BSF    03.5
030F:  CLRF   07
0310:  MOVLW  79
0311:  BCF    03.5
0312:  MOVWF  07
....................       set_adc_channel(1);   //only 1 channel is selected at a time; 
0313:  MOVLW  04
0314:  MOVWF  78
0315:  MOVF   1F,W
0316:  ANDLW  C3
0317:  IORWF  78,W
0318:  MOVWF  1F
....................       delay_ms(10); 
0319:  MOVLW  0A
031A:  MOVWF  31
031B:  CALL   00A
....................       int16 temp = read_adc() / 2.046; 
031C:  BSF    1F.1
031D:  BTFSC  1F.1
031E:  GOTO   31D
031F:  MOVF   1E,W
0320:  MOVWF  7A
0321:  BSF    03.5
0322:  MOVF   1E,W
0323:  BCF    03.5
0324:  MOVWF  27
0325:  MOVF   1E,W
0326:  MOVWF  28
0327:  MOVWF  2A
0328:  MOVF   27,W
0329:  MOVWF  29
032A:  CALL   14B
032B:  MOVF   7A,W
032C:  MOVWF  2C
032D:  MOVF   79,W
032E:  MOVWF  2B
032F:  MOVF   78,W
0330:  MOVWF  2A
0331:  MOVF   77,W
0332:  MOVWF  29
0333:  MOVLW  AA
0334:  MOVWF  30
0335:  MOVLW  F1
0336:  MOVWF  2F
0337:  MOVLW  02
0338:  MOVWF  2E
0339:  MOVLW  80
033A:  MOVWF  2D
033B:  CALL   168
033C:  MOVF   7A,W
033D:  MOVWF  2A
033E:  MOVF   79,W
033F:  MOVWF  29
0340:  MOVF   78,W
0341:  MOVWF  28
0342:  MOVF   77,W
0343:  MOVWF  27
0344:  CALL   232
0345:  MOVF   79,W
0346:  MOVWF  26
0347:  MOVF   78,W
0348:  MOVWF  25
....................       lcd_gotoxy(8,2); 
0349:  MOVLW  08
034A:  MOVWF  31
034B:  MOVLW  02
034C:  MOVWF  32
034D:  CALL   0B5
....................       printf(lcd_putc,"%02lu  C", temp);   // int16 -> %lu 
034E:  MOVLW  0B
034F:  MOVWF  04
0350:  MOVF   26,W
0351:  MOVWF  28
0352:  MOVF   25,W
0353:  MOVWF  27
0354:  CALL   251
0355:  MOVLW  20
0356:  MOVWF  30
0357:  CALL   0C7
0358:  MOVLW  20
0359:  MOVWF  30
035A:  CALL   0C7
035B:  MOVLW  43
035C:  MOVWF  30
035D:  CALL   0C7
....................    } 
035E:  BCF    0A.3
035F:  BCF    0A.4
0360:  GOTO   3AE (RETURN)
.................... } 
....................  
.................... void main() 
0361:  MOVF   03,W
0362:  ANDLW  1F
0363:  MOVWF  03
0364:  CLRF   20
0365:  MOVLW  FF
0366:  MOVWF  21
0367:  BSF    03.5
0368:  BSF    03.6
0369:  MOVF   09,W
036A:  ANDLW  C0
036B:  MOVWF  09
036C:  BCF    03.6
036D:  BCF    1F.4
036E:  BCF    1F.5
036F:  MOVLW  00
0370:  BSF    03.6
0371:  MOVWF  08
0372:  BCF    03.5
0373:  CLRF   07
0374:  CLRF   08
0375:  CLRF   09
0376:  BCF    03.7
.................... { 
....................    lcd_init(); 
0377:  BCF    03.6
0378:  GOTO   077
....................    set_tris_a(1); //configures port A as input 
0379:  MOVLW  01
037A:  BSF    03.5
037B:  MOVWF  05
....................    set_tris_c(0); 
037C:  MOVLW  00
037D:  MOVWF  07
037E:  BCF    03.5
037F:  MOVWF  21
....................    set_tris_d(0); 
0380:  BSF    03.5
0381:  MOVWF  08
....................    setup_adc(ADC_CLOCK_DIV_2); 
0382:  BCF    03.5
0383:  BCF    1F.6
0384:  BCF    1F.7
0385:  BSF    03.5
0386:  BSF    1F.7
0387:  BCF    03.5
0388:  BSF    1F.0
....................    setup_adc_ports(sAN0|sAN1|VSS_VDD);  //Choose 1 port(ANxx) and Ref+, Ref- for ADC 
0389:  BSF    03.5
038A:  BSF    03.6
038B:  MOVF   09,W
038C:  ANDLW  C0
038D:  MOVWF  09
038E:  BCF    03.6
038F:  BCF    1F.4
0390:  BCF    1F.5
0391:  MOVLW  03
0392:  BSF    03.6
0393:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................       delay_ms(10); 
0394:  MOVLW  0A
0395:  BCF    03.5
0396:  BCF    03.6
0397:  MOVWF  31
0398:  CALL   00A
....................       lcd_gotoxy(5,1); 
0399:  MOVLW  05
039A:  MOVWF  31
039B:  MOVLW  01
039C:  MOVWF  32
039D:  CALL   0B5
....................       lcd_putc("DO NHIET DO"); 
039E:  MOVLW  04
039F:  BSF    03.6
03A0:  MOVWF  0D
03A1:  MOVLW  00
03A2:  MOVWF  0F
03A3:  BCF    03.6
03A4:  GOTO   0F3
....................       set_adc_channel(0);   //only 1 channel is selected at a time; 
03A5:  MOVLW  00
03A6:  MOVWF  78
03A7:  MOVF   1F,W
03A8:  ANDLW  C3
03A9:  IORWF  78,W
03AA:  MOVWF  1F
....................        
....................       fun(mode); 
03AB:  MOVF   20,W
03AC:  MOVWF  22
03AD:  GOTO   2B4
....................        
....................       if(input(_BUTTON1) == 0) 
03AE:  BSF    03.5
03AF:  BSF    09.0
03B0:  BCF    03.5
03B1:  BTFSC  09.0
03B2:  GOTO   3C7
....................       { 
....................          delay_ms(20); 
03B3:  MOVLW  14
03B4:  MOVWF  31
03B5:  CALL   00A
....................          if(input(_BUTTON1) == 0) 
03B6:  BSF    03.5
03B7:  BSF    09.0
03B8:  BCF    03.5
03B9:  BTFSC  09.0
03BA:  GOTO   3C7
....................          { 
....................             if(mode == 0) 
03BB:  MOVF   20,F
03BC:  BTFSS  03.2
03BD:  GOTO   3C1
....................             mode = 1; 
03BE:  MOVLW  01
03BF:  MOVWF  20
03C0:  GOTO   3C2
....................             else 
....................             mode = 0; 
03C1:  CLRF   20
....................             while(input(_BUTTON1) == 0); 
03C2:  BSF    03.5
03C3:  BSF    09.0
03C4:  BCF    03.5
03C5:  BTFSS  09.0
03C6:  GOTO   3C2
....................          } 
....................       } 
....................        
....................       lcd_gotoxy(11, 2); 
03C7:  MOVLW  0B
03C8:  MOVWF  31
03C9:  MOVLW  02
03CA:  MOVWF  32
03CB:  CALL   0B5
....................       lcd_putc(0xDF);   //Add character '*' into row = 2; col = 11 
03CC:  MOVLW  DF
03CD:  MOVWF  30
03CE:  CALL   0C7
03CF:  BSF    03.5
03D0:  BSF    03.6
03D1:  GOTO   394
....................    } 
....................  
.................... } 
03D2:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
