CCS PCM C Compiler, Version 5.015, 5967               09-Thg3-22 17:40

               Filename:   C:\PIC16F887\CCS\TIMER_P3\main.lst

               ROM used:   712 words (9%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           21 (6%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   294
0003:  NOP
.................... // https://youtu.be/7sO1NF9gkic (de bai) 
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 20,22
0005:  DATA 41,10
0006:  DATA C4,2A
0007:  DATA A0,29
0008:  DATA 4F,10
0009:  DATA CC,2A
000A:  DATA 4F,27
000B:  DATA 47,00
000C:  DATA C4,22
000D:  DATA 20,27
000E:  DATA 47,24
000F:  DATA 49,10
0010:  DATA C4,27
0011:  DATA CE,23
0012:  DATA A0,23
0013:  DATA CF,24
0014:  DATA 00,00
0015:  DATA D3,27
0016:  DATA A0,29
0017:  DATA 41,27
0018:  DATA 20,28
0019:  DATA C8,20
001A:  DATA 4D,1D
001B:  DATA A0,12
001C:  DATA 30,19
001D:  DATA 75,00
001E:  DATA D3,27
001F:  DATA A0,29
0020:  DATA 41,27
0021:  DATA 20,28
0022:  DATA C8,20
0023:  DATA 4D,1D
0024:  DATA A0,12
0025:  DATA 30,19
0026:  DATA 75,00
0027:  DATA C7,24
0028:  DATA 41,10
0029:  DATA 54,29
002A:  DATA 49,10
002B:  DATA C4,20
002C:  DATA 54,1D
002D:  DATA A0,12
002E:  DATA B2,3A
002F:  DATA 00,00
*
0119:  MOVF   0B,W
011A:  MOVWF  23
011B:  BCF    0B.7
011C:  BSF    03.5
011D:  BSF    03.6
011E:  BSF    0C.7
011F:  BSF    0C.0
0120:  NOP
0121:  NOP
0122:  BCF    03.5
0123:  BCF    03.6
0124:  BTFSC  23.7
0125:  BSF    0B.7
0126:  BTFSC  03.0
0127:  GOTO   150
0128:  BSF    03.6
0129:  MOVF   0C,W
012A:  ANDLW  7F
012B:  BCF    03.6
012C:  MOVWF  23
012D:  BSF    03.6
012E:  MOVF   0D,W
012F:  BCF    03.6
0130:  MOVWF  24
0131:  BSF    03.6
0132:  MOVF   0F,W
0133:  BCF    03.6
0134:  MOVWF  25
0135:  MOVF   23,W
0136:  MOVWF  26
0137:  CALL   0ED
0138:  MOVF   24,W
0139:  BSF    03.6
013A:  MOVWF  0D
013B:  BCF    03.6
013C:  MOVF   25,W
013D:  BSF    03.6
013E:  MOVWF  0F
013F:  BCF    03.6
0140:  MOVF   0B,W
0141:  MOVWF  26
0142:  BCF    0B.7
0143:  BSF    03.5
0144:  BSF    03.6
0145:  BSF    0C.7
0146:  BSF    0C.0
0147:  NOP
0148:  NOP
0149:  BCF    03.5
014A:  BCF    03.6
014B:  BTFSC  26.7
014C:  BSF    0B.7
014D:  DECFSZ 22,F
014E:  GOTO   150
014F:  GOTO   16F
0150:  BSF    03.6
0151:  RLF    0C,W
0152:  RLF    0E,W
0153:  ANDLW  7F
0154:  BCF    03.6
0155:  MOVWF  23
0156:  BSF    03.6
0157:  MOVF   0D,W
0158:  BCF    03.6
0159:  MOVWF  24
015A:  BSF    03.6
015B:  MOVF   0F,W
015C:  BCF    03.6
015D:  MOVWF  25
015E:  MOVF   23,W
015F:  MOVWF  26
0160:  CALL   0ED
0161:  MOVF   24,W
0162:  BSF    03.6
0163:  MOVWF  0D
0164:  BCF    03.6
0165:  MOVF   25,W
0166:  BSF    03.6
0167:  MOVWF  0F
0168:  INCF   0D,F
0169:  BTFSC  03.2
016A:  INCF   0F,F
016B:  BCF    03.0
016C:  BCF    03.6
016D:  DECFSZ 22,F
016E:  GOTO   119
016F:  RETURN
0170:  MOVF   25,W
0171:  CLRF   78
0172:  SUBWF  24,W
0173:  BTFSC  03.0
0174:  GOTO   178
0175:  MOVF   24,W
0176:  MOVWF  77
0177:  GOTO   184
0178:  CLRF   77
0179:  MOVLW  08
017A:  MOVWF  26
017B:  RLF    24,F
017C:  RLF    77,F
017D:  MOVF   25,W
017E:  SUBWF  77,W
017F:  BTFSC  03.0
0180:  MOVWF  77
0181:  RLF    78,F
0182:  DECFSZ 26,F
0183:  GOTO   17B
0184:  RETURN
0185:  MOVF   78,W
0186:  MOVF   22,W
0187:  MOVWF  24
0188:  MOVLW  64
0189:  MOVWF  25
018A:  CALL   170
018B:  MOVF   77,W
018C:  MOVWF  22
018D:  MOVF   78,W
018E:  MOVLW  30
018F:  BTFSS  03.2
0190:  GOTO   198
0191:  BTFSS  23.1
0192:  GOTO   19F
0193:  BTFSC  23.3
0194:  GOTO   19F
0195:  BTFSC  23.4
0196:  MOVLW  20
0197:  GOTO   19B
0198:  BCF    23.3
0199:  BCF    23.4
019A:  BSF    23.0
019B:  ADDWF  78,F
019C:  MOVF   78,W
019D:  MOVWF  26
019E:  CALL   0ED
019F:  MOVF   22,W
01A0:  MOVWF  24
01A1:  MOVLW  0A
01A2:  MOVWF  25
01A3:  CALL   170
01A4:  MOVF   77,W
01A5:  MOVWF  22
01A6:  MOVF   78,W
01A7:  MOVLW  30
01A8:  BTFSS  03.2
01A9:  GOTO   1B0
01AA:  BTFSC  23.3
01AB:  GOTO   1B4
01AC:  BTFSS  23.0
01AD:  GOTO   1B4
01AE:  BTFSC  23.4
01AF:  MOVLW  20
01B0:  ADDWF  78,F
01B1:  MOVF   78,W
01B2:  MOVWF  26
01B3:  CALL   0ED
01B4:  MOVLW  30
01B5:  ADDWF  22,F
01B6:  MOVF   22,W
01B7:  MOVWF  26
01B8:  CALL   0ED
01B9:  RETURN
01BA:  MOVF   0B,W
01BB:  MOVWF  23
01BC:  BCF    0B.7
01BD:  BSF    03.5
01BE:  BSF    03.6
01BF:  BSF    0C.7
01C0:  BSF    0C.0
01C1:  NOP
01C2:  NOP
01C3:  BCF    03.5
01C4:  BCF    03.6
01C5:  BTFSC  23.7
01C6:  BSF    0B.7
01C7:  BSF    03.6
01C8:  MOVF   0C,W
01C9:  ANDLW  7F
01CA:  BTFSC  03.2
01CB:  GOTO   20E
01CC:  BCF    03.6
01CD:  MOVWF  23
01CE:  BSF    03.6
01CF:  MOVF   0D,W
01D0:  BCF    03.6
01D1:  MOVWF  24
01D2:  BSF    03.6
01D3:  MOVF   0F,W
01D4:  BCF    03.6
01D5:  MOVWF  25
01D6:  MOVF   23,W
01D7:  MOVWF  26
01D8:  CALL   0ED
01D9:  MOVF   24,W
01DA:  BSF    03.6
01DB:  MOVWF  0D
01DC:  BCF    03.6
01DD:  MOVF   25,W
01DE:  BSF    03.6
01DF:  MOVWF  0F
01E0:  BCF    03.6
01E1:  MOVF   0B,W
01E2:  MOVWF  26
01E3:  BCF    0B.7
01E4:  BSF    03.5
01E5:  BSF    03.6
01E6:  BSF    0C.7
01E7:  BSF    0C.0
01E8:  NOP
01E9:  NOP
01EA:  BCF    03.5
01EB:  BCF    03.6
01EC:  BTFSC  26.7
01ED:  BSF    0B.7
01EE:  BSF    03.6
01EF:  RLF    0C,W
01F0:  RLF    0E,W
01F1:  ANDLW  7F
01F2:  BTFSC  03.2
01F3:  GOTO   20E
01F4:  BCF    03.6
01F5:  MOVWF  23
01F6:  BSF    03.6
01F7:  MOVF   0D,W
01F8:  BCF    03.6
01F9:  MOVWF  24
01FA:  BSF    03.6
01FB:  MOVF   0F,W
01FC:  BCF    03.6
01FD:  MOVWF  25
01FE:  MOVF   23,W
01FF:  MOVWF  26
0200:  CALL   0ED
0201:  MOVF   24,W
0202:  BSF    03.6
0203:  MOVWF  0D
0204:  BCF    03.6
0205:  MOVF   25,W
0206:  BSF    03.6
0207:  MOVWF  0F
0208:  INCF   0D,F
0209:  BTFSC  03.2
020A:  INCF   0F,F
020B:  BCF    03.6
020C:  GOTO   1BA
020D:  BSF    03.6
020E:  BCF    03.6
020F:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0030:  MOVLW  27
0031:  MOVWF  04
0032:  BCF    03.7
0033:  MOVF   00,W
0034:  BTFSC  03.2
0035:  GOTO   043
0036:  MOVLW  06
0037:  MOVWF  78
0038:  CLRF   77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  DECFSZ 78,F
003C:  GOTO   038
003D:  MOVLW  7B
003E:  MOVWF  77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 00,F
0042:  GOTO   036
0043:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0061:  MOVLW  0F
0062:  BSF    03.5
0063:  ANDWF  08,W
0064:  IORLW  F0
0065:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0066:  BCF    03.5
0067:  BSF    08.2
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    08.0
....................    delay_cycles(1); 
006A:  NOP
....................    high = lcd_read_nibble(); 
006B:  CALL   055
006C:  MOVF   78,W
006D:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
006E:  BCF    08.0
....................    delay_cycles(1); 
006F:  NOP
....................    lcd_output_enable(1); 
0070:  BSF    08.0
....................    delay_us(1); 
0071:  GOTO   072
0072:  GOTO   073
0073:  NOP
....................    low = lcd_read_nibble(); 
0074:  CALL   055
0075:  MOVF   78,W
0076:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
0077:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0078:  MOVLW  0F
0079:  BSF    03.5
007A:  ANDWF  08,W
007B:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
007C:  BCF    03.5
007D:  SWAPF  2E,W
007E:  MOVWF  77
007F:  MOVLW  F0
0080:  ANDWF  77,F
0081:  MOVF   77,W
0082:  IORWF  2D,W
0083:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0055:  MOVF   08,W
0056:  MOVWF  77
0057:  SWAPF  08,W
0058:  ANDLW  0F
0059:  MOVWF  78
....................   #endif 
005A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0044:  SWAPF  2E,W
0045:  ANDLW  F0
0046:  MOVWF  77
0047:  MOVLW  0F
0048:  ANDWF  08,W
0049:  IORWF  77,W
004A:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BSF    08.0
....................    delay_us(2); 
004D:  MOVLW  02
004E:  MOVWF  77
004F:  DECFSZ 77,F
0050:  GOTO   04F
0051:  GOTO   052
0052:  NOP
....................    lcd_output_enable(0); 
0053:  BCF    08.0
0054:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005B:  BSF    03.5
005C:  BCF    08.0
....................    lcd_rs_tris(); 
005D:  BCF    08.1
....................    lcd_rw_tris(); 
005E:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005F:  BCF    03.5
0060:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0084:  MOVF   78,W
0085:  MOVWF  2D
0086:  BTFSC  2D.7
0087:  GOTO   061
....................    lcd_output_rs(address); 
0088:  BTFSS  2B.0
0089:  BCF    08.1
008A:  BTFSC  2B.0
008B:  BSF    08.1
....................    delay_cycles(1); 
008C:  NOP
....................    lcd_output_rw(0); 
008D:  BCF    08.2
....................    delay_cycles(1); 
008E:  NOP
....................    lcd_output_enable(0); 
008F:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0090:  SWAPF  2C,W
0091:  MOVWF  2D
0092:  MOVLW  0F
0093:  ANDWF  2D,F
0094:  MOVF   2D,W
0095:  MOVWF  2E
0096:  CALL   044
....................    lcd_send_nibble(n & 0xf); 
0097:  MOVF   2C,W
0098:  ANDLW  0F
0099:  MOVWF  2D
009A:  MOVWF  2E
009B:  CALL   044
009C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
009D:  MOVLW  28
009E:  MOVWF  23
009F:  MOVLW  0C
00A0:  MOVWF  24
00A1:  MOVLW  01
00A2:  MOVWF  25
00A3:  MOVLW  06
00A4:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A5:  BCF    08.0
....................    lcd_output_rs(0); 
00A6:  BCF    08.1
....................    lcd_output_rw(0); 
00A7:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A8:  MOVLW  0F
00A9:  BSF    03.5
00AA:  ANDWF  08,W
00AB:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00AC:  BCF    08.0
....................    lcd_rs_tris(); 
00AD:  BCF    08.1
....................    lcd_rw_tris(); 
00AE:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00AF:  MOVLW  0F
00B0:  BCF    03.5
00B1:  MOVWF  27
00B2:  CALL   030
....................    for(i=1;i<=3;++i) 
00B3:  MOVLW  01
00B4:  MOVWF  22
00B5:  MOVF   22,W
00B6:  SUBLW  03
00B7:  BTFSS  03.0
00B8:  GOTO   0C1
....................    { 
....................        lcd_send_nibble(3); 
00B9:  MOVLW  03
00BA:  MOVWF  2E
00BB:  CALL   044
....................        delay_ms(5); 
00BC:  MOVLW  05
00BD:  MOVWF  27
00BE:  CALL   030
00BF:  INCF   22,F
00C0:  GOTO   0B5
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C1:  MOVLW  02
00C2:  MOVWF  2E
00C3:  CALL   044
....................    delay_ms(5); 
00C4:  MOVLW  05
00C5:  MOVWF  27
00C6:  CALL   030
....................    for(i=0;i<=3;++i) 
00C7:  CLRF   22
00C8:  MOVF   22,W
00C9:  SUBLW  03
00CA:  BTFSS  03.0
00CB:  GOTO   0D8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00CC:  MOVLW  23
00CD:  ADDWF  22,W
00CE:  MOVWF  04
00CF:  BCF    03.7
00D0:  MOVF   00,W
00D1:  MOVWF  27
00D2:  CLRF   2B
00D3:  MOVF   27,W
00D4:  MOVWF  2C
00D5:  CALL   05B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D6:  INCF   22,F
00D7:  GOTO   0C8
00D8:  BCF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   2AB (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00DB:  DECFSZ 28,W
00DC:  GOTO   0DE
00DD:  GOTO   0E1
....................       address=LCD_LINE_TWO; 
00DE:  MOVLW  40
00DF:  MOVWF  29
00E0:  GOTO   0E2
....................    else 
....................       address=0; 
00E1:  CLRF   29
....................       
....................    address+=x-1; 
00E2:  MOVLW  01
00E3:  SUBWF  27,W
00E4:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00E5:  MOVF   29,W
00E6:  IORLW  80
00E7:  MOVWF  2A
00E8:  CLRF   2B
00E9:  MOVF   2A,W
00EA:  MOVWF  2C
00EB:  CALL   05B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00EC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00ED:  MOVF   26,W
00EE:  XORLW  07
00EF:  BTFSC  03.2
00F0:  GOTO   0FB
00F1:  XORLW  0B
00F2:  BTFSC  03.2
00F3:  GOTO   100
00F4:  XORLW  06
00F5:  BTFSC  03.2
00F6:  GOTO   108
00F7:  XORLW  02
00F8:  BTFSC  03.2
00F9:  GOTO   10E
00FA:  GOTO   113
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00FB:  MOVLW  01
00FC:  MOVWF  27
00FD:  MOVWF  28
00FE:  CALL   0DB
00FF:  GOTO   118
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0100:  CLRF   2B
0101:  MOVLW  01
0102:  MOVWF  2C
0103:  CALL   05B
....................                      delay_ms(2); 
0104:  MOVLW  02
0105:  MOVWF  27
0106:  CALL   030
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0107:  GOTO   118
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0108:  MOVLW  01
0109:  MOVWF  27
010A:  MOVLW  02
010B:  MOVWF  28
010C:  CALL   0DB
010D:  GOTO   118
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010E:  CLRF   2B
010F:  MOVLW  10
0110:  MOVWF  2C
0111:  CALL   05B
0112:  GOTO   118
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0113:  MOVLW  01
0114:  MOVWF  2B
0115:  MOVF   26,W
0116:  MOVWF  2C
0117:  CALL   05B
....................      #endif 
....................    } 
0118:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define button1 pin_rb0 
.................... #define button2 pin_rb1 
.................... unsigned char aa = 5; 
.................... unsigned char bb; 
.................... void blink() 
.................... { 
....................    for(unsigned char i = 0; ; i++) 
*
0255:  CLRF   22
....................    { 
....................       set_timer0(0); 
0256:  CLRF   01
....................       lcd_gotoxy(1,1); 
0257:  MOVLW  01
0258:  MOVWF  27
0259:  MOVWF  28
025A:  CALL   0DB
....................       printf(lcd_putc," DA DU SO LUONG"); 
025B:  MOVLW  04
025C:  BSF    03.6
025D:  MOVWF  0D
025E:  MOVLW  00
025F:  MOVWF  0F
0260:  BCF    03.6
0261:  CALL   1BA
....................       lcd_gotoxy(1,2); 
0262:  MOVLW  01
0263:  MOVWF  27
0264:  MOVLW  02
0265:  MOVWF  28
0266:  CALL   0DB
....................       printf(lcd_putc,"DE NGHI DONG GOI"); 
0267:  MOVLW  0C
0268:  BSF    03.6
0269:  MOVWF  0D
026A:  MOVLW  00
026B:  MOVWF  0F
026C:  BCF    03.6
026D:  CALL   1BA
....................       delay_ms(50); 
026E:  MOVLW  32
026F:  MOVWF  27
0270:  CALL   030
....................       lcd_putc('\f'); 
0271:  MOVLW  0C
0272:  MOVWF  26
0273:  CALL   0ED
....................       delay_ms(50); 
0274:  MOVLW  32
0275:  MOVWF  27
0276:  CALL   030
....................       if(get_timer0() == 1) 
0277:  MOVF   01,W
0278:  SUBLW  01
0279:  BTFSC  03.2
....................          break; 
027A:  GOTO   27D
027B:  INCF   22,F
027C:  GOTO   256
....................    } 
.................... } 
.................... void count() 
.................... { 
....................    if(input(pin_b0) == 0) 
*
0210:  BSF    03.5
0211:  BSF    06.0
0212:  BCF    03.5
0213:  BTFSC  06.0
0214:  GOTO   223
....................    { 
....................       delay_ms(20); 
0215:  MOVLW  14
0216:  MOVWF  27
0217:  CALL   030
....................       if(input(pin_b0) == 0) 
0218:  BSF    03.5
0219:  BSF    06.0
021A:  BCF    03.5
021B:  BTFSC  06.0
021C:  GOTO   223
....................       { 
....................          aa++; 
021D:  INCF   20,F
....................          while(input(pin_b0) == 0); 
021E:  BSF    03.5
021F:  BSF    06.0
0220:  BCF    03.5
0221:  BTFSS  06.0
0222:  GOTO   21E
....................       } 
....................    } 
....................    if(input(pin_b1) == 0) 
0223:  BSF    03.5
0224:  BSF    06.1
0225:  BCF    03.5
0226:  BTFSC  06.1
0227:  GOTO   238
....................    { 
....................       delay_ms(20); 
0228:  MOVLW  14
0229:  MOVWF  27
022A:  CALL   030
....................       if(input(pin_b1) == 0) 
022B:  BSF    03.5
022C:  BSF    06.1
022D:  BCF    03.5
022E:  BTFSC  06.1
022F:  GOTO   238
....................       { 
....................          if(aa > 0) 
0230:  MOVF   20,F
0231:  BTFSS  03.2
....................          { 
....................             aa--; 
0232:  DECF   20,F
....................          } 
....................          while(input(pin_b1) == 0); 
0233:  BSF    03.5
0234:  BSF    06.1
0235:  BCF    03.5
0236:  BTFSS  06.1
0237:  GOTO   233
....................       } 
....................    } 
....................    bb = get_timer0(); 
0238:  MOVF   01,W
0239:  MOVWF  21
....................    if(bb == aa) 
023A:  MOVF   20,W
023B:  SUBWF  21,W
023C:  BTFSS  03.2
023D:  GOTO   27D
....................    { 
....................       lcd_gotoxy(1,2); 
023E:  MOVLW  01
023F:  MOVWF  27
0240:  MOVLW  02
0241:  MOVWF  28
0242:  CALL   0DB
....................       printf(lcd_putc,"SO SAN PHAM: %02u", bb); 
0243:  MOVLW  15
0244:  BSF    03.6
0245:  MOVWF  0D
0246:  MOVLW  00
0247:  MOVWF  0F
0248:  BCF    03.0
0249:  MOVLW  0D
024A:  BCF    03.6
024B:  MOVWF  22
024C:  CALL   119
024D:  MOVF   21,W
024E:  MOVWF  22
024F:  MOVLW  01
0250:  MOVWF  23
0251:  CALL   185
....................       delay_ms(100); 
0252:  MOVLW  64
0253:  MOVWF  27
0254:  CALL   030
....................       blink(); 
....................    } 
....................    lcd_gotoxy(1,2); 
*
027D:  MOVLW  01
027E:  MOVWF  27
027F:  MOVLW  02
0280:  MOVWF  28
0281:  CALL   0DB
....................    printf(lcd_putc,"SO SAN PHAM: %02u", bb); 
0282:  MOVLW  1E
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  MOVLW  00
0286:  MOVWF  0F
0287:  BCF    03.0
0288:  MOVLW  0D
0289:  BCF    03.6
028A:  MOVWF  22
028B:  CALL   119
028C:  MOVF   21,W
028D:  MOVWF  22
028E:  MOVLW  01
028F:  MOVWF  23
0290:  CALL   185
0291:  BCF    0A.3
0292:  BCF    0A.4
0293:  GOTO   2C6 (RETURN)
.................... } 
.................... void main() 
0294:  MOVF   03,W
0295:  ANDLW  1F
0296:  MOVWF  03
0297:  MOVLW  05
0298:  MOVWF  20
0299:  BSF    03.5
029A:  BSF    03.6
029B:  MOVF   09,W
029C:  ANDLW  C0
029D:  MOVWF  09
029E:  BCF    03.6
029F:  BCF    1F.4
02A0:  BCF    1F.5
02A1:  MOVLW  00
02A2:  BSF    03.6
02A3:  MOVWF  08
02A4:  BCF    03.5
02A5:  CLRF   07
02A6:  CLRF   08
02A7:  CLRF   09
02A8:  BCF    03.7
.................... { 
....................    lcd_init(); 
02A9:  BCF    03.6
02AA:  GOTO   09D
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
02AB:  BSF    03.5
02AC:  MOVF   01,W
02AD:  ANDLW  C7
02AE:  IORLW  28
02AF:  MOVWF  01
....................    set_timer0(0); 
02B0:  BCF    03.5
02B1:  CLRF   01
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(1,1); 
02B2:  MOVLW  01
02B3:  MOVWF  27
02B4:  MOVWF  28
02B5:  CALL   0DB
....................       printf(lcd_putc,"GIA TRI DAT: %2u", aa);   //Ko co so 2 trong %2u se bi loi ngay 
02B6:  MOVLW  27
02B7:  BSF    03.6
02B8:  MOVWF  0D
02B9:  MOVLW  00
02BA:  MOVWF  0F
02BB:  BCF    03.0
02BC:  MOVLW  0D
02BD:  BCF    03.6
02BE:  MOVWF  22
02BF:  CALL   119
02C0:  MOVF   20,W
02C1:  MOVWF  22
02C2:  MOVLW  11
02C3:  MOVWF  23
02C4:  CALL   185
....................        
....................       count(); 
02C5:  GOTO   210
02C6:  GOTO   2B2
....................    } 
....................  
.................... } 
02C7:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
