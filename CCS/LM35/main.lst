CCS PCM C Compiler, Version 5.015, 5967               02-Thg3-22 08:16

               Filename:   C:\PIC16F887\LM35\main.lst

               ROM used:   843 words (10%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2BC
0003:  NOP
.................... //https://youtu.be/VvQHP69yakA 
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,27
0005:  DATA 20,27
0006:  DATA C8,24
0007:  DATA 45,2A
0008:  DATA 20,22
0009:  DATA 4F,00
*
00F3:  MOVF   0B,W
00F4:  MOVWF  23
00F5:  BCF    0B.7
00F6:  BSF    03.5
00F7:  BSF    03.6
00F8:  BSF    0C.7
00F9:  BSF    0C.0
00FA:  NOP
00FB:  NOP
00FC:  BCF    03.5
00FD:  BCF    03.6
00FE:  BTFSC  23.7
00FF:  BSF    0B.7
0100:  BSF    03.6
0101:  MOVF   0C,W
0102:  ANDLW  7F
0103:  BTFSC  03.2
0104:  GOTO   147
0105:  BCF    03.6
0106:  MOVWF  23
0107:  BSF    03.6
0108:  MOVF   0D,W
0109:  BCF    03.6
010A:  MOVWF  24
010B:  BSF    03.6
010C:  MOVF   0F,W
010D:  BCF    03.6
010E:  MOVWF  25
010F:  MOVF   23,W
0110:  MOVWF  2C
0111:  CALL   0C7
0112:  MOVF   24,W
0113:  BSF    03.6
0114:  MOVWF  0D
0115:  BCF    03.6
0116:  MOVF   25,W
0117:  BSF    03.6
0118:  MOVWF  0F
0119:  BCF    03.6
011A:  MOVF   0B,W
011B:  MOVWF  26
011C:  BCF    0B.7
011D:  BSF    03.5
011E:  BSF    03.6
011F:  BSF    0C.7
0120:  BSF    0C.0
0121:  NOP
0122:  NOP
0123:  BCF    03.5
0124:  BCF    03.6
0125:  BTFSC  26.7
0126:  BSF    0B.7
0127:  BSF    03.6
0128:  RLF    0C,W
0129:  RLF    0E,W
012A:  ANDLW  7F
012B:  BTFSC  03.2
012C:  GOTO   147
012D:  BCF    03.6
012E:  MOVWF  23
012F:  BSF    03.6
0130:  MOVF   0D,W
0131:  BCF    03.6
0132:  MOVWF  24
0133:  BSF    03.6
0134:  MOVF   0F,W
0135:  BCF    03.6
0136:  MOVWF  25
0137:  MOVF   23,W
0138:  MOVWF  2C
0139:  CALL   0C7
013A:  MOVF   24,W
013B:  BSF    03.6
013C:  MOVWF  0D
013D:  BCF    03.6
013E:  MOVF   25,W
013F:  BSF    03.6
0140:  MOVWF  0F
0141:  INCF   0D,F
0142:  BTFSC  03.2
0143:  INCF   0F,F
0144:  BCF    03.6
0145:  GOTO   0F3
0146:  BSF    03.6
0147:  BCF    03.6
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   2FD (RETURN)
014B:  MOVLW  8E
014C:  MOVWF  77
014D:  MOVF   26,W
014E:  MOVWF  78
014F:  MOVF   25,W
0150:  MOVWF  79
0151:  CLRF   7A
0152:  MOVF   78,F
0153:  BTFSS  03.2
0154:  GOTO   15F
0155:  MOVF   79,W
0156:  MOVWF  78
0157:  CLRF   79
0158:  MOVLW  08
0159:  SUBWF  77,F
015A:  MOVF   78,F
015B:  BTFSS  03.2
015C:  GOTO   15F
015D:  CLRF   77
015E:  GOTO   167
015F:  BCF    03.0
0160:  BTFSC  78.7
0161:  GOTO   166
0162:  RLF    79,F
0163:  RLF    78,F
0164:  DECF   77,F
0165:  GOTO   15F
0166:  BCF    78.7
0167:  BCF    0A.3
0168:  BCF    0A.4
0169:  GOTO   30C (RETURN)
016A:  MOVF   25,W
016B:  BTFSC  03.2
016C:  GOTO   22F
016D:  MOVWF  31
016E:  MOVF   29,W
016F:  BTFSC  03.2
0170:  GOTO   22F
0171:  SUBWF  31,F
0172:  BTFSS  03.0
0173:  GOTO   179
0174:  MOVLW  7F
0175:  ADDWF  31,F
0176:  BTFSC  03.0
0177:  GOTO   22F
0178:  GOTO   17F
0179:  MOVLW  81
017A:  SUBWF  31,F
017B:  BTFSS  03.0
017C:  GOTO   22F
017D:  BTFSC  03.2
017E:  GOTO   22F
017F:  MOVF   31,W
0180:  MOVWF  77
0181:  CLRF   78
0182:  CLRF   79
0183:  CLRF   7A
0184:  CLRF   30
0185:  MOVF   26,W
0186:  MOVWF  2F
0187:  BSF    2F.7
0188:  MOVF   27,W
0189:  MOVWF  2E
018A:  MOVF   28,W
018B:  MOVWF  2D
018C:  MOVLW  19
018D:  MOVWF  31
018E:  MOVF   2C,W
018F:  SUBWF  2D,F
0190:  BTFSC  03.0
0191:  GOTO   1A2
0192:  MOVLW  01
0193:  SUBWF  2E,F
0194:  BTFSC  03.0
0195:  GOTO   1A2
0196:  SUBWF  2F,F
0197:  BTFSC  03.0
0198:  GOTO   1A2
0199:  SUBWF  30,F
019A:  BTFSC  03.0
019B:  GOTO   1A2
019C:  INCF   30,F
019D:  INCF   2F,F
019E:  INCF   2E,F
019F:  MOVF   2C,W
01A0:  ADDWF  2D,F
01A1:  GOTO   1D4
01A2:  MOVF   2B,W
01A3:  SUBWF  2E,F
01A4:  BTFSC  03.0
01A5:  GOTO   1BD
01A6:  MOVLW  01
01A7:  SUBWF  2F,F
01A8:  BTFSC  03.0
01A9:  GOTO   1BD
01AA:  SUBWF  30,F
01AB:  BTFSC  03.0
01AC:  GOTO   1BD
01AD:  INCF   30,F
01AE:  INCF   2F,F
01AF:  MOVF   2B,W
01B0:  ADDWF  2E,F
01B1:  MOVF   2C,W
01B2:  ADDWF  2D,F
01B3:  BTFSS  03.0
01B4:  GOTO   1D4
01B5:  INCF   2E,F
01B6:  BTFSS  03.2
01B7:  GOTO   1D4
01B8:  INCF   2F,F
01B9:  BTFSS  03.2
01BA:  GOTO   1D4
01BB:  INCF   30,F
01BC:  GOTO   1D4
01BD:  MOVF   2A,W
01BE:  IORLW  80
01BF:  SUBWF  2F,F
01C0:  BTFSC  03.0
01C1:  GOTO   1D3
01C2:  MOVLW  01
01C3:  SUBWF  30,F
01C4:  BTFSC  03.0
01C5:  GOTO   1D3
01C6:  INCF   30,F
01C7:  MOVF   2A,W
01C8:  IORLW  80
01C9:  ADDWF  2F,F
01CA:  MOVF   2B,W
01CB:  ADDWF  2E,F
01CC:  BTFSS  03.0
01CD:  GOTO   1B1
01CE:  INCF   2F,F
01CF:  BTFSS  03.2
01D0:  GOTO   1B1
01D1:  INCF   30,F
01D2:  GOTO   1B1
01D3:  BSF    7A.0
01D4:  DECFSZ 31,F
01D5:  GOTO   1D7
01D6:  GOTO   1E2
01D7:  BCF    03.0
01D8:  RLF    2D,F
01D9:  RLF    2E,F
01DA:  RLF    2F,F
01DB:  RLF    30,F
01DC:  BCF    03.0
01DD:  RLF    7A,F
01DE:  RLF    79,F
01DF:  RLF    78,F
01E0:  RLF    32,F
01E1:  GOTO   18E
01E2:  BTFSS  32.0
01E3:  GOTO   1EA
01E4:  BCF    03.0
01E5:  RRF    78,F
01E6:  RRF    79,F
01E7:  RRF    7A,F
01E8:  RRF    32,F
01E9:  GOTO   1ED
01EA:  DECF   77,F
01EB:  BTFSC  03.2
01EC:  GOTO   22F
01ED:  BTFSC  32.7
01EE:  GOTO   216
01EF:  BCF    03.0
01F0:  RLF    2D,F
01F1:  RLF    2E,F
01F2:  RLF    2F,F
01F3:  RLF    30,F
01F4:  MOVF   2C,W
01F5:  SUBWF  2D,F
01F6:  BTFSC  03.0
01F7:  GOTO   202
01F8:  MOVLW  01
01F9:  SUBWF  2E,F
01FA:  BTFSC  03.0
01FB:  GOTO   202
01FC:  SUBWF  2F,F
01FD:  BTFSC  03.0
01FE:  GOTO   202
01FF:  SUBWF  30,F
0200:  BTFSS  03.0
0201:  GOTO   225
0202:  MOVF   2B,W
0203:  SUBWF  2E,F
0204:  BTFSC  03.0
0205:  GOTO   20D
0206:  MOVLW  01
0207:  SUBWF  2F,F
0208:  BTFSC  03.0
0209:  GOTO   20D
020A:  SUBWF  30,F
020B:  BTFSS  03.0
020C:  GOTO   225
020D:  MOVF   2A,W
020E:  IORLW  80
020F:  SUBWF  2F,F
0210:  BTFSC  03.0
0211:  GOTO   216
0212:  MOVLW  01
0213:  SUBWF  30,F
0214:  BTFSS  03.0
0215:  GOTO   225
0216:  INCF   7A,F
0217:  BTFSS  03.2
0218:  GOTO   225
0219:  INCF   79,F
021A:  BTFSS  03.2
021B:  GOTO   225
021C:  INCF   78,F
021D:  BTFSS  03.2
021E:  GOTO   225
021F:  INCF   77,F
0220:  BTFSC  03.2
0221:  GOTO   22F
0222:  RRF    78,F
0223:  RRF    79,F
0224:  RRF    7A,F
0225:  MOVF   26,W
0226:  MOVWF  31
0227:  MOVF   2A,W
0228:  XORWF  31,F
0229:  BTFSS  31.7
022A:  GOTO   22D
022B:  BSF    78.7
022C:  GOTO   233
022D:  BCF    78.7
022E:  GOTO   233
022F:  CLRF   77
0230:  CLRF   78
0231:  CLRF   79
0232:  CLRF   7A
0233:  BCF    0A.3
0234:  BCF    0A.4
0235:  GOTO   31D (RETURN)
0236:  MOVLW  8E
0237:  MOVWF  77
0238:  MOVF   23,W
0239:  SUBWF  77,F
023A:  MOVF   24,W
023B:  MOVWF  79
023C:  MOVF   25,W
023D:  MOVWF  78
023E:  BSF    79.7
023F:  MOVF   77,F
0240:  BTFSC  03.2
0241:  GOTO   24D
0242:  BCF    03.0
0243:  MOVF   79,F
0244:  BTFSS  03.2
0245:  GOTO   249
0246:  MOVF   78,F
0247:  BTFSC  03.2
0248:  GOTO   24D
0249:  RRF    79,F
024A:  RRF    78,F
024B:  DECFSZ 77,F
024C:  GOTO   242
024D:  BTFSS  24.7
024E:  GOTO   254
024F:  COMF   78,F
0250:  COMF   79,F
0251:  INCF   78,F
0252:  BTFSC  03.2
0253:  INCF   79,F
0254:  BCF    0A.3
0255:  BCF    0A.4
0256:  GOTO   326 (RETURN)
0257:  CLRF   2B
0258:  MOVF   04,W
0259:  MOVWF  2A
025A:  BCF    2B.0
025B:  BTFSC  03.7
025C:  BSF    2B.0
025D:  SWAPF  24,W
025E:  IORLW  F0
025F:  MOVWF  26
0260:  ADDWF  26,F
0261:  ADDLW  E2
0262:  MOVWF  27
0263:  ADDLW  32
0264:  MOVWF  29
0265:  MOVF   24,W
0266:  ANDLW  0F
0267:  ADDWF  27,F
0268:  ADDWF  27,F
0269:  ADDWF  29,F
026A:  ADDLW  E9
026B:  MOVWF  28
026C:  ADDWF  28,F
026D:  ADDWF  28,F
026E:  SWAPF  23,W
026F:  ANDLW  0F
0270:  ADDWF  28,F
0271:  ADDWF  29,F
0272:  RLF    28,F
0273:  RLF    29,F
0274:  COMF   29,F
0275:  RLF    29,F
0276:  MOVF   23,W
0277:  ANDLW  0F
0278:  ADDWF  29,F
0279:  RLF    26,F
027A:  MOVLW  07
027B:  MOVWF  25
027C:  MOVLW  0A
027D:  ADDWF  29,F
027E:  DECF   28,F
027F:  BTFSS  03.0
0280:  GOTO   27D
0281:  ADDWF  28,F
0282:  DECF   27,F
0283:  BTFSS  03.0
0284:  GOTO   281
0285:  ADDWF  27,F
0286:  DECF   26,F
0287:  BTFSS  03.0
0288:  GOTO   285
0289:  ADDWF  26,F
028A:  DECF   25,F
028B:  BTFSS  03.0
028C:  GOTO   289
028D:  MOVLW  25
028E:  MOVWF  04
028F:  BCF    03.7
0290:  MOVLW  07
0291:  ANDWF  2A,W
0292:  BCF    2A.6
0293:  ADDWF  04,F
0294:  MOVLW  29
0295:  SUBWF  04,W
0296:  BTFSC  03.2
0297:  BSF    2A.6
0298:  MOVF   00,W
0299:  MOVWF  77
029A:  BTFSS  03.2
029B:  GOTO   2A4
029C:  BTFSC  2A.6
029D:  GOTO   2A4
029E:  BTFSC  2A.4
029F:  GOTO   2B6
02A0:  BTFSC  2A.3
02A1:  GOTO   2A4
02A2:  MOVLW  20
02A3:  GOTO   2A7
02A4:  BSF    2A.3
02A5:  BCF    2A.4
02A6:  MOVLW  30
02A7:  ADDWF  77,F
02A8:  CLRF   24
02A9:  MOVF   04,W
02AA:  MOVWF  23
02AB:  BCF    24.0
02AC:  BTFSC  03.7
02AD:  BSF    24.0
02AE:  MOVF   77,W
02AF:  MOVWF  2C
02B0:  CALL   0C7
02B1:  MOVF   23,W
02B2:  MOVWF  04
02B3:  BCF    03.7
02B4:  BTFSC  24.0
02B5:  BSF    03.7
02B6:  INCF   04,F
02B7:  BTFSS  2A.6
02B8:  GOTO   294
02B9:  BCF    0A.3
02BA:  BCF    0A.4
02BB:  GOTO   336 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
000A:  MOVLW  2D
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01D
0010:  MOVLW  06
0011:  MOVWF  78
0012:  CLRF   77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 78,F
0016:  GOTO   012
0017:  MOVLW  7B
0018:  MOVWF  77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 00,F
001C:  GOTO   010
001D:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003B:  MOVLW  0F
003C:  BSF    03.5
003D:  ANDWF  08,W
003E:  IORLW  F0
003F:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0040:  BCF    03.5
0041:  BSF    08.2
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    08.0
....................    delay_cycles(1); 
0044:  NOP
....................    high = lcd_read_nibble(); 
0045:  CALL   02F
0046:  MOVF   78,W
0047:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0048:  BCF    08.0
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    08.0
....................    delay_us(1); 
004B:  GOTO   04C
004C:  GOTO   04D
004D:  NOP
....................    low = lcd_read_nibble(); 
004E:  CALL   02F
004F:  MOVF   78,W
0050:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0051:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0052:  MOVLW  0F
0053:  BSF    03.5
0054:  ANDWF  08,W
0055:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0056:  BCF    03.5
0057:  SWAPF  34,W
0058:  MOVWF  77
0059:  MOVLW  F0
005A:  ANDWF  77,F
005B:  MOVF   77,W
005C:  IORWF  33,W
005D:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002F:  MOVF   08,W
0030:  MOVWF  77
0031:  SWAPF  08,W
0032:  ANDLW  0F
0033:  MOVWF  78
....................   #endif 
0034:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
001E:  SWAPF  34,W
001F:  ANDLW  F0
0020:  MOVWF  77
0021:  MOVLW  0F
0022:  ANDWF  08,W
0023:  IORWF  77,W
0024:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0025:  NOP
....................    lcd_output_enable(1); 
0026:  BSF    08.0
....................    delay_us(2); 
0027:  MOVLW  02
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  GOTO   02C
002C:  NOP
....................    lcd_output_enable(0); 
002D:  BCF    08.0
002E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0035:  BSF    03.5
0036:  BCF    08.0
....................    lcd_rs_tris(); 
0037:  BCF    08.1
....................    lcd_rw_tris(); 
0038:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0039:  BCF    03.5
003A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005E:  MOVF   78,W
005F:  MOVWF  33
0060:  BTFSC  33.7
0061:  GOTO   03B
....................    lcd_output_rs(address); 
0062:  BTFSS  31.0
0063:  BCF    08.1
0064:  BTFSC  31.0
0065:  BSF    08.1
....................    delay_cycles(1); 
0066:  NOP
....................    lcd_output_rw(0); 
0067:  BCF    08.2
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(0); 
0069:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006A:  SWAPF  32,W
006B:  MOVWF  33
006C:  MOVLW  0F
006D:  ANDWF  33,F
006E:  MOVF   33,W
006F:  MOVWF  34
0070:  CALL   01E
....................    lcd_send_nibble(n & 0xf); 
0071:  MOVF   32,W
0072:  ANDLW  0F
0073:  MOVWF  33
0074:  MOVWF  34
0075:  CALL   01E
0076:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0077:  MOVLW  28
0078:  MOVWF  24
0079:  MOVLW  0C
007A:  MOVWF  25
007B:  MOVLW  01
007C:  MOVWF  26
007D:  MOVLW  06
007E:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007F:  BCF    08.0
....................    lcd_output_rs(0); 
0080:  BCF    08.1
....................    lcd_output_rw(0); 
0081:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0082:  MOVLW  0F
0083:  BSF    03.5
0084:  ANDWF  08,W
0085:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0086:  BCF    08.0
....................    lcd_rs_tris(); 
0087:  BCF    08.1
....................    lcd_rw_tris(); 
0088:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0089:  MOVLW  0F
008A:  BCF    03.5
008B:  MOVWF  2D
008C:  CALL   00A
....................    for(i=1;i<=3;++i) 
008D:  MOVLW  01
008E:  MOVWF  23
008F:  MOVF   23,W
0090:  SUBLW  03
0091:  BTFSS  03.0
0092:  GOTO   09B
....................    { 
....................        lcd_send_nibble(3); 
0093:  MOVLW  03
0094:  MOVWF  34
0095:  CALL   01E
....................        delay_ms(5); 
0096:  MOVLW  05
0097:  MOVWF  2D
0098:  CALL   00A
0099:  INCF   23,F
009A:  GOTO   08F
....................    } 
....................     
....................    lcd_send_nibble(2); 
009B:  MOVLW  02
009C:  MOVWF  34
009D:  CALL   01E
....................    delay_ms(5); 
009E:  MOVLW  05
009F:  MOVWF  2D
00A0:  CALL   00A
....................    for(i=0;i<=3;++i) 
00A1:  CLRF   23
00A2:  MOVF   23,W
00A3:  SUBLW  03
00A4:  BTFSS  03.0
00A5:  GOTO   0B2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A6:  MOVLW  24
00A7:  ADDWF  23,W
00A8:  MOVWF  04
00A9:  BCF    03.7
00AA:  MOVF   00,W
00AB:  MOVWF  28
00AC:  CLRF   31
00AD:  MOVF   28,W
00AE:  MOVWF  32
00AF:  CALL   035
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B0:  INCF   23,F
00B1:  GOTO   0A2
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   2D1 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B5:  DECFSZ 2E,W
00B6:  GOTO   0B8
00B7:  GOTO   0BB
....................       address=LCD_LINE_TWO; 
00B8:  MOVLW  40
00B9:  MOVWF  2F
00BA:  GOTO   0BC
....................    else 
....................       address=0; 
00BB:  CLRF   2F
....................       
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  2D,W
00BE:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
00BF:  MOVF   2F,W
00C0:  IORLW  80
00C1:  MOVWF  30
00C2:  CLRF   31
00C3:  MOVF   30,W
00C4:  MOVWF  32
00C5:  CALL   035
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C7:  MOVF   2C,W
00C8:  XORLW  07
00C9:  BTFSC  03.2
00CA:  GOTO   0D5
00CB:  XORLW  0B
00CC:  BTFSC  03.2
00CD:  GOTO   0DA
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E2
00D1:  XORLW  02
00D2:  BTFSC  03.2
00D3:  GOTO   0E8
00D4:  GOTO   0ED
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D5:  MOVLW  01
00D6:  MOVWF  2D
00D7:  MOVWF  2E
00D8:  CALL   0B5
00D9:  GOTO   0F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DA:  CLRF   31
00DB:  MOVLW  01
00DC:  MOVWF  32
00DD:  CALL   035
....................                      delay_ms(2); 
00DE:  MOVLW  02
00DF:  MOVWF  2D
00E0:  CALL   00A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E1:  GOTO   0F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E2:  MOVLW  01
00E3:  MOVWF  2D
00E4:  MOVLW  02
00E5:  MOVWF  2E
00E6:  CALL   0B5
00E7:  GOTO   0F2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E8:  CLRF   31
00E9:  MOVLW  10
00EA:  MOVWF  32
00EB:  CALL   035
00EC:  GOTO   0F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  31
00EF:  MOVF   2C,W
00F0:  MOVWF  32
00F1:  CALL   035
....................      #endif 
....................    } 
00F2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... //xem lai device adc = 16 thu xem 
.................... void main() 
*
02BC:  MOVF   03,W
02BD:  ANDLW  1F
02BE:  MOVWF  03
02BF:  BSF    03.5
02C0:  BSF    03.6
02C1:  MOVF   09,W
02C2:  ANDLW  C0
02C3:  MOVWF  09
02C4:  BCF    03.6
02C5:  BCF    1F.4
02C6:  BCF    1F.5
02C7:  MOVLW  00
02C8:  BSF    03.6
02C9:  MOVWF  08
02CA:  BCF    03.5
02CB:  CLRF   07
02CC:  CLRF   08
02CD:  CLRF   09
02CE:  BCF    03.7
.................... { 
....................    lcd_init(); 
02CF:  BCF    03.6
02D0:  GOTO   077
....................    set_tris_d(0); 
02D1:  MOVLW  00
02D2:  BSF    03.5
02D3:  MOVWF  08
....................    setup_adc(ADC_CLOCK_DIV_2); 
02D4:  BCF    03.5
02D5:  BCF    1F.6
02D6:  BCF    1F.7
02D7:  BSF    03.5
02D8:  BSF    1F.7
02D9:  BCF    03.5
02DA:  BSF    1F.0
....................    setup_adc_ports(sAN0|VSS_VDD);  //Choose 1 port(ANxx) and Ref+, Ref- for ADC 
02DB:  BSF    03.5
02DC:  BSF    03.6
02DD:  MOVF   09,W
02DE:  ANDLW  C0
02DF:  MOVWF  09
02E0:  BCF    03.6
02E1:  BCF    1F.4
02E2:  BCF    1F.5
02E3:  MOVLW  01
02E4:  BSF    03.6
02E5:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(0);   //only 1 channel is selected at a time; 
02E6:  MOVLW  00
02E7:  MOVWF  78
02E8:  BCF    03.5
02E9:  BCF    03.6
02EA:  MOVF   1F,W
02EB:  ANDLW  C3
02EC:  IORWF  78,W
02ED:  MOVWF  1F
....................       delay_ms(10); 
02EE:  MOVLW  0A
02EF:  MOVWF  2D
02F0:  CALL   00A
....................       lcd_gotoxy(5,1); 
02F1:  MOVLW  05
02F2:  MOVWF  2D
02F3:  MOVLW  01
02F4:  MOVWF  2E
02F5:  CALL   0B5
....................       lcd_putc("DO NHIET DO"); 
02F6:  MOVLW  04
02F7:  BSF    03.6
02F8:  MOVWF  0D
02F9:  MOVLW  00
02FA:  MOVWF  0F
02FB:  BCF    03.6
02FC:  GOTO   0F3
....................       int16 temp = read_adc() / 2.046; 
02FD:  BSF    1F.1
02FE:  BTFSC  1F.1
02FF:  GOTO   2FE
0300:  MOVF   1E,W
0301:  MOVWF  7A
0302:  BSF    03.5
0303:  MOVF   1E,W
0304:  BCF    03.5
0305:  MOVWF  23
0306:  MOVF   1E,W
0307:  MOVWF  24
0308:  MOVWF  26
0309:  MOVF   23,W
030A:  MOVWF  25
030B:  GOTO   14B
030C:  MOVF   7A,W
030D:  MOVWF  28
030E:  MOVF   79,W
030F:  MOVWF  27
0310:  MOVF   78,W
0311:  MOVWF  26
0312:  MOVF   77,W
0313:  MOVWF  25
0314:  MOVLW  AA
0315:  MOVWF  2C
0316:  MOVLW  F1
0317:  MOVWF  2B
0318:  MOVLW  02
0319:  MOVWF  2A
031A:  MOVLW  80
031B:  MOVWF  29
031C:  GOTO   16A
031D:  MOVF   7A,W
031E:  MOVWF  26
031F:  MOVF   79,W
0320:  MOVWF  25
0321:  MOVF   78,W
0322:  MOVWF  24
0323:  MOVF   77,W
0324:  MOVWF  23
0325:  GOTO   236
0326:  MOVF   79,W
0327:  MOVWF  22
0328:  MOVF   78,W
0329:  MOVWF  21
....................       lcd_gotoxy(8,2); 
032A:  MOVLW  08
032B:  MOVWF  2D
032C:  MOVLW  02
032D:  MOVWF  2E
032E:  CALL   0B5
....................       printf(lcd_putc,"%02lu  C", temp);   // int16 -> %lu 
032F:  MOVLW  0B
0330:  MOVWF  04
0331:  MOVF   22,W
0332:  MOVWF  24
0333:  MOVF   21,W
0334:  MOVWF  23
0335:  GOTO   257
0336:  MOVLW  20
0337:  MOVWF  2C
0338:  CALL   0C7
0339:  MOVLW  20
033A:  MOVWF  2C
033B:  CALL   0C7
033C:  MOVLW  43
033D:  MOVWF  2C
033E:  CALL   0C7
....................       lcd_gotoxy(11, 2); 
033F:  MOVLW  0B
0340:  MOVWF  2D
0341:  MOVLW  02
0342:  MOVWF  2E
0343:  CALL   0B5
....................       lcd_putc(0xDF);   //Add character '*' into row = 2; col = 11 
0344:  MOVLW  DF
0345:  MOVWF  2C
0346:  CALL   0C7
0347:  BSF    03.5
0348:  BSF    03.6
0349:  GOTO   2E6
....................    } 
....................  
.................... } 
034A:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
