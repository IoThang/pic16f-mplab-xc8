CCS PCM C Compiler, Version 5.015, 5967               02-Thg3-22 15:59

               Filename:   C:\PIC16F887\LCD\main.lst

               ROM used:   375 words (5%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   158
0003:  NOP
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  20
0009:  RETLW  20
000A:  RETLW  20
000B:  RETLW  20
000C:  RETLW  20
000D:  RETLW  20
000E:  RETLW  20
000F:  RETLW  20
0010:  RETLW  20
0011:  RETLW  20
0012:  RETLW  20
0013:  RETLW  20
0014:  RETLW  20
0015:  RETLW  20
0016:  RETLW  20
0017:  RETLW  20
0018:  RETLW  56
0019:  RETLW  49
001A:  RETLW  20
001B:  RETLW  58
001C:  RETLW  55
001D:  RETLW  20
001E:  RETLW  4C
001F:  RETLW  59
0020:  RETLW  20
0021:  RETLW  20
0022:  RETLW  20
0023:  RETLW  20
0024:  RETLW  20
0025:  RETLW  20
0026:  RETLW  20
0027:  RETLW  20
0028:  RETLW  20
0029:  RETLW  20
002A:  RETLW  20
002B:  RETLW  20
002C:  RETLW  20
002D:  RETLW  20
002E:  RETLW  20
002F:  RETLW  20
0030:  RETLW  00
0031:  DATA 54,29
0032:  DATA D5,27
0033:  DATA CE,23
0034:  DATA 20,22
0035:  DATA D5,21
0036:  DATA 20,2A
0037:  DATA C8,20
0038:  DATA CE,23
0039:  DATA 00,00
003A:  DATA C4,22
003B:  DATA 4D,10
003C:  DATA C7,24
003D:  DATA C1,2C
003E:  DATA 3A,10
003F:  DATA 25,18
0040:  DATA B2,3A
0041:  DATA 00,00
0042:  DATA 54,29
0043:  DATA D5,27
0044:  DATA CE,23
0045:  DATA 20,22
0046:  DATA D5,21
0047:  DATA 20,2A
0048:  DATA C8,20
0049:  DATA CE,23
004A:  DATA 00,01
004B:  DATA C4,22
004C:  DATA 4D,10
004D:  DATA 50,24
004E:  DATA 55,2A
004F:  DATA 3A,10
0050:  DATA 25,18
0051:  DATA B2,3A
0052:  DATA BA,12
0053:  DATA 30,19
0054:  DATA 75,00
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
0055:  MOVLW  27
0056:  MOVWF  04
0057:  BCF    03.7
0058:  MOVF   00,W
0059:  BTFSC  03.2
005A:  GOTO   069
005B:  MOVLW  01
005C:  MOVWF  78
005D:  CLRF   77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  DECFSZ 78,F
0061:  GOTO   05D
0062:  MOVLW  4A
0063:  MOVWF  77
0064:  DECFSZ 77,F
0065:  GOTO   064
0066:  GOTO   067
0067:  DECFSZ 00,F
0068:  GOTO   05B
0069:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0082:  MOVLW  0F
0083:  BSF    03.5
0084:  ANDWF  08,W
0085:  IORLW  F0
0086:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0087:  BCF    03.5
0088:  BSF    08.2
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_enable(1); 
008A:  BSF    08.0
....................    delay_cycles(1); 
008B:  NOP
....................    high = lcd_read_nibble(); 
008C:  CALL   076
008D:  MOVF   78,W
008E:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
008F:  BCF    08.0
....................    delay_cycles(1); 
0090:  NOP
....................    lcd_output_enable(1); 
0091:  BSF    08.0
....................    delay_us(1); 
0092:  NOP
....................    low = lcd_read_nibble(); 
0093:  CALL   076
0094:  MOVF   78,W
0095:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
0096:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0097:  MOVLW  0F
0098:  BSF    03.5
0099:  ANDWF  08,W
009A:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
009B:  BCF    03.5
009C:  SWAPF  2D,W
009D:  MOVWF  77
009E:  MOVLW  F0
009F:  ANDWF  77,F
00A0:  MOVF   77,W
00A1:  IORWF  2C,W
00A2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0076:  MOVF   08,W
0077:  MOVWF  77
0078:  SWAPF  08,W
0079:  ANDLW  0F
007A:  MOVWF  78
....................   #endif 
007B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
006A:  SWAPF  2D,W
006B:  ANDLW  F0
006C:  MOVWF  77
006D:  MOVLW  0F
006E:  ANDWF  08,W
006F:  IORWF  77,W
0070:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(1); 
0072:  BSF    08.0
....................    delay_us(2); 
0073:  GOTO   074
....................    lcd_output_enable(0); 
0074:  BCF    08.0
0075:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
007C:  BSF    03.5
007D:  BCF    08.0
....................    lcd_rs_tris(); 
007E:  BCF    08.1
....................    lcd_rw_tris(); 
007F:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0080:  BCF    03.5
0081:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00A3:  MOVF   78,W
00A4:  MOVWF  2C
00A5:  BTFSC  2C.7
00A6:  GOTO   082
....................    lcd_output_rs(address); 
00A7:  BTFSS  2A.0
00A8:  BCF    08.1
00A9:  BTFSC  2A.0
00AA:  BSF    08.1
....................    delay_cycles(1); 
00AB:  NOP
....................    lcd_output_rw(0); 
00AC:  BCF    08.2
....................    delay_cycles(1); 
00AD:  NOP
....................    lcd_output_enable(0); 
00AE:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00AF:  SWAPF  2B,W
00B0:  MOVWF  2C
00B1:  MOVLW  0F
00B2:  ANDWF  2C,F
00B3:  MOVF   2C,W
00B4:  MOVWF  2D
00B5:  CALL   06A
....................    lcd_send_nibble(n & 0xf); 
00B6:  MOVF   2B,W
00B7:  ANDLW  0F
00B8:  MOVWF  2C
00B9:  MOVWF  2D
00BA:  CALL   06A
00BB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00BC:  MOVLW  28
00BD:  MOVWF  23
00BE:  MOVLW  0C
00BF:  MOVWF  24
00C0:  MOVLW  01
00C1:  MOVWF  25
00C2:  MOVLW  06
00C3:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00C4:  BCF    08.0
....................    lcd_output_rs(0); 
00C5:  BCF    08.1
....................    lcd_output_rw(0); 
00C6:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00C7:  MOVLW  0F
00C8:  BSF    03.5
00C9:  ANDWF  08,W
00CA:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00CB:  BCF    08.0
....................    lcd_rs_tris(); 
00CC:  BCF    08.1
....................    lcd_rw_tris(); 
00CD:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00CE:  MOVLW  0F
00CF:  BCF    03.5
00D0:  MOVWF  27
00D1:  CALL   055
....................    for(i=1;i<=3;++i) 
00D2:  MOVLW  01
00D3:  MOVWF  22
00D4:  MOVF   22,W
00D5:  SUBLW  03
00D6:  BTFSS  03.0
00D7:  GOTO   0E0
....................    { 
....................        lcd_send_nibble(3); 
00D8:  MOVLW  03
00D9:  MOVWF  2D
00DA:  CALL   06A
....................        delay_ms(5); 
00DB:  MOVLW  05
00DC:  MOVWF  27
00DD:  CALL   055
00DE:  INCF   22,F
00DF:  GOTO   0D4
....................    } 
....................     
....................    lcd_send_nibble(2); 
00E0:  MOVLW  02
00E1:  MOVWF  2D
00E2:  CALL   06A
....................    delay_ms(5); 
00E3:  MOVLW  05
00E4:  MOVWF  27
00E5:  CALL   055
....................    for(i=0;i<=3;++i) 
00E6:  CLRF   22
00E7:  MOVF   22,W
00E8:  SUBLW  03
00E9:  BTFSS  03.0
00EA:  GOTO   0F7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00EB:  MOVLW  23
00EC:  ADDWF  22,W
00ED:  MOVWF  04
00EE:  BCF    03.7
00EF:  MOVF   00,W
00F0:  MOVWF  27
00F1:  CLRF   2A
00F2:  MOVF   27,W
00F3:  MOVWF  2B
00F4:  CALL   07C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F5:  INCF   22,F
00F6:  GOTO   0E7
00F7:  BCF    0A.3
00F8:  BCF    0A.4
00F9:  GOTO   171 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00FA:  DECFSZ 27,W
00FB:  GOTO   0FD
00FC:  GOTO   100
....................       address=LCD_LINE_TWO; 
00FD:  MOVLW  40
00FE:  MOVWF  28
00FF:  GOTO   101
....................    else 
....................       address=0; 
0100:  CLRF   28
....................       
....................    address+=x-1; 
0101:  MOVLW  01
0102:  SUBWF  26,W
0103:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
0104:  MOVF   28,W
0105:  IORLW  80
0106:  MOVWF  29
0107:  CLRF   2A
0108:  MOVF   29,W
0109:  MOVWF  2B
010A:  CALL   07C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
010B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
010C:  MOVF   25,W
010D:  XORLW  07
010E:  BTFSC  03.2
010F:  GOTO   11A
0110:  XORLW  0B
0111:  BTFSC  03.2
0112:  GOTO   11F
0113:  XORLW  06
0114:  BTFSC  03.2
0115:  GOTO   127
0116:  XORLW  02
0117:  BTFSC  03.2
0118:  GOTO   12D
0119:  GOTO   132
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
011A:  MOVLW  01
011B:  MOVWF  26
011C:  MOVWF  27
011D:  CALL   0FA
011E:  GOTO   137
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
011F:  CLRF   2A
0120:  MOVLW  01
0121:  MOVWF  2B
0122:  CALL   07C
....................                      delay_ms(2); 
0123:  MOVLW  02
0124:  MOVWF  27
0125:  CALL   055
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0126:  GOTO   137
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0127:  MOVLW  01
0128:  MOVWF  26
0129:  MOVLW  02
012A:  MOVWF  27
012B:  CALL   0FA
012C:  GOTO   137
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
012D:  CLRF   2A
012E:  MOVLW  10
012F:  MOVWF  2B
0130:  CALL   07C
0131:  GOTO   137
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0132:  MOVLW  01
0133:  MOVWF  2A
0134:  MOVF   25,W
0135:  MOVWF  2B
0136:  CALL   07C
....................      #endif 
....................    } 
0137:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define BUTTON PIN_E0   //NUT BUTTON1 CO TAC DUNG NHAN GIU DE DUNG VIEC DEM 
.................... #define BUTTON1   PIN_E1 
.................... #define BUTTON2   PIN_E2 
....................  const unsigned char chu[] = {"                VI XU LY                "}; 
.................... //  x=         0123456789012345678901234567890123456789    a[x] 
.................... CHAR i, j; 
.................... void lcdRunning () 
.................... { 
....................    CHAR i, j; 
....................    FOR(i = 23; i >= 0; i--)  
0138:  MOVLW  17
0139:  MOVWF  22
....................    { 
....................       for(j = 1; j <= 16; j++) 
013A:  MOVLW  01
013B:  MOVWF  23
013C:  MOVF   23,W
013D:  SUBLW  10
013E:  BTFSS  03.0
013F:  GOTO   14D
....................       { 
....................          lcd_gotoxy(j, 1); 
0140:  MOVF   23,W
0141:  MOVWF  26
0142:  MOVLW  01
0143:  MOVWF  27
0144:  CALL   0FA
....................          printf(lcd_putc,"%c", chu[i + j]); 
0145:  MOVF   23,W
0146:  ADDWF  22,W
0147:  CALL   004
0148:  MOVWF  24
0149:  MOVWF  25
014A:  CALL   10C
014B:  INCF   23,F
014C:  GOTO   13C
....................       } 
....................       delay_ms(100); 
014D:  MOVLW  64
014E:  MOVWF  27
014F:  CALL   055
0150:  DECF   22,F
0151:  GOTO   13A
....................    } 
....................    lcd_putc('\f'); 
0152:  MOVLW  0C
0153:  MOVWF  25
0154:  CALL   10C
0155:  BCF    0A.3
0156:  BCF    0A.4
0157:  GOTO   175 (RETURN)
.................... } 
.................... VOID _BUTTON()  //NUT BUTTON1 CO TAC DUNG NHAN GIU DE DUNG VIEC DEM 
.................... { 
....................    if(input(BUTTON) == 0) 
....................    { 
....................       delay_ms(20); 
....................       if(input(BUTTON) == 0) 
....................       { 
....................           /*while(1) 
....................           { 
....................                if(input(BUTTON) == 0) 
....................                { 
....................                    DELAY_MS(10); 
....................                    BREAK; 
....................                } 
....................           }*/ 
....................           //Cach 2 
....................           int i = 0; 
....................           i++;  //Lam 1 lenh bat ky tang den vo han 
....................           while(input(BUTTON) == 0); 
....................        } 
....................    } 
.................... } 
.................... VOID _BUTTON1(INT i) 
.................... { 
.................... i = 0; 
.................... if(input(BUTTON1) == 0) 
....................    { 
....................       delay_ms(20); 
....................       if(input(BUTTON1) == 0) 
....................       { 
....................           i++; 
....................           if(i == 60){ 
....................           i = 0;} 
....................           while(input(BUTTON1) == 0); 
....................        } 
....................    } 
.................... } 
.................... VOID _BUTTON2(INT i) 
.................... { 
.................... i = 0; 
.................... if(input(BUTTON2) == 0) 
....................    { 
....................       delay_ms(20); 
....................       if(input(BUTTON2) == 0) 
....................       { 
....................           i--; 
....................           if(i == 0){   //Xet TH neu i = 0, thi i-- se bang -1 nen khoi tao i = 59. Vi i co dau - nen dung signed 
....................           i = 59;} 
....................           while(input(BUTTON2) == 0); 
....................        } 
....................    } 
.................... } 
.................... void clock_second() 
.................... { 
....................    lcd_gotoxy (1, 1) ; 
....................    printf (lcd_putc, "TRUONG DUC THANG") ; 
....................    for (UNSIGNED char i = 0; i < 60; i++) 
....................       { 
....................          lcd_gotoxy (2, 2) ; 
....................          printf (lcd_putc, "DEM GIAY: %02u", i) ; 
....................          delay_ms (1000) ; 
....................       } 
.................... } 
.................... void clock_minute() 
.................... { 
....................    lcd_gotoxy (1, 1) ; 
....................    printf (lcd_putc, "TRUONG DUC THANG") ; 
....................    for(unsigned char j = 0; j < 60; j++) 
....................       { 
....................          for(unsigned char k = 0; k < 60; k++) 
....................          { 
....................             _BUTTON(); 
....................             //_BUTTON1(k); 
....................             //_BUTTON2(k); 
....................             lcd_gotoxy (2, 2) ; 
....................             printf(lcd_putc,"DEM PHUT: %02u:%02u", j,  k); 
....................             delay_ms (1000) ; 
....................          } 
....................       } 
.................... } 
.................... void main() 
0158:  MOVF   03,W
0159:  ANDLW  1F
015A:  MOVWF  03
015B:  BSF    03.5
015C:  BSF    03.6
015D:  MOVF   09,W
015E:  ANDLW  C0
015F:  MOVWF  09
0160:  BCF    03.6
0161:  BCF    1F.4
0162:  BCF    1F.5
0163:  MOVLW  00
0164:  BSF    03.6
0165:  MOVWF  08
0166:  BCF    03.5
0167:  CLRF   07
0168:  CLRF   08
0169:  CLRF   09
016A:  BCF    03.7
.................... { 
....................    set_tris_d (0) ; 
016B:  MOVLW  00
016C:  BSF    03.5
016D:  BCF    03.6
016E:  MOVWF  08
....................    lcd_init () ; 
016F:  BCF    03.5
0170:  GOTO   0BC
....................    lcd_putc ('\f'); //clear screen 
0171:  MOVLW  0C
0172:  MOVWF  25
0173:  CALL   10C
....................  
....................    WHILE (TRUE) 
....................    { 
....................  
....................       //Cach 1 
....................       //lcd_putc ("f") ; 
....................  
....................       //Cach 2 
....................       //printf (lcd_putc, "TRUONG DUC THANG") ; 
....................       //printf (lcd_putc, " % d", 50); 
....................       //printf (lcd_putc, " % f", 54.12); 
....................       //printf (lcd_putc, "TRUONG DUC THANG") ; 
....................        
....................        
....................       lcdRunning(); 
0174:  GOTO   138
0175:  GOTO   174
....................       //clock_minute(); 
....................       //clock_second(); 
....................        
....................    } 
....................  
....................     
.................... } 
....................  
0176:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
